; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Output\system_stm32f10x.o --depend=.\Output\system_stm32f10x.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Output\system_stm32f10x.crf ..\User\system_stm32f10x.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SetSysClockTo72 PROC
;;;925      */
;;;926    static void SetSysClockTo72(void)
000000  2100              MOVS     r1,#0
;;;927    {
;;;928      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
;;;929      
;;;930      /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
;;;931      /* Enable HSE */    
;;;932      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  4a67              LDR      r2,|L1.420|
000006  6812              LDR      r2,[r2,#0]
000008  f4423280          ORR      r2,r2,#0x10000
00000c  4b65              LDR      r3,|L1.420|
00000e  601a              STR      r2,[r3,#0]
;;;933     
;;;934      /* Wait till HSE is ready and if Time out is reached exit */
;;;935      do
000010  bf00              NOP      
                  |L1.18|
;;;936      {
;;;937        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000012  4a64              LDR      r2,|L1.420|
000014  6812              LDR      r2,[r2,#0]
000016  f4023000          AND      r0,r2,#0x20000
;;;938        StartUpCounter++;  
00001a  1c49              ADDS     r1,r1,#1
;;;939      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
00001c  b910              CBNZ     r0,|L1.36|
00001e  f5b16fa0          CMP      r1,#0x500
000022  d1f6              BNE      |L1.18|
                  |L1.36|
;;;940    
;;;941      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000024  4a5f              LDR      r2,|L1.420|
000026  6812              LDR      r2,[r2,#0]
000028  f4123f00          TST      r2,#0x20000
00002c  d001              BEQ      |L1.50|
;;;942      {
;;;943        HSEStatus = (uint32_t)0x01;
00002e  2001              MOVS     r0,#1
000030  e000              B        |L1.52|
                  |L1.50|
;;;944      }
;;;945      else
;;;946      {
;;;947        HSEStatus = (uint32_t)0x00;
000032  2000              MOVS     r0,#0
                  |L1.52|
;;;948      }  
;;;949    
;;;950      if (HSEStatus == (uint32_t)0x01)
000034  2801              CMP      r0,#1
000036  d142              BNE      |L1.190|
;;;951      {
;;;952        /* Enable Prefetch Buffer */
;;;953        FLASH->ACR |= FLASH_ACR_PRFTBE;
000038  4a5b              LDR      r2,|L1.424|
00003a  6812              LDR      r2,[r2,#0]
00003c  f0420210          ORR      r2,r2,#0x10
000040  4b59              LDR      r3,|L1.424|
000042  601a              STR      r2,[r3,#0]
;;;954    
;;;955        /* Flash 2 wait state */
;;;956        FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
000044  461a              MOV      r2,r3
000046  6812              LDR      r2,[r2,#0]
000048  f0220203          BIC      r2,r2,#3
00004c  601a              STR      r2,[r3,#0]
;;;957        FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
00004e  461a              MOV      r2,r3
000050  6812              LDR      r2,[r2,#0]
000052  f0420202          ORR      r2,r2,#2
000056  601a              STR      r2,[r3,#0]
;;;958    
;;;959     
;;;960        /* HCLK = SYSCLK */
;;;961        RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
000058  4a52              LDR      r2,|L1.420|
00005a  6852              LDR      r2,[r2,#4]
00005c  4b51              LDR      r3,|L1.420|
00005e  605a              STR      r2,[r3,#4]
;;;962          
;;;963        /* PCLK2 = HCLK */
;;;964        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
000060  461a              MOV      r2,r3
000062  6852              LDR      r2,[r2,#4]
000064  605a              STR      r2,[r3,#4]
;;;965        
;;;966        /* PCLK1 = HCLK */
;;;967        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
000066  461a              MOV      r2,r3
000068  6852              LDR      r2,[r2,#4]
00006a  f4426280          ORR      r2,r2,#0x400
00006e  605a              STR      r2,[r3,#4]
;;;968    
;;;969    #ifdef STM32F10X_CL
;;;970        /* Configure PLLs ------------------------------------------------------*/
;;;971        /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
;;;972        /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
;;;973            
;;;974        RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
;;;975                                  RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
;;;976        RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
;;;977                                 RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
;;;978      
;;;979        /* Enable PLL2 */
;;;980        RCC->CR |= RCC_CR_PLL2ON;
;;;981        /* Wait till PLL2 is ready */
;;;982        while((RCC->CR & RCC_CR_PLL2RDY) == 0)
;;;983        {
;;;984        }
;;;985        
;;;986       
;;;987        /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
;;;988        RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
;;;989        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
;;;990                                RCC_CFGR_PLLMULL9); 
;;;991    #else    
;;;992        /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
;;;993        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
000070  461a              MOV      r2,r3
000072  6852              LDR      r2,[r2,#4]
000074  f422127c          BIC      r2,r2,#0x3f0000
000078  605a              STR      r2,[r3,#4]
;;;994                                            RCC_CFGR_PLLMULL));
;;;995        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
00007a  461a              MOV      r2,r3
00007c  6852              LDR      r2,[r2,#4]
00007e  f44212e8          ORR      r2,r2,#0x1d0000
000082  605a              STR      r2,[r3,#4]
;;;996    #endif /* STM32F10X_CL */
;;;997    
;;;998        /* Enable PLL */
;;;999        RCC->CR |= RCC_CR_PLLON;
000084  461a              MOV      r2,r3
000086  6812              LDR      r2,[r2,#0]
000088  f0427280          ORR      r2,r2,#0x1000000
00008c  601a              STR      r2,[r3,#0]
;;;1000   
;;;1001       /* Wait till PLL is ready */
;;;1002       while((RCC->CR & RCC_CR_PLLRDY) == 0)
00008e  bf00              NOP      
                  |L1.144|
000090  4a44              LDR      r2,|L1.420|
000092  6812              LDR      r2,[r2,#0]
000094  f0127f00          TST      r2,#0x2000000
000098  d0fa              BEQ      |L1.144|
;;;1003       {
;;;1004       }
;;;1005       
;;;1006       /* Select PLL as system clock source */
;;;1007       RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
00009a  4a42              LDR      r2,|L1.420|
00009c  6852              LDR      r2,[r2,#4]
00009e  f0220203          BIC      r2,r2,#3
0000a2  4b40              LDR      r3,|L1.420|
0000a4  605a              STR      r2,[r3,#4]
;;;1008       RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
0000a6  461a              MOV      r2,r3
0000a8  6852              LDR      r2,[r2,#4]
0000aa  f0420202          ORR      r2,r2,#2
0000ae  605a              STR      r2,[r3,#4]
;;;1009   
;;;1010       /* Wait till PLL is used as system clock source */
;;;1011       while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
0000b0  bf00              NOP      
                  |L1.178|
0000b2  4a3c              LDR      r2,|L1.420|
0000b4  6852              LDR      r2,[r2,#4]
0000b6  f002020c          AND      r2,r2,#0xc
0000ba  2a08              CMP      r2,#8
0000bc  d1f9              BNE      |L1.178|
                  |L1.190|
;;;1012       {
;;;1013       }
;;;1014     }
;;;1015     else
;;;1016     { /* If HSE fails to start-up, the application will have wrong clock 
;;;1017            configuration. User can add here some code to deal with this error */
;;;1018     }
;;;1019   }
0000be  4770              BX       lr
;;;1020   #endif
                          ENDP

                  SetSysClock PROC
;;;357      */
;;;358    static void SetSysClock(void)
0000c0  b510              PUSH     {r4,lr}
;;;359    {
;;;360    #ifdef SYSCLK_FREQ_HSE
;;;361      SetSysClockToHSE();
;;;362    #elif defined SYSCLK_FREQ_24MHz
;;;363      SetSysClockTo24();
;;;364    #elif defined SYSCLK_FREQ_36MHz
;;;365      SetSysClockTo36();
;;;366    #elif defined SYSCLK_FREQ_48MHz
;;;367      SetSysClockTo48();
;;;368    #elif defined SYSCLK_FREQ_56MHz
;;;369      SetSysClockTo56();  
;;;370    #elif defined SYSCLK_FREQ_72MHz
;;;371      SetSysClockTo72();
0000c2  f7fffffe          BL       SetSysClockTo72
;;;372    #endif
;;;373     
;;;374     /* If none of the define above is enabled, the HSI is used as System clock
;;;375        source (default after reset) */ 
;;;376    }
0000c6  bd10              POP      {r4,pc}
;;;377    
                          ENDP

                  SystemInit PROC
;;;179      */
;;;180    void SystemInit (void)
0000c8  b510              PUSH     {r4,lr}
;;;181    {
;;;182      /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
;;;183      /* Set HSION bit */
;;;184      RCC->CR |= (uint32_t)0x00000001;
0000ca  4836              LDR      r0,|L1.420|
0000cc  6800              LDR      r0,[r0,#0]
0000ce  f0400001          ORR      r0,r0,#1
0000d2  4934              LDR      r1,|L1.420|
0000d4  6008              STR      r0,[r1,#0]
;;;185    
;;;186      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;187    #ifndef STM32F10X_CL
;;;188      RCC->CFGR &= (uint32_t)0xF8FF0000;
0000d6  4608              MOV      r0,r1
0000d8  6840              LDR      r0,[r0,#4]
0000da  4934              LDR      r1,|L1.428|
0000dc  4008              ANDS     r0,r0,r1
0000de  4931              LDR      r1,|L1.420|
0000e0  6048              STR      r0,[r1,#4]
;;;189    #else
;;;190      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;191    #endif /* STM32F10X_CL */   
;;;192      
;;;193      /* Reset HSEON, CSSON and PLLON bits */
;;;194      RCC->CR &= (uint32_t)0xFEF6FFFF;
0000e2  4608              MOV      r0,r1
0000e4  6800              LDR      r0,[r0,#0]
0000e6  4932              LDR      r1,|L1.432|
0000e8  4008              ANDS     r0,r0,r1
0000ea  492e              LDR      r1,|L1.420|
0000ec  6008              STR      r0,[r1,#0]
;;;195    
;;;196      /* Reset HSEBYP bit */
;;;197      RCC->CR &= (uint32_t)0xFFFBFFFF;
0000ee  4608              MOV      r0,r1
0000f0  6800              LDR      r0,[r0,#0]
0000f2  f4202080          BIC      r0,r0,#0x40000
0000f6  6008              STR      r0,[r1,#0]
;;;198    
;;;199      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;200      RCC->CFGR &= (uint32_t)0xFF80FFFF;
0000f8  4608              MOV      r0,r1
0000fa  6840              LDR      r0,[r0,#4]
0000fc  f42000fe          BIC      r0,r0,#0x7f0000
000100  6048              STR      r0,[r1,#4]
;;;201    
;;;202    #ifdef STM32F10X_CL
;;;203      /* Reset PLL2ON and PLL3ON bits */
;;;204      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;205    
;;;206      /* Disable all interrupts and clear pending bits  */
;;;207      RCC->CIR = 0x00FF0000;
;;;208    
;;;209      /* Reset CFGR2 register */
;;;210      RCC->CFGR2 = 0x00000000;
;;;211    #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;212      /* Disable all interrupts and clear pending bits  */
;;;213      RCC->CIR = 0x009F0000;
;;;214    
;;;215      /* Reset CFGR2 register */
;;;216      RCC->CFGR2 = 0x00000000;      
;;;217    #else
;;;218      /* Disable all interrupts and clear pending bits  */
;;;219      RCC->CIR = 0x009F0000;
000102  f44f001f          MOV      r0,#0x9f0000
000106  6088              STR      r0,[r1,#8]
;;;220    #endif /* STM32F10X_CL */
;;;221        
;;;222    #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
;;;223      #ifdef DATA_IN_ExtSRAM
;;;224        SystemInit_ExtMemCtl(); 
;;;225      #endif /* DATA_IN_ExtSRAM */
;;;226    #endif 
;;;227    
;;;228      /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
;;;229      /* Configure the Flash Latency cycles and enable prefetch buffer */
;;;230      SetSysClock();
000108  f7fffffe          BL       SetSysClock
;;;231    
;;;232    #ifdef VECT_TAB_SRAM
;;;233      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;234    #else
;;;235      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
00010c  f04f6000          MOV      r0,#0x8000000
000110  4928              LDR      r1,|L1.436|
000112  6008              STR      r0,[r1,#0]
;;;236    #endif 
;;;237    }
000114  bd10              POP      {r4,pc}
;;;238    
                          ENDP

                  SystemCoreClockUpdate PROC
;;;244      */
;;;245    void SystemCoreClockUpdate (void)
000116  b510              PUSH     {r4,lr}
;;;246    {
;;;247      uint32_t tmp = 0, pllmull = 0, pllsource = 0;
000118  2100              MOVS     r1,#0
00011a  2000              MOVS     r0,#0
00011c  2200              MOVS     r2,#0
;;;248    
;;;249    #ifdef  STM32F10X_CL
;;;250      uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
;;;251    #endif /* STM32F10X_CL */
;;;252    
;;;253    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;254      uint32_t prediv1factor = 0;
;;;255    #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
;;;256        
;;;257      /* Get SYSCLK source -------------------------------------------------------*/
;;;258      tmp = RCC->CFGR & RCC_CFGR_SWS;
00011e  4b21              LDR      r3,|L1.420|
000120  685b              LDR      r3,[r3,#4]
000122  f003010c          AND      r1,r3,#0xc
;;;259      
;;;260      switch (tmp)
000126  b121              CBZ      r1,|L1.306|
000128  2904              CMP      r1,#4
00012a  d006              BEQ      |L1.314|
00012c  2908              CMP      r1,#8
00012e  d128              BNE      |L1.386|
000130  e007              B        |L1.322|
                  |L1.306|
;;;261      {
;;;262        case 0x00:  /* HSI used as system clock */
;;;263          SystemCoreClock = HSI_VALUE;
000132  4b21              LDR      r3,|L1.440|
000134  4c21              LDR      r4,|L1.444|
000136  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;264          break;
000138  e027              B        |L1.394|
                  |L1.314|
;;;265        case 0x04:  /* HSE used as system clock */
;;;266          SystemCoreClock = HSE_VALUE;
00013a  4b1f              LDR      r3,|L1.440|
00013c  4c1f              LDR      r4,|L1.444|
00013e  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;267          break;
000140  e023              B        |L1.394|
                  |L1.322|
;;;268        case 0x08:  /* PLL used as system clock */
;;;269    
;;;270          /* Get PLL clock source and multiplication factor ----------------------*/
;;;271          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
000142  4b18              LDR      r3,|L1.420|
000144  685b              LDR      r3,[r3,#4]
000146  f4031070          AND      r0,r3,#0x3c0000
;;;272          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
00014a  4b16              LDR      r3,|L1.420|
00014c  685b              LDR      r3,[r3,#4]
00014e  f4033280          AND      r2,r3,#0x10000
;;;273          
;;;274    #ifndef STM32F10X_CL      
;;;275          pllmull = ( pllmull >> 18) + 2;
000152  2302              MOVS     r3,#2
000154  eb034090          ADD      r0,r3,r0,LSR #18
;;;276          
;;;277          if (pllsource == 0x00)
000158  b922              CBNZ     r2,|L1.356|
;;;278          {
;;;279            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;280            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
00015a  4b19              LDR      r3,|L1.448|
00015c  4343              MULS     r3,r0,r3
00015e  4c17              LDR      r4,|L1.444|
000160  6023              STR      r3,[r4,#0]  ; SystemCoreClock
000162  e00d              B        |L1.384|
                  |L1.356|
;;;281          }
;;;282          else
;;;283          {
;;;284     #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;285           prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;286           /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;287           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
;;;288     #else
;;;289            /* HSE selected as PLL clock entry */
;;;290            if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
000164  4b0f              LDR      r3,|L1.420|
000166  685b              LDR      r3,[r3,#4]
000168  f4133f00          TST      r3,#0x20000
00016c  d004              BEQ      |L1.376|
;;;291            {/* HSE oscillator clock divided by 2 */
;;;292              SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
00016e  4b14              LDR      r3,|L1.448|
000170  4343              MULS     r3,r0,r3
000172  4c12              LDR      r4,|L1.444|
000174  6023              STR      r3,[r4,#0]  ; SystemCoreClock
000176  e003              B        |L1.384|
                  |L1.376|
;;;293            }
;;;294            else
;;;295            {
;;;296              SystemCoreClock = HSE_VALUE * pllmull;
000178  4b0f              LDR      r3,|L1.440|
00017a  4343              MULS     r3,r0,r3
00017c  4c0f              LDR      r4,|L1.444|
00017e  6023              STR      r3,[r4,#0]  ; SystemCoreClock
                  |L1.384|
;;;297            }
;;;298     #endif
;;;299          }
;;;300    #else
;;;301          pllmull = pllmull >> 18;
;;;302          
;;;303          if (pllmull != 0x0D)
;;;304          {
;;;305             pllmull += 2;
;;;306          }
;;;307          else
;;;308          { /* PLL multiplication factor = PLL input clock * 6.5 */
;;;309            pllmull = 13 / 2; 
;;;310          }
;;;311                
;;;312          if (pllsource == 0x00)
;;;313          {
;;;314            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;315            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;316          }
;;;317          else
;;;318          {/* PREDIV1 selected as PLL clock entry */
;;;319            
;;;320            /* Get PREDIV1 clock source and division factor */
;;;321            prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
;;;322            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;323            
;;;324            if (prediv1source == 0)
;;;325            { 
;;;326              /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;327              SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
;;;328            }
;;;329            else
;;;330            {/* PLL2 clock selected as PREDIV1 clock entry */
;;;331              
;;;332              /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;333              prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
;;;334              pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
;;;335              SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
;;;336            }
;;;337          }
;;;338    #endif /* STM32F10X_CL */ 
;;;339          break;
000180  e003              B        |L1.394|
                  |L1.386|
;;;340    
;;;341        default:
;;;342          SystemCoreClock = HSI_VALUE;
000182  4b0d              LDR      r3,|L1.440|
000184  4c0d              LDR      r4,|L1.444|
000186  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;343          break;
000188  bf00              NOP      
                  |L1.394|
00018a  bf00              NOP                            ;264
;;;344      }
;;;345      
;;;346      /* Compute HCLK clock frequency ----------------*/
;;;347      /* Get HCLK prescaler */
;;;348      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
00018c  4b05              LDR      r3,|L1.420|
00018e  685b              LDR      r3,[r3,#4]
000190  f3c31303          UBFX     r3,r3,#4,#4
000194  4c0b              LDR      r4,|L1.452|
000196  5ce1              LDRB     r1,[r4,r3]
;;;349      /* HCLK clock frequency */
;;;350      SystemCoreClock >>= tmp;  
000198  4b08              LDR      r3,|L1.444|
00019a  681b              LDR      r3,[r3,#0]  ; SystemCoreClock
00019c  40cb              LSRS     r3,r3,r1
00019e  4c07              LDR      r4,|L1.444|
0001a0  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;351    }
0001a2  bd10              POP      {r4,pc}
;;;352    
                          ENDP

                  |L1.420|
                          DCD      0x40021000
                  |L1.424|
                          DCD      0x40022000
                  |L1.428|
                          DCD      0xf8ff0000
                  |L1.432|
                          DCD      0xfef6ffff
                  |L1.436|
                          DCD      0xe000ed08
                  |L1.440|
                          DCD      0x007a1200
                  |L1.444|
                          DCD      SystemCoreClock
                  |L1.448|
                          DCD      0x003d0900
                  |L1.452|
                          DCD      AHBPrescTable

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x044aa200
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09
