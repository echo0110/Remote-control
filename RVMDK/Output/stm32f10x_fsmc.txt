; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Output\stm32f10x_fsmc.o --depend=.\Output\stm32f10x_fsmc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Output\stm32f10x_fsmc.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_fsmc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FSMC_NORSRAMDeInit PROC
;;;101      */
;;;102    void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
000000  b930              CBNZ     r0,|L1.16|
;;;103    {
;;;104      /* Check the parameter */
;;;105      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;106      
;;;107      /* FSMC_Bank1_NORSRAM1 */
;;;108      if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
;;;109      {
;;;110        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
000002  f24301db          MOV      r1,#0x30db
000006  f04f4220          MOV      r2,#0xa0000000
00000a  f8421020          STR      r1,[r2,r0,LSL #2]
00000e  e005              B        |L1.28|
                  |L1.16|
;;;111      }
;;;112      /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
;;;113      else
;;;114      {   
;;;115        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
000010  f24301d2          MOV      r1,#0x30d2
000014  f04f4220          MOV      r2,#0xa0000000
000018  f8421020          STR      r1,[r2,r0,LSL #2]
                  |L1.28|
;;;116      }
;;;117      FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
00001c  f06f4270          MVN      r2,#0xf0000000
000020  1c41              ADDS     r1,r0,#1
000022  f04f4320          MOV      r3,#0xa0000000
000026  f8432021          STR      r2,[r3,r1,LSL #2]
;;;118      FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
00002a  4611              MOV      r1,r2
00002c  461a              MOV      r2,r3
00002e  eb020280          ADD      r2,r2,r0,LSL #2
000032  f8c21104          STR      r1,[r2,#0x104]
;;;119    }
000036  4770              BX       lr
;;;120    
                          ENDP

                  FSMC_NANDDeInit PROC
;;;128      */
;;;129    void FSMC_NANDDeInit(uint32_t FSMC_Bank)
000038  2810              CMP      r0,#0x10
;;;130    {
;;;131      /* Check the parameter */
;;;132      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;133      
;;;134      if(FSMC_Bank == FSMC_Bank2_NAND)
00003a  d10a              BNE      |L1.82|
;;;135      {
;;;136        /* Set the FSMC_Bank2 registers to their reset values */
;;;137        FSMC_Bank2->PCR2 = 0x00000018;
00003c  2118              MOVS     r1,#0x18
00003e  f04f4220          MOV      r2,#0xa0000000
000042  6611              STR      r1,[r2,#0x60]
;;;138        FSMC_Bank2->SR2 = 0x00000040;
000044  2140              MOVS     r1,#0x40
000046  6651              STR      r1,[r2,#0x64]
;;;139        FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
000048  f04f31fc          MOV      r1,#0xfcfcfcfc
00004c  6691              STR      r1,[r2,#0x68]
;;;140        FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
00004e  66d1              STR      r1,[r2,#0x6c]
000050  e010              B        |L1.116|
                  |L1.82|
;;;141      }
;;;142      /* FSMC_Bank3_NAND */  
;;;143      else
;;;144      {
;;;145        /* Set the FSMC_Bank3 registers to their reset values */
;;;146        FSMC_Bank3->PCR3 = 0x00000018;
000052  2118              MOVS     r1,#0x18
000054  4af8              LDR      r2,|L1.1080|
000056  6011              STR      r1,[r2,#0]
;;;147        FSMC_Bank3->SR3 = 0x00000040;
000058  f04f0140          MOV      r1,#0x40
00005c  f04f4220          MOV      r2,#0xa0000000
000060  f8c21084          STR      r1,[r2,#0x84]
;;;148        FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
000064  f04f31fc          MOV      r1,#0xfcfcfcfc
000068  4af4              LDR      r2,|L1.1084|
00006a  6011              STR      r1,[r2,#0]
;;;149        FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
00006c  f04f4220          MOV      r2,#0xa0000000
000070  f8c2108c          STR      r1,[r2,#0x8c]
                  |L1.116|
;;;150      }  
;;;151    }
000074  4770              BX       lr
;;;152    
                          ENDP

                  FSMC_PCCARDDeInit PROC
;;;157      */
;;;158    void FSMC_PCCARDDeInit(void)
000076  2018              MOVS     r0,#0x18
;;;159    {
;;;160      /* Set the FSMC_Bank4 registers to their reset values */
;;;161      FSMC_Bank4->PCR4 = 0x00000018; 
000078  49f1              LDR      r1,|L1.1088|
00007a  6008              STR      r0,[r1,#0]
;;;162      FSMC_Bank4->SR4 = 0x00000000;	
00007c  f04f0000          MOV      r0,#0
000080  f04f4120          MOV      r1,#0xa0000000
000084  f8c100a4          STR      r0,[r1,#0xa4]
;;;163      FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
000088  f04f30fc          MOV      r0,#0xfcfcfcfc
00008c  49ed              LDR      r1,|L1.1092|
00008e  6008              STR      r0,[r1,#0]
;;;164      FSMC_Bank4->PATT4 = 0xFCFCFCFC;
000090  f1010104          ADD      r1,r1,#4
000094  6008              STR      r0,[r1,#0]
;;;165      FSMC_Bank4->PIO4 = 0xFCFCFCFC;
000096  f1010104          ADD      r1,r1,#4
00009a  6008              STR      r0,[r1,#0]
;;;166    }
00009c  4770              BX       lr
;;;167    
                          ENDP

                  FSMC_NORSRAMInit PROC
;;;175      */
;;;176    void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
00009e  e9d01201          LDRD     r1,r2,[r0,#4]
;;;177    { 
;;;178      /* Check the parameters */
;;;179      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_NORSRAMInitStruct->FSMC_Bank));
;;;180      assert_param(IS_FSMC_MUX(FSMC_NORSRAMInitStruct->FSMC_DataAddressMux));
;;;181      assert_param(IS_FSMC_MEMORY(FSMC_NORSRAMInitStruct->FSMC_MemoryType));
;;;182      assert_param(IS_FSMC_MEMORY_WIDTH(FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth));
;;;183      assert_param(IS_FSMC_BURSTMODE(FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode));
;;;184      assert_param(IS_FSMC_ASYNWAIT(FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait));
;;;185      assert_param(IS_FSMC_WAIT_POLARITY(FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity));
;;;186      assert_param(IS_FSMC_WRAP_MODE(FSMC_NORSRAMInitStruct->FSMC_WrapMode));
;;;187      assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive));
;;;188      assert_param(IS_FSMC_WRITE_OPERATION(FSMC_NORSRAMInitStruct->FSMC_WriteOperation));
;;;189      assert_param(IS_FSMC_WAITE_SIGNAL(FSMC_NORSRAMInitStruct->FSMC_WaitSignal));
;;;190      assert_param(IS_FSMC_EXTENDED_MODE(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode));
;;;191      assert_param(IS_FSMC_WRITE_BURST(FSMC_NORSRAMInitStruct->FSMC_WriteBurst));  
;;;192      assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime));
;;;193      assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime));
;;;194      assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime));
;;;195      assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration));
;;;196      assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
;;;197      assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
;;;198      assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
;;;199      
;;;200      /* Bank1 NOR/SRAM control register configuration */ 
;;;201      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
0000a2  4311              ORRS     r1,r1,r2
0000a4  68c2              LDR      r2,[r0,#0xc]
0000a6  4311              ORRS     r1,r1,r2
0000a8  6902              LDR      r2,[r0,#0x10]
0000aa  4311              ORRS     r1,r1,r2
0000ac  6942              LDR      r2,[r0,#0x14]
0000ae  4311              ORRS     r1,r1,r2
0000b0  6982              LDR      r2,[r0,#0x18]
0000b2  4311              ORRS     r1,r1,r2
0000b4  69c2              LDR      r2,[r0,#0x1c]
0000b6  4311              ORRS     r1,r1,r2
0000b8  6a02              LDR      r2,[r0,#0x20]
0000ba  4311              ORRS     r1,r1,r2
0000bc  6a42              LDR      r2,[r0,#0x24]
0000be  4311              ORRS     r1,r1,r2
0000c0  6a82              LDR      r2,[r0,#0x28]
0000c2  4311              ORRS     r1,r1,r2
0000c4  6ac2              LDR      r2,[r0,#0x2c]
0000c6  4311              ORRS     r1,r1,r2
0000c8  6b02              LDR      r2,[r0,#0x30]
0000ca  4311              ORRS     r1,r1,r2
0000cc  f04f4320          MOV      r3,#0xa0000000
0000d0  6802              LDR      r2,[r0,#0]
0000d2  f8431022          STR      r1,[r3,r2,LSL #2]
;;;202                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
;;;203                FSMC_NORSRAMInitStruct->FSMC_MemoryType |
;;;204                FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
;;;205                FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
;;;206                FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
;;;207                FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
;;;208                FSMC_NORSRAMInitStruct->FSMC_WrapMode |
;;;209                FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
;;;210                FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
;;;211                FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
;;;212                FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
;;;213                FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
;;;214    
;;;215      if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
0000d6  6881              LDR      r1,[r0,#8]
0000d8  2908              CMP      r1,#8
0000da  d108              BNE      |L1.238|
;;;216      {
;;;217        FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_Set;
0000dc  461a              MOV      r2,r3
0000de  6801              LDR      r1,[r0,#0]
0000e0  f8521021          LDR      r1,[r2,r1,LSL #2]
0000e4  f0410140          ORR      r1,r1,#0x40
0000e8  6802              LDR      r2,[r0,#0]
0000ea  f8431022          STR      r1,[r3,r2,LSL #2]
                  |L1.238|
;;;218      }
;;;219      
;;;220      /* Bank1 NOR/SRAM timing register configuration */
;;;221      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
0000ee  6b41              LDR      r1,[r0,#0x34]
0000f0  6809              LDR      r1,[r1,#0]
0000f2  6b42              LDR      r2,[r0,#0x34]
0000f4  6852              LDR      r2,[r2,#4]
0000f6  ea411102          ORR      r1,r1,r2,LSL #4
0000fa  6b42              LDR      r2,[r0,#0x34]
0000fc  6892              LDR      r2,[r2,#8]
0000fe  ea412102          ORR      r1,r1,r2,LSL #8
000102  6b42              LDR      r2,[r0,#0x34]
000104  68d2              LDR      r2,[r2,#0xc]
000106  ea414102          ORR      r1,r1,r2,LSL #16
00010a  6b42              LDR      r2,[r0,#0x34]
00010c  6912              LDR      r2,[r2,#0x10]
00010e  ea415102          ORR      r1,r1,r2,LSL #20
000112  6b42              LDR      r2,[r0,#0x34]
000114  6952              LDR      r2,[r2,#0x14]
000116  ea416102          ORR      r1,r1,r2,LSL #24
00011a  6b42              LDR      r2,[r0,#0x34]
00011c  6992              LDR      r2,[r2,#0x18]
00011e  4311              ORRS     r1,r1,r2
000120  6802              LDR      r2,[r0,#0]
000122  1c52              ADDS     r2,r2,#1
000124  f04f4320          MOV      r3,#0xa0000000
000128  f8431022          STR      r1,[r3,r2,LSL #2]
;;;222                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
;;;223                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
;;;224                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;225                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
;;;226                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
;;;227                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
;;;228                 FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
;;;229                
;;;230        
;;;231      /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
;;;232      if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
00012c  6ac1              LDR      r1,[r0,#0x2c]
00012e  f5b14f80          CMP      r1,#0x4000
000132  d11a              BNE      |L1.362|
;;;233      {
;;;234        assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime));
;;;235        assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
;;;236        assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
;;;237        assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
;;;238        assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
;;;239        assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
;;;240        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
000134  6b81              LDR      r1,[r0,#0x38]
000136  6809              LDR      r1,[r1,#0]
000138  6b82              LDR      r2,[r0,#0x38]
00013a  6852              LDR      r2,[r2,#4]
00013c  ea411102          ORR      r1,r1,r2,LSL #4
000140  6b82              LDR      r2,[r0,#0x38]
000142  6892              LDR      r2,[r2,#8]
000144  ea412102          ORR      r1,r1,r2,LSL #8
000148  6b82              LDR      r2,[r0,#0x38]
00014a  6912              LDR      r2,[r2,#0x10]
00014c  ea415102          ORR      r1,r1,r2,LSL #20
000150  6b82              LDR      r2,[r0,#0x38]
000152  6952              LDR      r2,[r2,#0x14]
000154  ea416102          ORR      r1,r1,r2,LSL #24
000158  6b82              LDR      r2,[r0,#0x38]
00015a  6992              LDR      r2,[r2,#0x18]
00015c  4311              ORRS     r1,r1,r2
00015e  6802              LDR      r2,[r0,#0]
000160  eb030282          ADD      r2,r3,r2,LSL #2
000164  f8c21104          STR      r1,[r2,#0x104]
000168  e008              B        |L1.380|
                  |L1.362|
;;;241                  (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
;;;242                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
;;;243                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;244                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
;;;245                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
;;;246                   FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
;;;247      }
;;;248      else
;;;249      {
;;;250        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
00016a  f06f4170          MVN      r1,#0xf0000000
00016e  f04f4320          MOV      r3,#0xa0000000
000172  6802              LDR      r2,[r0,#0]
000174  eb030282          ADD      r2,r3,r2,LSL #2
000178  f8c21104          STR      r1,[r2,#0x104]
                  |L1.380|
;;;251      }
;;;252    }
00017c  4770              BX       lr
;;;253    
                          ENDP

                  FSMC_NANDInit PROC
;;;261      */
;;;262    void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
00017e  b530              PUSH     {r4,r5,lr}
;;;263    {
;;;264      uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
000180  2100              MOVS     r1,#0
000182  2200              MOVS     r2,#0
000184  2300              MOVS     r3,#0
;;;265        
;;;266      /* Check the parameters */
;;;267      assert_param( IS_FSMC_NAND_BANK(FSMC_NANDInitStruct->FSMC_Bank));
;;;268      assert_param( IS_FSMC_WAIT_FEATURE(FSMC_NANDInitStruct->FSMC_Waitfeature));
;;;269      assert_param( IS_FSMC_MEMORY_WIDTH(FSMC_NANDInitStruct->FSMC_MemoryDataWidth));
;;;270      assert_param( IS_FSMC_ECC_STATE(FSMC_NANDInitStruct->FSMC_ECC));
;;;271      assert_param( IS_FSMC_ECCPAGE_SIZE(FSMC_NANDInitStruct->FSMC_ECCPageSize));
;;;272      assert_param( IS_FSMC_TCLR_TIME(FSMC_NANDInitStruct->FSMC_TCLRSetupTime));
;;;273      assert_param( IS_FSMC_TAR_TIME(FSMC_NANDInitStruct->FSMC_TARSetupTime));
;;;274      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;275      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;276      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;277      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;278      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;279      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;280      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;281      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;282      
;;;283      /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
;;;284      tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
000186  6844              LDR      r4,[r0,#4]
000188  f0440408          ORR      r4,r4,#8
00018c  6885              LDR      r5,[r0,#8]
00018e  432c              ORRS     r4,r4,r5
000190  68c5              LDR      r5,[r0,#0xc]
000192  432c              ORRS     r4,r4,r5
000194  6905              LDR      r5,[r0,#0x10]
000196  432c              ORRS     r4,r4,r5
000198  6945              LDR      r5,[r0,#0x14]
00019a  ea442445          ORR      r4,r4,r5,LSL #9
00019e  6985              LDR      r5,[r0,#0x18]
0001a0  ea443145          ORR      r1,r4,r5,LSL #13
;;;285                PCR_MemoryType_NAND |
;;;286                FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
;;;287                FSMC_NANDInitStruct->FSMC_ECC |
;;;288                FSMC_NANDInitStruct->FSMC_ECCPageSize |
;;;289                (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
;;;290                (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
;;;291                
;;;292      /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
;;;293      tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
0001a4  69c4              LDR      r4,[r0,#0x1c]
0001a6  6824              LDR      r4,[r4,#0]
0001a8  69c5              LDR      r5,[r0,#0x1c]
0001aa  686d              LDR      r5,[r5,#4]
0001ac  ea442405          ORR      r4,r4,r5,LSL #8
0001b0  69c5              LDR      r5,[r0,#0x1c]
0001b2  68ad              LDR      r5,[r5,#8]
0001b4  ea444405          ORR      r4,r4,r5,LSL #16
0001b8  69c5              LDR      r5,[r0,#0x1c]
0001ba  68ed              LDR      r5,[r5,#0xc]
0001bc  ea446205          ORR      r2,r4,r5,LSL #24
;;;294                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;295                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;296                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;297                
;;;298      /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;299      tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
0001c0  6a04              LDR      r4,[r0,#0x20]
0001c2  6824              LDR      r4,[r4,#0]
0001c4  6a05              LDR      r5,[r0,#0x20]
0001c6  686d              LDR      r5,[r5,#4]
0001c8  ea442405          ORR      r4,r4,r5,LSL #8
0001cc  6a05              LDR      r5,[r0,#0x20]
0001ce  68ad              LDR      r5,[r5,#8]
0001d0  ea444405          ORR      r4,r4,r5,LSL #16
0001d4  6a05              LDR      r5,[r0,#0x20]
0001d6  68ed              LDR      r5,[r5,#0xc]
0001d8  ea446305          ORR      r3,r4,r5,LSL #24
;;;300                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;301                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;302                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
;;;303      
;;;304      if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
0001dc  6804              LDR      r4,[r0,#0]
0001de  2c10              CMP      r4,#0x10
0001e0  d105              BNE      |L1.494|
;;;305      {
;;;306        /* FSMC_Bank2_NAND registers configuration */
;;;307        FSMC_Bank2->PCR2 = tmppcr;
0001e2  f04f4420          MOV      r4,#0xa0000000
0001e6  6621              STR      r1,[r4,#0x60]
;;;308        FSMC_Bank2->PMEM2 = tmppmem;
0001e8  66a2              STR      r2,[r4,#0x68]
;;;309        FSMC_Bank2->PATT2 = tmppatt;
0001ea  66e3              STR      r3,[r4,#0x6c]
0001ec  e007              B        |L1.510|
                  |L1.494|
;;;310      }
;;;311      else
;;;312      {
;;;313        /* FSMC_Bank3_NAND registers configuration */
;;;314        FSMC_Bank3->PCR3 = tmppcr;
0001ee  4c92              LDR      r4,|L1.1080|
0001f0  6021              STR      r1,[r4,#0]
;;;315        FSMC_Bank3->PMEM3 = tmppmem;
0001f2  f04f4420          MOV      r4,#0xa0000000
0001f6  f8c42088          STR      r2,[r4,#0x88]
;;;316        FSMC_Bank3->PATT3 = tmppatt;
0001fa  4c93              LDR      r4,|L1.1096|
0001fc  6023              STR      r3,[r4,#0]
                  |L1.510|
;;;317      }
;;;318    }
0001fe  bd30              POP      {r4,r5,pc}
;;;319    
                          ENDP

                  FSMC_PCCARDInit PROC
;;;327      */
;;;328    void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000200  6801              LDR      r1,[r0,#0]
;;;329    {
;;;330      /* Check the parameters */
;;;331      assert_param(IS_FSMC_WAIT_FEATURE(FSMC_PCCARDInitStruct->FSMC_Waitfeature));
;;;332      assert_param(IS_FSMC_TCLR_TIME(FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime));
;;;333      assert_param(IS_FSMC_TAR_TIME(FSMC_PCCARDInitStruct->FSMC_TARSetupTime));
;;;334     
;;;335      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;336      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;337      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;338      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;339      
;;;340      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;341      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;342      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;343      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;344      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime));
;;;345      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
;;;346      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
;;;347      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
;;;348      
;;;349      /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
;;;350      FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
000202  f0410110          ORR      r1,r1,#0x10
000206  6842              LDR      r2,[r0,#4]
000208  ea412142          ORR      r1,r1,r2,LSL #9
00020c  6882              LDR      r2,[r0,#8]
00020e  ea413142          ORR      r1,r1,r2,LSL #13
000212  4a8b              LDR      r2,|L1.1088|
000214  6011              STR      r1,[r2,#0]
;;;351                         FSMC_MemoryDataWidth_16b |  
;;;352                         (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
;;;353                         (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
;;;354                
;;;355      /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
;;;356      FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
000216  68c1              LDR      r1,[r0,#0xc]
000218  6809              LDR      r1,[r1,#0]
00021a  68c2              LDR      r2,[r0,#0xc]
00021c  6852              LDR      r2,[r2,#4]
00021e  ea412102          ORR      r1,r1,r2,LSL #8
000222  68c2              LDR      r2,[r0,#0xc]
000224  6892              LDR      r2,[r2,#8]
000226  ea414102          ORR      r1,r1,r2,LSL #16
00022a  68c2              LDR      r2,[r0,#0xc]
00022c  68d2              LDR      r2,[r2,#0xc]
00022e  ea416102          ORR      r1,r1,r2,LSL #24
000232  4a84              LDR      r2,|L1.1092|
000234  6011              STR      r1,[r2,#0]
;;;357                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;358                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;359                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;360                
;;;361      /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;362      FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000236  6901              LDR      r1,[r0,#0x10]
000238  6809              LDR      r1,[r1,#0]
00023a  6902              LDR      r2,[r0,#0x10]
00023c  6852              LDR      r2,[r2,#4]
00023e  ea412102          ORR      r1,r1,r2,LSL #8
000242  6902              LDR      r2,[r0,#0x10]
000244  6892              LDR      r2,[r2,#8]
000246  ea414102          ORR      r1,r1,r2,LSL #16
00024a  6902              LDR      r2,[r0,#0x10]
00024c  68d2              LDR      r2,[r2,#0xc]
00024e  ea416102          ORR      r1,r1,r2,LSL #24
000252  4a7e              LDR      r2,|L1.1100|
000254  6011              STR      r1,[r2,#0]
;;;363                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;364                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;365                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
;;;366                
;;;367      /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
;;;368      FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
000256  6941              LDR      r1,[r0,#0x14]
000258  6809              LDR      r1,[r1,#0]
00025a  6942              LDR      r2,[r0,#0x14]
00025c  6852              LDR      r2,[r2,#4]
00025e  ea412102          ORR      r1,r1,r2,LSL #8
000262  6942              LDR      r2,[r0,#0x14]
000264  6892              LDR      r2,[r2,#8]
000266  ea414102          ORR      r1,r1,r2,LSL #16
00026a  6942              LDR      r2,[r0,#0x14]
00026c  68d2              LDR      r2,[r2,#0xc]
00026e  ea416102          ORR      r1,r1,r2,LSL #24
000272  f04f4220          MOV      r2,#0xa0000000
000276  f8c210b0          STR      r1,[r2,#0xb0]
;;;369                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;370                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;371                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
;;;372    }
00027a  4770              BX       lr
;;;373    
                          ENDP

                  FSMC_NORSRAMStructInit PROC
;;;379      */
;;;380    void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
00027c  2100              MOVS     r1,#0
;;;381    {  
;;;382      /* Reset NOR/SRAM Init structure parameters values */
;;;383      FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
00027e  6001              STR      r1,[r0,#0]
;;;384      FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
000280  2102              MOVS     r1,#2
000282  6041              STR      r1,[r0,#4]
;;;385      FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
000284  2100              MOVS     r1,#0
000286  6081              STR      r1,[r0,#8]
;;;386      FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
000288  60c1              STR      r1,[r0,#0xc]
;;;387      FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
00028a  6101              STR      r1,[r0,#0x10]
;;;388      FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
00028c  6141              STR      r1,[r0,#0x14]
;;;389      FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
00028e  6181              STR      r1,[r0,#0x18]
;;;390      FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
000290  61c1              STR      r1,[r0,#0x1c]
;;;391      FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
000292  6201              STR      r1,[r0,#0x20]
;;;392      FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000294  f44f5180          MOV      r1,#0x1000
000298  6241              STR      r1,[r0,#0x24]
;;;393      FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
00029a  0049              LSLS     r1,r1,#1
00029c  6281              STR      r1,[r0,#0x28]
;;;394      FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
00029e  2100              MOVS     r1,#0
0002a0  62c1              STR      r1,[r0,#0x2c]
;;;395      FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
0002a2  6301              STR      r1,[r0,#0x30]
;;;396      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
0002a4  210f              MOVS     r1,#0xf
0002a6  6b42              LDR      r2,[r0,#0x34]
0002a8  6011              STR      r1,[r2,#0]
;;;397      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
0002aa  6b42              LDR      r2,[r0,#0x34]
0002ac  6051              STR      r1,[r2,#4]
;;;398      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
0002ae  21ff              MOVS     r1,#0xff
0002b0  6b42              LDR      r2,[r0,#0x34]
0002b2  6091              STR      r1,[r2,#8]
;;;399      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
0002b4  210f              MOVS     r1,#0xf
0002b6  6b42              LDR      r2,[r0,#0x34]
0002b8  60d1              STR      r1,[r2,#0xc]
;;;400      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
0002ba  6b42              LDR      r2,[r0,#0x34]
0002bc  6111              STR      r1,[r2,#0x10]
;;;401      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
0002be  6b42              LDR      r2,[r0,#0x34]
0002c0  6151              STR      r1,[r2,#0x14]
;;;402      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
0002c2  2100              MOVS     r1,#0
0002c4  6b42              LDR      r2,[r0,#0x34]
0002c6  6191              STR      r1,[r2,#0x18]
;;;403      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
0002c8  210f              MOVS     r1,#0xf
0002ca  6b82              LDR      r2,[r0,#0x38]
0002cc  6011              STR      r1,[r2,#0]
;;;404      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
0002ce  6b82              LDR      r2,[r0,#0x38]
0002d0  6051              STR      r1,[r2,#4]
;;;405      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
0002d2  21ff              MOVS     r1,#0xff
0002d4  6b82              LDR      r2,[r0,#0x38]
0002d6  6091              STR      r1,[r2,#8]
;;;406      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
0002d8  210f              MOVS     r1,#0xf
0002da  6b82              LDR      r2,[r0,#0x38]
0002dc  60d1              STR      r1,[r2,#0xc]
;;;407      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
0002de  6b82              LDR      r2,[r0,#0x38]
0002e0  6111              STR      r1,[r2,#0x10]
;;;408      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
0002e2  6b82              LDR      r2,[r0,#0x38]
0002e4  6151              STR      r1,[r2,#0x14]
;;;409      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
0002e6  2100              MOVS     r1,#0
0002e8  6b82              LDR      r2,[r0,#0x38]
0002ea  6191              STR      r1,[r2,#0x18]
;;;410    }
0002ec  4770              BX       lr
;;;411    
                          ENDP

                  FSMC_NANDStructInit PROC
;;;417      */
;;;418    void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
0002ee  2110              MOVS     r1,#0x10
;;;419    { 
;;;420      /* Reset NAND Init structure parameters values */
;;;421      FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
0002f0  6001              STR      r1,[r0,#0]
;;;422      FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
0002f2  2100              MOVS     r1,#0
0002f4  6041              STR      r1,[r0,#4]
;;;423      FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
0002f6  6081              STR      r1,[r0,#8]
;;;424      FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
0002f8  60c1              STR      r1,[r0,#0xc]
;;;425      FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
0002fa  6101              STR      r1,[r0,#0x10]
;;;426      FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
0002fc  6141              STR      r1,[r0,#0x14]
;;;427      FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
0002fe  6181              STR      r1,[r0,#0x18]
;;;428      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000300  21fc              MOVS     r1,#0xfc
000302  69c2              LDR      r2,[r0,#0x1c]
000304  6011              STR      r1,[r2,#0]
;;;429      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000306  69c2              LDR      r2,[r0,#0x1c]
000308  6051              STR      r1,[r2,#4]
;;;430      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
00030a  69c2              LDR      r2,[r0,#0x1c]
00030c  6091              STR      r1,[r2,#8]
;;;431      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
00030e  69c2              LDR      r2,[r0,#0x1c]
000310  60d1              STR      r1,[r2,#0xc]
;;;432      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
000312  6a02              LDR      r2,[r0,#0x20]
000314  6011              STR      r1,[r2,#0]
;;;433      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000316  6a02              LDR      r2,[r0,#0x20]
000318  6051              STR      r1,[r2,#4]
;;;434      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
00031a  6a02              LDR      r2,[r0,#0x20]
00031c  6091              STR      r1,[r2,#8]
;;;435      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
00031e  6a02              LDR      r2,[r0,#0x20]
000320  60d1              STR      r1,[r2,#0xc]
;;;436    }
000322  4770              BX       lr
;;;437    
                          ENDP

                  FSMC_PCCARDStructInit PROC
;;;443      */
;;;444    void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000324  2100              MOVS     r1,#0
;;;445    {
;;;446      /* Reset PCCARD Init structure parameters values */
;;;447      FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
000326  6001              STR      r1,[r0,#0]
;;;448      FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
000328  6041              STR      r1,[r0,#4]
;;;449      FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
00032a  6081              STR      r1,[r0,#8]
;;;450      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00032c  21fc              MOVS     r1,#0xfc
00032e  68c2              LDR      r2,[r0,#0xc]
000330  6011              STR      r1,[r2,#0]
;;;451      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000332  68c2              LDR      r2,[r0,#0xc]
000334  6051              STR      r1,[r2,#4]
;;;452      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000336  68c2              LDR      r2,[r0,#0xc]
000338  6091              STR      r1,[r2,#8]
;;;453      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
00033a  68c2              LDR      r2,[r0,#0xc]
00033c  60d1              STR      r1,[r2,#0xc]
;;;454      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00033e  6902              LDR      r2,[r0,#0x10]
000340  6011              STR      r1,[r2,#0]
;;;455      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000342  6902              LDR      r2,[r0,#0x10]
000344  6051              STR      r1,[r2,#4]
;;;456      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000346  6902              LDR      r2,[r0,#0x10]
000348  6091              STR      r1,[r2,#8]
;;;457      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
00034a  6902              LDR      r2,[r0,#0x10]
00034c  60d1              STR      r1,[r2,#0xc]
;;;458      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00034e  6942              LDR      r2,[r0,#0x14]
000350  6011              STR      r1,[r2,#0]
;;;459      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000352  6942              LDR      r2,[r0,#0x14]
000354  6051              STR      r1,[r2,#4]
;;;460      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000356  6942              LDR      r2,[r0,#0x14]
000358  6091              STR      r1,[r2,#8]
;;;461      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
00035a  6942              LDR      r2,[r0,#0x14]
00035c  60d1              STR      r1,[r2,#0xc]
;;;462    }
00035e  4770              BX       lr
;;;463    
                          ENDP

                  FSMC_NORSRAMCmd PROC
;;;474      */
;;;475    void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000360  b151              CBZ      r1,|L1.888|
;;;476    {
;;;477      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;478      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;479      
;;;480      if (NewState != DISABLE)
;;;481      {
;;;482        /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
;;;483        FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_Set;
000362  f04f4220          MOV      r2,#0xa0000000
000366  f8522020          LDR      r2,[r2,r0,LSL #2]
00036a  f0420201          ORR      r2,r2,#1
00036e  f04f4320          MOV      r3,#0xa0000000
000372  f8432020          STR      r2,[r3,r0,LSL #2]
000376  e009              B        |L1.908|
                  |L1.888|
;;;484      }
;;;485      else
;;;486      {
;;;487        /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
;;;488        FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_Reset;
000378  f04f4220          MOV      r2,#0xa0000000
00037c  f8522020          LDR      r2,[r2,r0,LSL #2]
000380  4b33              LDR      r3,|L1.1104|
000382  401a              ANDS     r2,r2,r3
000384  f04f4320          MOV      r3,#0xa0000000
000388  f8432020          STR      r2,[r3,r0,LSL #2]
                  |L1.908|
;;;489      }
;;;490    }
00038c  4770              BX       lr
;;;491    
                          ENDP

                  FSMC_NANDCmd PROC
;;;500      */
;;;501    void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
00038e  b199              CBZ      r1,|L1.952|
;;;502    {
;;;503      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;504      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;505      
;;;506      if (NewState != DISABLE)
;;;507      {
;;;508        /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
;;;509        if(FSMC_Bank == FSMC_Bank2_NAND)
000390  2810              CMP      r0,#0x10
000392  d108              BNE      |L1.934|
;;;510        {
;;;511          FSMC_Bank2->PCR2 |= PCR_PBKEN_Set;
000394  f04f4220          MOV      r2,#0xa0000000
000398  6e12              LDR      r2,[r2,#0x60]
00039a  f0420204          ORR      r2,r2,#4
00039e  f04f4320          MOV      r3,#0xa0000000
0003a2  661a              STR      r2,[r3,#0x60]
0003a4  e01d              B        |L1.994|
                  |L1.934|
;;;512        }
;;;513        else
;;;514        {
;;;515          FSMC_Bank3->PCR3 |= PCR_PBKEN_Set;
0003a6  4a24              LDR      r2,|L1.1080|
0003a8  6812              LDR      r2,[r2,#0]
0003aa  f0420204          ORR      r2,r2,#4
0003ae  f04f4320          MOV      r3,#0xa0000000
0003b2  f8c32080          STR      r2,[r3,#0x80]
0003b6  e014              B        |L1.994|
                  |L1.952|
;;;516        }
;;;517      }
;;;518      else
;;;519      {
;;;520        /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
;;;521        if(FSMC_Bank == FSMC_Bank2_NAND)
0003b8  2810              CMP      r0,#0x10
0003ba  d109              BNE      |L1.976|
;;;522        {
;;;523          FSMC_Bank2->PCR2 &= PCR_PBKEN_Reset;
0003bc  f04f4220          MOV      r2,#0xa0000000
0003c0  6e12              LDR      r2,[r2,#0x60]
0003c2  4b23              LDR      r3,|L1.1104|
0003c4  1edb              SUBS     r3,r3,#3
0003c6  401a              ANDS     r2,r2,r3
0003c8  f04f4320          MOV      r3,#0xa0000000
0003cc  661a              STR      r2,[r3,#0x60]
0003ce  e008              B        |L1.994|
                  |L1.976|
;;;524        }
;;;525        else
;;;526        {
;;;527          FSMC_Bank3->PCR3 &= PCR_PBKEN_Reset;
0003d0  4a19              LDR      r2,|L1.1080|
0003d2  6812              LDR      r2,[r2,#0]
0003d4  4b1f              LDR      r3,|L1.1108|
0003d6  ea020203          AND      r2,r2,r3
0003da  f04f4320          MOV      r3,#0xa0000000
0003de  f8c32080          STR      r2,[r3,#0x80]
                  |L1.994|
;;;528        }
;;;529      }
;;;530    }
0003e2  4770              BX       lr
;;;531    
                          ENDP

                  FSMC_PCCARDCmd PROC
;;;537      */
;;;538    void FSMC_PCCARDCmd(FunctionalState NewState)
0003e4  b140              CBZ      r0,|L1.1016|
;;;539    {
;;;540      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;541      
;;;542      if (NewState != DISABLE)
;;;543      {
;;;544        /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
;;;545        FSMC_Bank4->PCR4 |= PCR_PBKEN_Set;
0003e6  4916              LDR      r1,|L1.1088|
0003e8  6809              LDR      r1,[r1,#0]
0003ea  f0410104          ORR      r1,r1,#4
0003ee  f04f4220          MOV      r2,#0xa0000000
0003f2  f8c210a0          STR      r1,[r2,#0xa0]
0003f6  e008              B        |L1.1034|
                  |L1.1016|
;;;546      }
;;;547      else
;;;548      {
;;;549        /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
;;;550        FSMC_Bank4->PCR4 &= PCR_PBKEN_Reset;
0003f8  4911              LDR      r1,|L1.1088|
0003fa  6809              LDR      r1,[r1,#0]
0003fc  4a15              LDR      r2,|L1.1108|
0003fe  ea010102          AND      r1,r1,r2
000402  f04f4220          MOV      r2,#0xa0000000
000406  f8c210a0          STR      r1,[r2,#0xa0]
                  |L1.1034|
;;;551      }
;;;552    }
00040a  4770              BX       lr
;;;553    
                          ENDP

                  FSMC_NANDECCCmd PROC
;;;563      */
;;;564    void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
00040c  b199              CBZ      r1,|L1.1078|
;;;565    {
;;;566      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;567      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;568      
;;;569      if (NewState != DISABLE)
;;;570      {
;;;571        /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
;;;572        if(FSMC_Bank == FSMC_Bank2_NAND)
00040e  2810              CMP      r0,#0x10
000410  d108              BNE      |L1.1060|
;;;573        {
;;;574          FSMC_Bank2->PCR2 |= PCR_ECCEN_Set;
000412  f04f4220          MOV      r2,#0xa0000000
000416  6e12              LDR      r2,[r2,#0x60]
000418  f0420240          ORR      r2,r2,#0x40
00041c  f04f4320          MOV      r3,#0xa0000000
000420  661a              STR      r2,[r3,#0x60]
000422  e02d              B        |L1.1152|
                  |L1.1060|
;;;575        }
;;;576        else
;;;577        {
;;;578          FSMC_Bank3->PCR3 |= PCR_ECCEN_Set;
000424  4a04              LDR      r2,|L1.1080|
000426  6812              LDR      r2,[r2,#0]
000428  f0420240          ORR      r2,r2,#0x40
00042c  f04f4320          MOV      r3,#0xa0000000
000430  f8c32080          STR      r2,[r3,#0x80]
000434  e024              B        |L1.1152|
                  |L1.1078|
000436  e00f              B        |L1.1112|
                  |L1.1080|
                          DCD      0xa0000080
                  |L1.1084|
                          DCD      0xa0000088
                  |L1.1088|
                          DCD      0xa00000a0
                  |L1.1092|
                          DCD      0xa00000a8
                  |L1.1096|
                          DCD      0xa000008c
                  |L1.1100|
                          DCD      0xa00000ac
                  |L1.1104|
                          DCD      0x000ffffe
                  |L1.1108|
                          DCD      0x000ffffb
                  |L1.1112|
;;;579        }
;;;580      }
;;;581      else
;;;582      {
;;;583        /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
;;;584        if(FSMC_Bank == FSMC_Bank2_NAND)
000458  2810              CMP      r0,#0x10
00045a  d108              BNE      |L1.1134|
;;;585        {
;;;586          FSMC_Bank2->PCR2 &= PCR_ECCEN_Reset;
00045c  f04f4220          MOV      r2,#0xa0000000
000460  6e12              LDR      r2,[r2,#0x60]
000462  4b68              LDR      r3,|L1.1540|
000464  401a              ANDS     r2,r2,r3
000466  f04f4320          MOV      r3,#0xa0000000
00046a  661a              STR      r2,[r3,#0x60]
00046c  e008              B        |L1.1152|
                  |L1.1134|
;;;587        }
;;;588        else
;;;589        {
;;;590          FSMC_Bank3->PCR3 &= PCR_ECCEN_Reset;
00046e  4a66              LDR      r2,|L1.1544|
000470  6812              LDR      r2,[r2,#0]
000472  4b64              LDR      r3,|L1.1540|
000474  ea020203          AND      r2,r2,r3
000478  f04f4320          MOV      r3,#0xa0000000
00047c  f8c32080          STR      r2,[r3,#0x80]
                  |L1.1152|
;;;591        }
;;;592      }
;;;593    }
000480  4770              BX       lr
;;;594    
                          ENDP

                  FSMC_GetECC PROC
;;;602      */
;;;603    uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
000482  4601              MOV      r1,r0
;;;604    {
;;;605      uint32_t eccval = 0x00000000;
000484  2000              MOVS     r0,#0
;;;606      
;;;607      if(FSMC_Bank == FSMC_Bank2_NAND)
000486  2910              CMP      r1,#0x10
000488  d103              BNE      |L1.1170|
;;;608      {
;;;609        /* Get the ECCR2 register value */
;;;610        eccval = FSMC_Bank2->ECCR2;
00048a  f04f4220          MOV      r2,#0xa0000000
00048e  6f50              LDR      r0,[r2,#0x74]
000490  e001              B        |L1.1174|
                  |L1.1170|
;;;611      }
;;;612      else
;;;613      {
;;;614        /* Get the ECCR3 register value */
;;;615        eccval = FSMC_Bank3->ECCR3;
000492  4a5e              LDR      r2,|L1.1548|
000494  6810              LDR      r0,[r2,#0]
                  |L1.1174|
;;;616      }
;;;617      /* Return the error correction code value */
;;;618      return(eccval);
;;;619    }
000496  4770              BX       lr
;;;620    
                          ENDP

                  FSMC_ITConfig PROC
;;;636      */
;;;637    void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
000498  b510              PUSH     {r4,lr}
;;;638    {
;;;639      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;640      assert_param(IS_FSMC_IT(FSMC_IT));	
;;;641      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;642      
;;;643      if (NewState != DISABLE)
00049a  b1f2              CBZ      r2,|L1.1242|
;;;644      {
;;;645        /* Enable the selected FSMC_Bank2 interrupts */
;;;646        if(FSMC_Bank == FSMC_Bank2_NAND)
00049c  2810              CMP      r0,#0x10
00049e  d107              BNE      |L1.1200|
;;;647        {
;;;648          FSMC_Bank2->SR2 |= FSMC_IT;
0004a0  f04f4320          MOV      r3,#0xa0000000
0004a4  6e5b              LDR      r3,[r3,#0x64]
0004a6  430b              ORRS     r3,r3,r1
0004a8  f04f4420          MOV      r4,#0xa0000000
0004ac  6663              STR      r3,[r4,#0x64]
0004ae  e032              B        |L1.1302|
                  |L1.1200|
;;;649        }
;;;650        /* Enable the selected FSMC_Bank3 interrupts */
;;;651        else if (FSMC_Bank == FSMC_Bank3_NAND)
0004b0  f5b07f80          CMP      r0,#0x100
0004b4  d108              BNE      |L1.1224|
;;;652        {
;;;653          FSMC_Bank3->SR3 |= FSMC_IT;
0004b6  4b56              LDR      r3,|L1.1552|
0004b8  681b              LDR      r3,[r3,#0]
0004ba  ea430301          ORR      r3,r3,r1
0004be  f04f4420          MOV      r4,#0xa0000000
0004c2  f8c43084          STR      r3,[r4,#0x84]
0004c6  e026              B        |L1.1302|
                  |L1.1224|
;;;654        }
;;;655        /* Enable the selected FSMC_Bank4 interrupts */
;;;656        else
;;;657        {
;;;658          FSMC_Bank4->SR4 |= FSMC_IT;    
0004c8  4b52              LDR      r3,|L1.1556|
0004ca  681b              LDR      r3,[r3,#0]
0004cc  ea430301          ORR      r3,r3,r1
0004d0  f04f4420          MOV      r4,#0xa0000000
0004d4  f8c430a4          STR      r3,[r4,#0xa4]
0004d8  e01d              B        |L1.1302|
                  |L1.1242|
;;;659        }
;;;660      }
;;;661      else
;;;662      {
;;;663        /* Disable the selected FSMC_Bank2 interrupts */
;;;664        if(FSMC_Bank == FSMC_Bank2_NAND)
0004da  2810              CMP      r0,#0x10
0004dc  d107              BNE      |L1.1262|
;;;665        {
;;;666          
;;;667          FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
0004de  f04f4320          MOV      r3,#0xa0000000
0004e2  6e5b              LDR      r3,[r3,#0x64]
0004e4  438b              BICS     r3,r3,r1
0004e6  f04f4420          MOV      r4,#0xa0000000
0004ea  6663              STR      r3,[r4,#0x64]
0004ec  e013              B        |L1.1302|
                  |L1.1262|
;;;668        }
;;;669        /* Disable the selected FSMC_Bank3 interrupts */
;;;670        else if (FSMC_Bank == FSMC_Bank3_NAND)
0004ee  f5b07f80          CMP      r0,#0x100
0004f2  d108              BNE      |L1.1286|
;;;671        {
;;;672          FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
0004f4  4b46              LDR      r3,|L1.1552|
0004f6  681b              LDR      r3,[r3,#0]
0004f8  ea230301          BIC      r3,r3,r1
0004fc  f04f4420          MOV      r4,#0xa0000000
000500  f8c43084          STR      r3,[r4,#0x84]
000504  e007              B        |L1.1302|
                  |L1.1286|
;;;673        }
;;;674        /* Disable the selected FSMC_Bank4 interrupts */
;;;675        else
;;;676        {
;;;677          FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
000506  4b43              LDR      r3,|L1.1556|
000508  681b              LDR      r3,[r3,#0]
00050a  ea230301          BIC      r3,r3,r1
00050e  f04f4420          MOV      r4,#0xa0000000
000512  f8c430a4          STR      r3,[r4,#0xa4]
                  |L1.1302|
;;;678        }
;;;679      }
;;;680    }
000516  bd10              POP      {r4,pc}
;;;681    
                          ENDP

                  FSMC_GetFlagStatus PROC
;;;696      */
;;;697    FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000518  b510              PUSH     {r4,lr}
;;;698    {
00051a  4602              MOV      r2,r0
;;;699      FlagStatus bitstatus = RESET;
00051c  2000              MOVS     r0,#0
;;;700      uint32_t tmpsr = 0x00000000;
00051e  2300              MOVS     r3,#0
;;;701      
;;;702      /* Check the parameters */
;;;703      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;704      assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
;;;705      
;;;706      if(FSMC_Bank == FSMC_Bank2_NAND)
000520  2a10              CMP      r2,#0x10
000522  d103              BNE      |L1.1324|
;;;707      {
;;;708        tmpsr = FSMC_Bank2->SR2;
000524  f04f4420          MOV      r4,#0xa0000000
000528  6e63              LDR      r3,[r4,#0x64]
00052a  e007              B        |L1.1340|
                  |L1.1324|
;;;709      }  
;;;710      else if(FSMC_Bank == FSMC_Bank3_NAND)
00052c  f5b27f80          CMP      r2,#0x100
000530  d102              BNE      |L1.1336|
;;;711      {
;;;712        tmpsr = FSMC_Bank3->SR3;
000532  4c37              LDR      r4,|L1.1552|
000534  6823              LDR      r3,[r4,#0]
000536  e001              B        |L1.1340|
                  |L1.1336|
;;;713      }
;;;714      /* FSMC_Bank4_PCCARD*/
;;;715      else
;;;716      {
;;;717        tmpsr = FSMC_Bank4->SR4;
000538  4c36              LDR      r4,|L1.1556|
00053a  6823              LDR      r3,[r4,#0]
                  |L1.1340|
;;;718      } 
;;;719      
;;;720      /* Get the flag status */
;;;721      if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
00053c  420b              TST      r3,r1
00053e  d001              BEQ      |L1.1348|
;;;722      {
;;;723        bitstatus = SET;
000540  2001              MOVS     r0,#1
000542  e000              B        |L1.1350|
                  |L1.1348|
;;;724      }
;;;725      else
;;;726      {
;;;727        bitstatus = RESET;
000544  2000              MOVS     r0,#0
                  |L1.1350|
;;;728      }
;;;729      /* Return the flag status */
;;;730      return bitstatus;
;;;731    }
000546  bd10              POP      {r4,pc}
;;;732    
                          ENDP

                  FSMC_ClearFlag PROC
;;;746      */
;;;747    void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000548  2810              CMP      r0,#0x10
;;;748    {
;;;749     /* Check the parameters */
;;;750      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;751      assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
;;;752        
;;;753      if(FSMC_Bank == FSMC_Bank2_NAND)
00054a  d107              BNE      |L1.1372|
;;;754      {
;;;755        FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
00054c  f04f4220          MOV      r2,#0xa0000000
000550  6e52              LDR      r2,[r2,#0x64]
000552  438a              BICS     r2,r2,r1
000554  f04f4320          MOV      r3,#0xa0000000
000558  665a              STR      r2,[r3,#0x64]
00055a  e013              B        |L1.1412|
                  |L1.1372|
;;;756      }  
;;;757      else if(FSMC_Bank == FSMC_Bank3_NAND)
00055c  f5b07f80          CMP      r0,#0x100
000560  d108              BNE      |L1.1396|
;;;758      {
;;;759        FSMC_Bank3->SR3 &= ~FSMC_FLAG;
000562  4a2b              LDR      r2,|L1.1552|
000564  6812              LDR      r2,[r2,#0]
000566  ea220201          BIC      r2,r2,r1
00056a  f04f4320          MOV      r3,#0xa0000000
00056e  f8c32084          STR      r2,[r3,#0x84]
000572  e007              B        |L1.1412|
                  |L1.1396|
;;;760      }
;;;761      /* FSMC_Bank4_PCCARD*/
;;;762      else
;;;763      {
;;;764        FSMC_Bank4->SR4 &= ~FSMC_FLAG;
000574  4a27              LDR      r2,|L1.1556|
000576  6812              LDR      r2,[r2,#0]
000578  ea220201          BIC      r2,r2,r1
00057c  f04f4320          MOV      r3,#0xa0000000
000580  f8c320a4          STR      r2,[r3,#0xa4]
                  |L1.1412|
;;;765      }
;;;766    }
000584  4770              BX       lr
;;;767    
                          ENDP

                  FSMC_GetITStatus PROC
;;;781      */
;;;782    ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
000586  b570              PUSH     {r4-r6,lr}
;;;783    {
000588  4602              MOV      r2,r0
;;;784      ITStatus bitstatus = RESET;
00058a  2000              MOVS     r0,#0
;;;785      uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
00058c  2300              MOVS     r3,#0
00058e  2400              MOVS     r4,#0
000590  2500              MOVS     r5,#0
;;;786      
;;;787      /* Check the parameters */
;;;788      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;789      assert_param(IS_FSMC_GET_IT(FSMC_IT));
;;;790      
;;;791      if(FSMC_Bank == FSMC_Bank2_NAND)
000592  2a10              CMP      r2,#0x10
000594  d103              BNE      |L1.1438|
;;;792      {
;;;793        tmpsr = FSMC_Bank2->SR2;
000596  f04f4620          MOV      r6,#0xa0000000
00059a  6e73              LDR      r3,[r6,#0x64]
00059c  e007              B        |L1.1454|
                  |L1.1438|
;;;794      }  
;;;795      else if(FSMC_Bank == FSMC_Bank3_NAND)
00059e  f5b27f80          CMP      r2,#0x100
0005a2  d102              BNE      |L1.1450|
;;;796      {
;;;797        tmpsr = FSMC_Bank3->SR3;
0005a4  4e1a              LDR      r6,|L1.1552|
0005a6  6833              LDR      r3,[r6,#0]
0005a8  e001              B        |L1.1454|
                  |L1.1450|
;;;798      }
;;;799      /* FSMC_Bank4_PCCARD*/
;;;800      else
;;;801      {
;;;802        tmpsr = FSMC_Bank4->SR4;
0005aa  4e1a              LDR      r6,|L1.1556|
0005ac  6833              LDR      r3,[r6,#0]
                  |L1.1454|
;;;803      } 
;;;804      
;;;805      itstatus = tmpsr & FSMC_IT;
0005ae  ea030401          AND      r4,r3,r1
;;;806      
;;;807      itenable = tmpsr & (FSMC_IT >> 3);
0005b2  ea0305d1          AND      r5,r3,r1,LSR #3
;;;808      if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
0005b6  b114              CBZ      r4,|L1.1470|
0005b8  b10d              CBZ      r5,|L1.1470|
;;;809      {
;;;810        bitstatus = SET;
0005ba  2001              MOVS     r0,#1
0005bc  e000              B        |L1.1472|
                  |L1.1470|
;;;811      }
;;;812      else
;;;813      {
;;;814        bitstatus = RESET;
0005be  2000              MOVS     r0,#0
                  |L1.1472|
;;;815      }
;;;816      return bitstatus; 
;;;817    }
0005c0  bd70              POP      {r4-r6,pc}
;;;818    
                          ENDP

                  FSMC_ClearITPendingBit PROC
;;;832      */
;;;833    void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
0005c2  2810              CMP      r0,#0x10
;;;834    {
;;;835      /* Check the parameters */
;;;836      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;837      assert_param(IS_FSMC_IT(FSMC_IT));
;;;838        
;;;839      if(FSMC_Bank == FSMC_Bank2_NAND)
0005c4  d108              BNE      |L1.1496|
;;;840      {
;;;841        FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
0005c6  f04f4220          MOV      r2,#0xa0000000
0005ca  6e52              LDR      r2,[r2,#0x64]
0005cc  ea2202d1          BIC      r2,r2,r1,LSR #3
0005d0  f04f4320          MOV      r3,#0xa0000000
0005d4  665a              STR      r2,[r3,#0x64]
0005d6  e013              B        |L1.1536|
                  |L1.1496|
;;;842      }  
;;;843      else if(FSMC_Bank == FSMC_Bank3_NAND)
0005d8  f5b07f80          CMP      r0,#0x100
0005dc  d108              BNE      |L1.1520|
;;;844      {
;;;845        FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
0005de  4a0c              LDR      r2,|L1.1552|
0005e0  6812              LDR      r2,[r2,#0]
0005e2  ea2202d1          BIC      r2,r2,r1,LSR #3
0005e6  f04f4320          MOV      r3,#0xa0000000
0005ea  f8c32084          STR      r2,[r3,#0x84]
0005ee  e007              B        |L1.1536|
                  |L1.1520|
;;;846      }
;;;847      /* FSMC_Bank4_PCCARD*/
;;;848      else
;;;849      {
;;;850        FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
0005f0  4a08              LDR      r2,|L1.1556|
0005f2  6812              LDR      r2,[r2,#0]
0005f4  ea2202d1          BIC      r2,r2,r1,LSR #3
0005f8  f04f4320          MOV      r3,#0xa0000000
0005fc  f8c320a4          STR      r2,[r3,#0xa4]
                  |L1.1536|
;;;851      }
;;;852    }
000600  4770              BX       lr
;;;853    
                          ENDP

000602  0000              DCW      0x0000
                  |L1.1540|
                          DCD      0x000fffbf
                  |L1.1544|
                          DCD      0xa0000080
                  |L1.1548|
                          DCD      0xa0000094
                  |L1.1552|
                          DCD      0xa0000084
                  |L1.1556|
                          DCD      0xa00000a4
