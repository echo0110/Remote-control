; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Output\stm32f10x_iwdg.o --depend=.\Output\stm32f10x_iwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Output\stm32f10x_iwdg.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_iwdg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  IWDG_WriteAccessCmd PROC
;;;91       */
;;;92     void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
000000  490e              LDR      r1,|L1.60|
;;;93     {
;;;94       /* Check the parameters */
;;;95       assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
;;;96       IWDG->KR = IWDG_WriteAccess;
000002  6008              STR      r0,[r1,#0]
;;;97     }
000004  4770              BX       lr
;;;98     
                          ENDP

                  IWDG_SetPrescaler PROC
;;;111      */
;;;112    void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
000006  490d              LDR      r1,|L1.60|
;;;113    {
;;;114      /* Check the parameters */
;;;115      assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
;;;116      IWDG->PR = IWDG_Prescaler;
000008  6048              STR      r0,[r1,#4]
;;;117    }
00000a  4770              BX       lr
;;;118    
                          ENDP

                  IWDG_SetReload PROC
;;;124      */
;;;125    void IWDG_SetReload(uint16_t Reload)
00000c  490b              LDR      r1,|L1.60|
;;;126    {
;;;127      /* Check the parameters */
;;;128      assert_param(IS_IWDG_RELOAD(Reload));
;;;129      IWDG->RLR = Reload;
00000e  6088              STR      r0,[r1,#8]
;;;130    }
000010  4770              BX       lr
;;;131    
                          ENDP

                  IWDG_ReloadCounter PROC
;;;137      */
;;;138    void IWDG_ReloadCounter(void)
000012  f64a20aa          MOV      r0,#0xaaaa
;;;139    {
;;;140      IWDG->KR = KR_KEY_Reload;
000016  4909              LDR      r1,|L1.60|
000018  6008              STR      r0,[r1,#0]
;;;141    }
00001a  4770              BX       lr
;;;142    
                          ENDP

                  IWDG_Enable PROC
;;;147      */
;;;148    void IWDG_Enable(void)
00001c  f64c40cc          MOV      r0,#0xcccc
;;;149    {
;;;150      IWDG->KR = KR_KEY_Enable;
000020  4906              LDR      r1,|L1.60|
000022  6008              STR      r0,[r1,#0]
;;;151    }
000024  4770              BX       lr
;;;152    
                          ENDP

                  IWDG_GetFlagStatus PROC
;;;160      */
;;;161    FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
000026  4601              MOV      r1,r0
;;;162    {
;;;163      FlagStatus bitstatus = RESET;
000028  2000              MOVS     r0,#0
;;;164      /* Check the parameters */
;;;165      assert_param(IS_IWDG_FLAG(IWDG_FLAG));
;;;166      if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
00002a  4a04              LDR      r2,|L1.60|
00002c  68d2              LDR      r2,[r2,#0xc]
00002e  420a              TST      r2,r1
000030  d001              BEQ      |L1.54|
;;;167      {
;;;168        bitstatus = SET;
000032  2001              MOVS     r0,#1
000034  e000              B        |L1.56|
                  |L1.54|
;;;169      }
;;;170      else
;;;171      {
;;;172        bitstatus = RESET;
000036  2000              MOVS     r0,#0
                  |L1.56|
;;;173      }
;;;174      /* Return the flag status */
;;;175      return bitstatus;
;;;176    }
000038  4770              BX       lr
;;;177    
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0x40003000
