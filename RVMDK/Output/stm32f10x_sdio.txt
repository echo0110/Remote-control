; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Output\stm32f10x_sdio.o --depend=.\Output\stm32f10x_sdio.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Output\stm32f10x_sdio.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_sdio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SDIO_DeInit PROC
;;;160      */
;;;161    void SDIO_DeInit(void)
000000  2000              MOVS     r0,#0
;;;162    {
;;;163      SDIO->POWER = 0x00000000;
000002  4968              LDR      r1,|L1.420|
000004  6008              STR      r0,[r1,#0]
;;;164      SDIO->CLKCR = 0x00000000;
000006  6048              STR      r0,[r1,#4]
;;;165      SDIO->ARG = 0x00000000;
000008  6088              STR      r0,[r1,#8]
;;;166      SDIO->CMD = 0x00000000;
00000a  60c8              STR      r0,[r1,#0xc]
;;;167      SDIO->DTIMER = 0x00000000;
00000c  6248              STR      r0,[r1,#0x24]
;;;168      SDIO->DLEN = 0x00000000;
00000e  6288              STR      r0,[r1,#0x28]
;;;169      SDIO->DCTRL = 0x00000000;
000010  62c8              STR      r0,[r1,#0x2c]
;;;170      SDIO->ICR = 0x00C007FF;
000012  4865              LDR      r0,|L1.424|
000014  6388              STR      r0,[r1,#0x38]
;;;171      SDIO->MASK = 0x00000000;
000016  2000              MOVS     r0,#0
000018  63c8              STR      r0,[r1,#0x3c]
;;;172    }
00001a  4770              BX       lr
;;;173    
                          ENDP

                  SDIO_Init PROC
;;;180      */
;;;181    void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
00001c  2100              MOVS     r1,#0
;;;182    {
;;;183      uint32_t tmpreg = 0;
;;;184        
;;;185      /* Check the parameters */
;;;186      assert_param(IS_SDIO_CLOCK_EDGE(SDIO_InitStruct->SDIO_ClockEdge));
;;;187      assert_param(IS_SDIO_CLOCK_BYPASS(SDIO_InitStruct->SDIO_ClockBypass));
;;;188      assert_param(IS_SDIO_CLOCK_POWER_SAVE(SDIO_InitStruct->SDIO_ClockPowerSave));
;;;189      assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
;;;190      assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
;;;191       
;;;192    /*---------------------------- SDIO CLKCR Configuration ------------------------*/  
;;;193      /* Get the SDIO CLKCR value */
;;;194      tmpreg = SDIO->CLKCR;
00001e  4a61              LDR      r2,|L1.420|
000020  6851              LDR      r1,[r2,#4]
;;;195      
;;;196      /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
;;;197      tmpreg &= CLKCR_CLEAR_MASK;
000022  f64762ff          MOV      r2,#0x7eff
000026  4391              BICS     r1,r1,r2
;;;198      
;;;199      /* Set CLKDIV bits according to SDIO_ClockDiv value */
;;;200      /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
;;;201      /* Set BYPASS bit according to SDIO_ClockBypass value */
;;;202      /* Set WIDBUS bits according to SDIO_BusWide value */
;;;203      /* Set NEGEDGE bits according to SDIO_ClockEdge value */
;;;204      /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
;;;205      tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
000028  7d02              LDRB     r2,[r0,#0x14]
00002a  6883              LDR      r3,[r0,#8]
00002c  431a              ORRS     r2,r2,r3
00002e  6843              LDR      r3,[r0,#4]
000030  431a              ORRS     r2,r2,r3
000032  68c3              LDR      r3,[r0,#0xc]
000034  431a              ORRS     r2,r2,r3
000036  6803              LDR      r3,[r0,#0]
000038  431a              ORRS     r2,r2,r3
00003a  6903              LDR      r3,[r0,#0x10]
00003c  431a              ORRS     r2,r2,r3
00003e  4311              ORRS     r1,r1,r2
;;;206                 SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
;;;207                 SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
;;;208      
;;;209      /* Write to SDIO CLKCR */
;;;210      SDIO->CLKCR = tmpreg;
000040  4a58              LDR      r2,|L1.420|
000042  6051              STR      r1,[r2,#4]
;;;211    }
000044  4770              BX       lr
;;;212    
                          ENDP

                  SDIO_StructInit PROC
;;;218      */
;;;219    void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
000046  2100              MOVS     r1,#0
;;;220    {
;;;221      /* SDIO_InitStruct members default value */
;;;222      SDIO_InitStruct->SDIO_ClockDiv = 0x00;
000048  7501              STRB     r1,[r0,#0x14]
;;;223      SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
00004a  6001              STR      r1,[r0,#0]
;;;224      SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
00004c  6041              STR      r1,[r0,#4]
;;;225      SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
00004e  6081              STR      r1,[r0,#8]
;;;226      SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
000050  60c1              STR      r1,[r0,#0xc]
;;;227      SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
000052  6101              STR      r1,[r0,#0x10]
;;;228    }
000054  4770              BX       lr
;;;229    
                          ENDP

                  SDIO_ClockCmd PROC
;;;234      */
;;;235    void SDIO_ClockCmd(FunctionalState NewState)
000056  4955              LDR      r1,|L1.428|
;;;236    {
;;;237      /* Check the parameters */
;;;238      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;239      
;;;240      *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
000058  6008              STR      r0,[r1,#0]
;;;241    }
00005a  4770              BX       lr
;;;242    
                          ENDP

                  SDIO_SetPowerState PROC
;;;250      */
;;;251    void SDIO_SetPowerState(uint32_t SDIO_PowerState)
00005c  4951              LDR      r1,|L1.420|
;;;252    {
;;;253      /* Check the parameters */
;;;254      assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
;;;255      
;;;256      SDIO->POWER &= PWR_PWRCTRL_MASK;
00005e  6809              LDR      r1,[r1,#0]
000060  f0210103          BIC      r1,r1,#3
000064  4a4f              LDR      r2,|L1.420|
000066  6011              STR      r1,[r2,#0]
;;;257      SDIO->POWER |= SDIO_PowerState;
000068  4611              MOV      r1,r2
00006a  6809              LDR      r1,[r1,#0]
00006c  4301              ORRS     r1,r1,r0
00006e  6011              STR      r1,[r2,#0]
;;;258    }
000070  4770              BX       lr
;;;259    
                          ENDP

                  SDIO_GetPowerState PROC
;;;268      */
;;;269    uint32_t SDIO_GetPowerState(void)
000072  484c              LDR      r0,|L1.420|
;;;270    {
;;;271      return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
000074  6800              LDR      r0,[r0,#0]
000076  f0000003          AND      r0,r0,#3
;;;272    }
00007a  4770              BX       lr
;;;273    
                          ENDP

                  SDIO_ITConfig PROC
;;;306      */
;;;307    void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
00007c  b129              CBZ      r1,|L1.138|
;;;308    {
;;;309      /* Check the parameters */
;;;310      assert_param(IS_SDIO_IT(SDIO_IT));
;;;311      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;312      
;;;313      if (NewState != DISABLE)
;;;314      {
;;;315        /* Enable the SDIO interrupts */
;;;316        SDIO->MASK |= SDIO_IT;
00007e  4a49              LDR      r2,|L1.420|
000080  6bd2              LDR      r2,[r2,#0x3c]
000082  4302              ORRS     r2,r2,r0
000084  4b47              LDR      r3,|L1.420|
000086  63da              STR      r2,[r3,#0x3c]
000088  e004              B        |L1.148|
                  |L1.138|
;;;317      }
;;;318      else
;;;319      {
;;;320        /* Disable the SDIO interrupts */
;;;321        SDIO->MASK &= ~SDIO_IT;
00008a  4a46              LDR      r2,|L1.420|
00008c  6bd2              LDR      r2,[r2,#0x3c]
00008e  4382              BICS     r2,r2,r0
000090  4b44              LDR      r3,|L1.420|
000092  63da              STR      r2,[r3,#0x3c]
                  |L1.148|
;;;322      } 
;;;323    }
000094  4770              BX       lr
;;;324    
                          ENDP

                  SDIO_DMACmd PROC
;;;330      */
;;;331    void SDIO_DMACmd(FunctionalState NewState)
000096  4946              LDR      r1,|L1.432|
;;;332    {
;;;333      /* Check the parameters */
;;;334      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;335      
;;;336      *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
000098  6008              STR      r0,[r1,#0]
;;;337    }
00009a  4770              BX       lr
;;;338    
                          ENDP

                  SDIO_SendCommand PROC
;;;345      */
;;;346    void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
00009c  2100              MOVS     r1,#0
;;;347    {
;;;348      uint32_t tmpreg = 0;
;;;349      
;;;350      /* Check the parameters */
;;;351      assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->SDIO_CmdIndex));
;;;352      assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->SDIO_Response));
;;;353      assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
;;;354      assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
;;;355      
;;;356    /*---------------------------- SDIO ARG Configuration ------------------------*/
;;;357      /* Set the SDIO Argument value */
;;;358      SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
00009e  4b41              LDR      r3,|L1.420|
0000a0  6802              LDR      r2,[r0,#0]
0000a2  609a              STR      r2,[r3,#8]
;;;359      
;;;360    /*---------------------------- SDIO CMD Configuration ------------------------*/  
;;;361      /* Get the SDIO CMD value */
;;;362      tmpreg = SDIO->CMD;
0000a4  461a              MOV      r2,r3
0000a6  68d1              LDR      r1,[r2,#0xc]
;;;363      /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
;;;364      tmpreg &= CMD_CLEAR_MASK;
0000a8  f36f010a          BFC      r1,#0,#11
;;;365      /* Set CMDINDEX bits according to SDIO_CmdIndex value */
;;;366      /* Set WAITRESP bits according to SDIO_Response value */
;;;367      /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
;;;368      /* Set CPSMEN bits according to SDIO_CPSM value */
;;;369      tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
0000ac  e9d02301          LDRD     r2,r3,[r0,#4]
0000b0  431a              ORRS     r2,r2,r3
0000b2  68c3              LDR      r3,[r0,#0xc]
0000b4  431a              ORRS     r2,r2,r3
0000b6  6903              LDR      r3,[r0,#0x10]
0000b8  431a              ORRS     r2,r2,r3
0000ba  4311              ORRS     r1,r1,r2
;;;370               | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
;;;371      
;;;372      /* Write to SDIO CMD */
;;;373      SDIO->CMD = tmpreg;
0000bc  4a39              LDR      r2,|L1.420|
0000be  60d1              STR      r1,[r2,#0xc]
;;;374    }
0000c0  4770              BX       lr
;;;375    
                          ENDP

                  SDIO_CmdStructInit PROC
;;;381      */
;;;382    void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
0000c2  2100              MOVS     r1,#0
;;;383    {
;;;384      /* SDIO_CmdInitStruct members default value */
;;;385      SDIO_CmdInitStruct->SDIO_Argument = 0x00;
0000c4  6001              STR      r1,[r0,#0]
;;;386      SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
0000c6  6041              STR      r1,[r0,#4]
;;;387      SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
0000c8  6081              STR      r1,[r0,#8]
;;;388      SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
0000ca  60c1              STR      r1,[r0,#0xc]
;;;389      SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
0000cc  6101              STR      r1,[r0,#0x10]
;;;390    }
0000ce  4770              BX       lr
;;;391    
                          ENDP

                  SDIO_GetCommandResponse PROC
;;;396      */
;;;397    uint8_t SDIO_GetCommandResponse(void)
0000d0  4834              LDR      r0,|L1.420|
;;;398    {
;;;399      return (uint8_t)(SDIO->RESPCMD);
0000d2  6900              LDR      r0,[r0,#0x10]
0000d4  b2c0              UXTB     r0,r0
;;;400    }
0000d6  4770              BX       lr
;;;401    
                          ENDP

                  SDIO_GetResponse PROC
;;;411      */
;;;412    uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
0000d8  4601              MOV      r1,r0
;;;413    {
;;;414      __IO uint32_t tmp = 0;
0000da  2200              MOVS     r2,#0
;;;415    
;;;416      /* Check the parameters */
;;;417      assert_param(IS_SDIO_RESP(SDIO_RESP));
;;;418    
;;;419      tmp = SDIO_RESP_ADDR + SDIO_RESP;
0000dc  4831              LDR      r0,|L1.420|
0000de  3014              ADDS     r0,r0,#0x14
0000e0  180a              ADDS     r2,r1,r0
;;;420      
;;;421      return (*(__IO uint32_t *) tmp); 
0000e2  6810              LDR      r0,[r2,#0]
;;;422    }
0000e4  4770              BX       lr
;;;423    
                          ENDP

                  SDIO_DataConfig PROC
;;;430      */
;;;431    void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
0000e6  2100              MOVS     r1,#0
;;;432    {
;;;433      uint32_t tmpreg = 0;
;;;434      
;;;435      /* Check the parameters */
;;;436      assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->SDIO_DataLength));
;;;437      assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->SDIO_DataBlockSize));
;;;438      assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->SDIO_TransferDir));
;;;439      assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
;;;440      assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));
;;;441    
;;;442    /*---------------------------- SDIO DTIMER Configuration ---------------------*/
;;;443      /* Set the SDIO Data TimeOut value */
;;;444      SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
0000e8  4b2e              LDR      r3,|L1.420|
0000ea  6802              LDR      r2,[r0,#0]
0000ec  625a              STR      r2,[r3,#0x24]
;;;445    
;;;446    /*---------------------------- SDIO DLEN Configuration -----------------------*/
;;;447      /* Set the SDIO DataLength value */
;;;448      SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
0000ee  6842              LDR      r2,[r0,#4]
0000f0  629a              STR      r2,[r3,#0x28]
;;;449    
;;;450    /*---------------------------- SDIO DCTRL Configuration ----------------------*/  
;;;451      /* Get the SDIO DCTRL value */
;;;452      tmpreg = SDIO->DCTRL;
0000f2  461a              MOV      r2,r3
0000f4  6ad1              LDR      r1,[r2,#0x2c]
;;;453      /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
;;;454      tmpreg &= DCTRL_CLEAR_MASK;
0000f6  f02101f7          BIC      r1,r1,#0xf7
;;;455      /* Set DEN bit according to SDIO_DPSM value */
;;;456      /* Set DTMODE bit according to SDIO_TransferMode value */
;;;457      /* Set DTDIR bit according to SDIO_TransferDir value */
;;;458      /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
;;;459      tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
0000fa  e9d02302          LDRD     r2,r3,[r0,#8]
0000fe  431a              ORRS     r2,r2,r3
000100  6903              LDR      r3,[r0,#0x10]
000102  431a              ORRS     r2,r2,r3
000104  6943              LDR      r3,[r0,#0x14]
000106  431a              ORRS     r2,r2,r3
000108  4311              ORRS     r1,r1,r2
;;;460               | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
;;;461    
;;;462      /* Write to SDIO DCTRL */
;;;463      SDIO->DCTRL = tmpreg;
00010a  4a26              LDR      r2,|L1.420|
00010c  62d1              STR      r1,[r2,#0x2c]
;;;464    }
00010e  4770              BX       lr
;;;465    
                          ENDP

                  SDIO_DataStructInit PROC
;;;471      */
;;;472    void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000110  f04f31ff          MOV      r1,#0xffffffff
;;;473    {
;;;474      /* SDIO_DataInitStruct members default value */
;;;475      SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
000114  6001              STR      r1,[r0,#0]
;;;476      SDIO_DataInitStruct->SDIO_DataLength = 0x00;
000116  2100              MOVS     r1,#0
000118  6041              STR      r1,[r0,#4]
;;;477      SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
00011a  6081              STR      r1,[r0,#8]
;;;478      SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
00011c  60c1              STR      r1,[r0,#0xc]
;;;479      SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
00011e  6101              STR      r1,[r0,#0x10]
;;;480      SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
000120  6141              STR      r1,[r0,#0x14]
;;;481    }
000122  4770              BX       lr
;;;482    
                          ENDP

                  SDIO_GetDataCounter PROC
;;;487      */
;;;488    uint32_t SDIO_GetDataCounter(void)
000124  481f              LDR      r0,|L1.420|
;;;489    { 
;;;490      return SDIO->DCOUNT;
000126  6b00              LDR      r0,[r0,#0x30]
;;;491    }
000128  4770              BX       lr
;;;492    
                          ENDP

                  SDIO_ReadData PROC
;;;497      */
;;;498    uint32_t SDIO_ReadData(void)
00012a  4822              LDR      r0,|L1.436|
;;;499    { 
;;;500      return SDIO->FIFO;
00012c  6800              LDR      r0,[r0,#0]
;;;501    }
00012e  4770              BX       lr
;;;502    
                          ENDP

                  SDIO_WriteData PROC
;;;507      */
;;;508    void SDIO_WriteData(uint32_t Data)
000130  4920              LDR      r1,|L1.436|
;;;509    { 
;;;510      SDIO->FIFO = Data;
000132  6008              STR      r0,[r1,#0]
;;;511    }
000134  4770              BX       lr
;;;512    
                          ENDP

                  SDIO_GetFIFOCount PROC
;;;517      */
;;;518    uint32_t SDIO_GetFIFOCount(void)
000136  481b              LDR      r0,|L1.420|
;;;519    { 
;;;520      return SDIO->FIFOCNT;
000138  6c80              LDR      r0,[r0,#0x48]
;;;521    }
00013a  4770              BX       lr
;;;522    
                          ENDP

                  SDIO_StartSDIOReadWait PROC
;;;528      */
;;;529    void SDIO_StartSDIOReadWait(FunctionalState NewState)
00013c  491e              LDR      r1,|L1.440|
;;;530    { 
;;;531      /* Check the parameters */
;;;532      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;533      
;;;534      *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
00013e  6008              STR      r0,[r1,#0]
;;;535    }
000140  4770              BX       lr
;;;536    
                          ENDP

                  SDIO_StopSDIOReadWait PROC
;;;542      */
;;;543    void SDIO_StopSDIOReadWait(FunctionalState NewState)
000142  491e              LDR      r1,|L1.444|
;;;544    { 
;;;545      /* Check the parameters */
;;;546      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;547      
;;;548      *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
000144  6008              STR      r0,[r1,#0]
;;;549    }
000146  4770              BX       lr
;;;550    
                          ENDP

                  SDIO_SetSDIOReadWaitMode PROC
;;;558      */
;;;559    void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
000148  491d              LDR      r1,|L1.448|
;;;560    {
;;;561      /* Check the parameters */
;;;562      assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
;;;563      
;;;564      *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
00014a  6008              STR      r0,[r1,#0]
;;;565    }
00014c  4770              BX       lr
;;;566    
                          ENDP

                  SDIO_SetSDIOOperation PROC
;;;572      */
;;;573    void SDIO_SetSDIOOperation(FunctionalState NewState)
00014e  491d              LDR      r1,|L1.452|
;;;574    { 
;;;575      /* Check the parameters */
;;;576      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;577      
;;;578      *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
000150  6008              STR      r0,[r1,#0]
;;;579    }
000152  4770              BX       lr
;;;580    
                          ENDP

                  SDIO_SendSDIOSuspendCmd PROC
;;;586      */
;;;587    void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
000154  491c              LDR      r1,|L1.456|
;;;588    { 
;;;589      /* Check the parameters */
;;;590      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;591      
;;;592      *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
000156  6008              STR      r0,[r1,#0]
;;;593    }
000158  4770              BX       lr
;;;594    
                          ENDP

                  SDIO_CommandCompletionCmd PROC
;;;600      */
;;;601    void SDIO_CommandCompletionCmd(FunctionalState NewState)
00015a  491c              LDR      r1,|L1.460|
;;;602    { 
;;;603      /* Check the parameters */
;;;604      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;605      
;;;606      *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
00015c  6008              STR      r0,[r1,#0]
;;;607    }
00015e  4770              BX       lr
;;;608    
                          ENDP

                  SDIO_CEATAITCmd PROC
;;;613      */
;;;614    void SDIO_CEATAITCmd(FunctionalState NewState)
000160  2101              MOVS     r1,#1
;;;615    { 
;;;616      /* Check the parameters */
;;;617      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;618      
;;;619      *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
000162  4381              BICS     r1,r1,r0
000164  4a1a              LDR      r2,|L1.464|
000166  6011              STR      r1,[r2,#0]
;;;620    }
000168  4770              BX       lr
;;;621    
                          ENDP

                  SDIO_SendCEATACmd PROC
;;;626      */
;;;627    void SDIO_SendCEATACmd(FunctionalState NewState)
00016a  491a              LDR      r1,|L1.468|
;;;628    { 
;;;629      /* Check the parameters */
;;;630      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;631      
;;;632      *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
00016c  6008              STR      r0,[r1,#0]
;;;633    }
00016e  4770              BX       lr
;;;634    
                          ENDP

                  SDIO_GetFlagStatus PROC
;;;665      */
;;;666    FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
000170  4601              MOV      r1,r0
;;;667    { 
;;;668      FlagStatus bitstatus = RESET;
000172  2000              MOVS     r0,#0
;;;669      
;;;670      /* Check the parameters */
;;;671      assert_param(IS_SDIO_FLAG(SDIO_FLAG));
;;;672      
;;;673      if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
000174  4a0b              LDR      r2,|L1.420|
000176  6b52              LDR      r2,[r2,#0x34]
000178  420a              TST      r2,r1
00017a  d001              BEQ      |L1.384|
;;;674      {
;;;675        bitstatus = SET;
00017c  2001              MOVS     r0,#1
00017e  e000              B        |L1.386|
                  |L1.384|
;;;676      }
;;;677      else
;;;678      {
;;;679        bitstatus = RESET;
000180  2000              MOVS     r0,#0
                  |L1.386|
;;;680      }
;;;681      return bitstatus;
;;;682    }
000182  4770              BX       lr
;;;683    
                          ENDP

                  SDIO_ClearFlag PROC
;;;703      */
;;;704    void SDIO_ClearFlag(uint32_t SDIO_FLAG)
000184  4907              LDR      r1,|L1.420|
;;;705    { 
;;;706      /* Check the parameters */
;;;707      assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
;;;708       
;;;709      SDIO->ICR = SDIO_FLAG;
000186  6388              STR      r0,[r1,#0x38]
;;;710    }
000188  4770              BX       lr
;;;711    
                          ENDP

                  SDIO_GetITStatus PROC
;;;742      */
;;;743    ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
00018a  4601              MOV      r1,r0
;;;744    { 
;;;745      ITStatus bitstatus = RESET;
00018c  2000              MOVS     r0,#0
;;;746      
;;;747      /* Check the parameters */
;;;748      assert_param(IS_SDIO_GET_IT(SDIO_IT));
;;;749      if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
00018e  4a05              LDR      r2,|L1.420|
000190  6b52              LDR      r2,[r2,#0x34]
000192  420a              TST      r2,r1
000194  d001              BEQ      |L1.410|
;;;750      {
;;;751        bitstatus = SET;
000196  2001              MOVS     r0,#1
000198  e000              B        |L1.412|
                  |L1.410|
;;;752      }
;;;753      else
;;;754      {
;;;755        bitstatus = RESET;
00019a  2000              MOVS     r0,#0
                  |L1.412|
;;;756      }
;;;757      return bitstatus;
;;;758    }
00019c  4770              BX       lr
;;;759    
                          ENDP

                  SDIO_ClearITPendingBit PROC
;;;778      */
;;;779    void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
00019e  4901              LDR      r1,|L1.420|
;;;780    { 
;;;781      /* Check the parameters */
;;;782      assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
;;;783       
;;;784      SDIO->ICR = SDIO_IT;
0001a0  6388              STR      r0,[r1,#0x38]
;;;785    }
0001a2  4770              BX       lr
;;;786    
                          ENDP

                  |L1.420|
                          DCD      0x40018000
                  |L1.424|
                          DCD      0x00c007ff
                  |L1.428|
                          DCD      0x423000a0
                  |L1.432|
                          DCD      0x4230058c
                  |L1.436|
                          DCD      0x40018080
                  |L1.440|
                          DCD      0x423005a0
                  |L1.444|
                          DCD      0x423005a4
                  |L1.448|
                          DCD      0x423005a8
                  |L1.452|
                          DCD      0x423005ac
                  |L1.456|
                          DCD      0x423001ac
                  |L1.460|
                          DCD      0x423001b0
                  |L1.464|
                          DCD      0x423001b4
                  |L1.468|
                          DCD      0x423001b8
