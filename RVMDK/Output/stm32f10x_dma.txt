; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Output\stm32f10x_dma.o --depend=.\Output\stm32f10x_dma.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Output\stm32f10x_dma.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_dma.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DMA_DeInit PROC
;;;107      */
;;;108    void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
000000  6801              LDR      r1,[r0,#0]
;;;109    {
;;;110      /* Check the parameters */
;;;111      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;112      
;;;113      /* Disable the selected DMAy Channelx */
;;;114      DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
000002  f64f72fe          MOV      r2,#0xfffe
000006  4011              ANDS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;115      
;;;116      /* Reset DMAy Channelx control register */
;;;117      DMAy_Channelx->CCR  = 0;
00000a  2100              MOVS     r1,#0
00000c  6001              STR      r1,[r0,#0]
;;;118      
;;;119      /* Reset DMAy Channelx remaining bytes register */
;;;120      DMAy_Channelx->CNDTR = 0;
00000e  6041              STR      r1,[r0,#4]
;;;121      
;;;122      /* Reset DMAy Channelx peripheral address register */
;;;123      DMAy_Channelx->CPAR  = 0;
000010  6081              STR      r1,[r0,#8]
;;;124      
;;;125      /* Reset DMAy Channelx memory address register */
;;;126      DMAy_Channelx->CMAR = 0;
000012  60c1              STR      r1,[r0,#0xc]
;;;127      
;;;128      if (DMAy_Channelx == DMA1_Channel1)
000014  4987              LDR      r1,|L1.564|
000016  4288              CMP      r0,r1
000018  d108              BNE      |L1.44|
;;;129      {
;;;130        /* Reset interrupt pending bits for DMA1 Channel1 */
;;;131        DMA1->IFCR |= DMA1_Channel1_IT_Mask;
00001a  4986              LDR      r1,|L1.564|
00001c  3908              SUBS     r1,r1,#8
00001e  6849              LDR      r1,[r1,#4]
000020  f041010f          ORR      r1,r1,#0xf
000024  4a83              LDR      r2,|L1.564|
000026  3a08              SUBS     r2,r2,#8
000028  6051              STR      r1,[r2,#4]
00002a  e088              B        |L1.318|
                  |L1.44|
;;;132      }
;;;133      else if (DMAy_Channelx == DMA1_Channel2)
00002c  4981              LDR      r1,|L1.564|
00002e  3114              ADDS     r1,r1,#0x14
000030  4288              CMP      r0,r1
000032  d108              BNE      |L1.70|
;;;134      {
;;;135        /* Reset interrupt pending bits for DMA1 Channel2 */
;;;136        DMA1->IFCR |= DMA1_Channel2_IT_Mask;
000034  497f              LDR      r1,|L1.564|
000036  3908              SUBS     r1,r1,#8
000038  6849              LDR      r1,[r1,#4]
00003a  f04101f0          ORR      r1,r1,#0xf0
00003e  4a7d              LDR      r2,|L1.564|
000040  3a08              SUBS     r2,r2,#8
000042  6051              STR      r1,[r2,#4]
000044  e07b              B        |L1.318|
                  |L1.70|
;;;137      }
;;;138      else if (DMAy_Channelx == DMA1_Channel3)
000046  497b              LDR      r1,|L1.564|
000048  3128              ADDS     r1,r1,#0x28
00004a  4288              CMP      r0,r1
00004c  d108              BNE      |L1.96|
;;;139      {
;;;140        /* Reset interrupt pending bits for DMA1 Channel3 */
;;;141        DMA1->IFCR |= DMA1_Channel3_IT_Mask;
00004e  4979              LDR      r1,|L1.564|
000050  3908              SUBS     r1,r1,#8
000052  6849              LDR      r1,[r1,#4]
000054  f4416170          ORR      r1,r1,#0xf00
000058  4a76              LDR      r2,|L1.564|
00005a  3a08              SUBS     r2,r2,#8
00005c  6051              STR      r1,[r2,#4]
00005e  e06e              B        |L1.318|
                  |L1.96|
;;;142      }
;;;143      else if (DMAy_Channelx == DMA1_Channel4)
000060  4974              LDR      r1,|L1.564|
000062  313c              ADDS     r1,r1,#0x3c
000064  4288              CMP      r0,r1
000066  d108              BNE      |L1.122|
;;;144      {
;;;145        /* Reset interrupt pending bits for DMA1 Channel4 */
;;;146        DMA1->IFCR |= DMA1_Channel4_IT_Mask;
000068  4972              LDR      r1,|L1.564|
00006a  3908              SUBS     r1,r1,#8
00006c  6849              LDR      r1,[r1,#4]
00006e  f4414170          ORR      r1,r1,#0xf000
000072  4a70              LDR      r2,|L1.564|
000074  3a08              SUBS     r2,r2,#8
000076  6051              STR      r1,[r2,#4]
000078  e061              B        |L1.318|
                  |L1.122|
;;;147      }
;;;148      else if (DMAy_Channelx == DMA1_Channel5)
00007a  496e              LDR      r1,|L1.564|
00007c  3150              ADDS     r1,r1,#0x50
00007e  4288              CMP      r0,r1
000080  d108              BNE      |L1.148|
;;;149      {
;;;150        /* Reset interrupt pending bits for DMA1 Channel5 */
;;;151        DMA1->IFCR |= DMA1_Channel5_IT_Mask;
000082  496c              LDR      r1,|L1.564|
000084  3908              SUBS     r1,r1,#8
000086  6849              LDR      r1,[r1,#4]
000088  f4412170          ORR      r1,r1,#0xf0000
00008c  4a69              LDR      r2,|L1.564|
00008e  3a08              SUBS     r2,r2,#8
000090  6051              STR      r1,[r2,#4]
000092  e054              B        |L1.318|
                  |L1.148|
;;;152      }
;;;153      else if (DMAy_Channelx == DMA1_Channel6)
000094  4967              LDR      r1,|L1.564|
000096  3164              ADDS     r1,r1,#0x64
000098  4288              CMP      r0,r1
00009a  d108              BNE      |L1.174|
;;;154      {
;;;155        /* Reset interrupt pending bits for DMA1 Channel6 */
;;;156        DMA1->IFCR |= DMA1_Channel6_IT_Mask;
00009c  4965              LDR      r1,|L1.564|
00009e  3908              SUBS     r1,r1,#8
0000a0  6849              LDR      r1,[r1,#4]
0000a2  f4410170          ORR      r1,r1,#0xf00000
0000a6  4a63              LDR      r2,|L1.564|
0000a8  3a08              SUBS     r2,r2,#8
0000aa  6051              STR      r1,[r2,#4]
0000ac  e047              B        |L1.318|
                  |L1.174|
;;;157      }
;;;158      else if (DMAy_Channelx == DMA1_Channel7)
0000ae  4961              LDR      r1,|L1.564|
0000b0  3178              ADDS     r1,r1,#0x78
0000b2  4288              CMP      r0,r1
0000b4  d108              BNE      |L1.200|
;;;159      {
;;;160        /* Reset interrupt pending bits for DMA1 Channel7 */
;;;161        DMA1->IFCR |= DMA1_Channel7_IT_Mask;
0000b6  495f              LDR      r1,|L1.564|
0000b8  3908              SUBS     r1,r1,#8
0000ba  6849              LDR      r1,[r1,#4]
0000bc  f0416170          ORR      r1,r1,#0xf000000
0000c0  4a5c              LDR      r2,|L1.564|
0000c2  3a08              SUBS     r2,r2,#8
0000c4  6051              STR      r1,[r2,#4]
0000c6  e03a              B        |L1.318|
                  |L1.200|
;;;162      }
;;;163      else if (DMAy_Channelx == DMA2_Channel1)
0000c8  495b              LDR      r1,|L1.568|
0000ca  4288              CMP      r0,r1
0000cc  d108              BNE      |L1.224|
;;;164      {
;;;165        /* Reset interrupt pending bits for DMA2 Channel1 */
;;;166        DMA2->IFCR |= DMA2_Channel1_IT_Mask;
0000ce  f1a00104          SUB      r1,r0,#4
0000d2  6809              LDR      r1,[r1,#0]
0000d4  f041010f          ORR      r1,r1,#0xf
0000d8  4a58              LDR      r2,|L1.572|
0000da  f8c21404          STR      r1,[r2,#0x404]
0000de  e02e              B        |L1.318|
                  |L1.224|
;;;167      }
;;;168      else if (DMAy_Channelx == DMA2_Channel2)
0000e0  4955              LDR      r1,|L1.568|
0000e2  3114              ADDS     r1,r1,#0x14
0000e4  4288              CMP      r0,r1
0000e6  d107              BNE      |L1.248|
;;;169      {
;;;170        /* Reset interrupt pending bits for DMA2 Channel2 */
;;;171        DMA2->IFCR |= DMA2_Channel2_IT_Mask;
0000e8  4955              LDR      r1,|L1.576|
0000ea  6809              LDR      r1,[r1,#0]
0000ec  f04101f0          ORR      r1,r1,#0xf0
0000f0  4a52              LDR      r2,|L1.572|
0000f2  f8c21404          STR      r1,[r2,#0x404]
0000f6  e022              B        |L1.318|
                  |L1.248|
;;;172      }
;;;173      else if (DMAy_Channelx == DMA2_Channel3)
0000f8  494f              LDR      r1,|L1.568|
0000fa  3128              ADDS     r1,r1,#0x28
0000fc  4288              CMP      r0,r1
0000fe  d107              BNE      |L1.272|
;;;174      {
;;;175        /* Reset interrupt pending bits for DMA2 Channel3 */
;;;176        DMA2->IFCR |= DMA2_Channel3_IT_Mask;
000100  494f              LDR      r1,|L1.576|
000102  6809              LDR      r1,[r1,#0]
000104  f4416170          ORR      r1,r1,#0xf00
000108  4a4c              LDR      r2,|L1.572|
00010a  f8c21404          STR      r1,[r2,#0x404]
00010e  e016              B        |L1.318|
                  |L1.272|
;;;177      }
;;;178      else if (DMAy_Channelx == DMA2_Channel4)
000110  4949              LDR      r1,|L1.568|
000112  313c              ADDS     r1,r1,#0x3c
000114  4288              CMP      r0,r1
000116  d107              BNE      |L1.296|
;;;179      {
;;;180        /* Reset interrupt pending bits for DMA2 Channel4 */
;;;181        DMA2->IFCR |= DMA2_Channel4_IT_Mask;
000118  4949              LDR      r1,|L1.576|
00011a  6809              LDR      r1,[r1,#0]
00011c  f4414170          ORR      r1,r1,#0xf000
000120  4a46              LDR      r2,|L1.572|
000122  f8c21404          STR      r1,[r2,#0x404]
000126  e00a              B        |L1.318|
                  |L1.296|
;;;182      }
;;;183      else
;;;184      { 
;;;185        if (DMAy_Channelx == DMA2_Channel5)
000128  4943              LDR      r1,|L1.568|
00012a  3150              ADDS     r1,r1,#0x50
00012c  4288              CMP      r0,r1
00012e  d106              BNE      |L1.318|
;;;186        {
;;;187          /* Reset interrupt pending bits for DMA2 Channel5 */
;;;188          DMA2->IFCR |= DMA2_Channel5_IT_Mask;
000130  4943              LDR      r1,|L1.576|
000132  6809              LDR      r1,[r1,#0]
000134  f4412170          ORR      r1,r1,#0xf0000
000138  4a40              LDR      r2,|L1.572|
00013a  f8c21404          STR      r1,[r2,#0x404]
                  |L1.318|
;;;189        }
;;;190      }
;;;191    }
00013e  4770              BX       lr
;;;192    
                          ENDP

                  DMA_Init PROC
;;;201      */
;;;202    void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
000140  b510              PUSH     {r4,lr}
;;;203    {
;;;204      uint32_t tmpreg = 0;
000142  2200              MOVS     r2,#0
;;;205    
;;;206      /* Check the parameters */
;;;207      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;208      assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
;;;209      assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
;;;210      assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
;;;211      assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
;;;212      assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
;;;213      assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
;;;214      assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
;;;215      assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
;;;216      assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
;;;217    
;;;218    /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
;;;219      /* Get the DMAy_Channelx CCR value */
;;;220      tmpreg = DMAy_Channelx->CCR;
000144  6802              LDR      r2,[r0,#0]
;;;221      /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
;;;222      tmpreg &= CCR_CLEAR_Mask;
000146  f64773f0          MOV      r3,#0x7ff0
00014a  439a              BICS     r2,r2,r3
;;;223      /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
;;;224      /* Set DIR bit according to DMA_DIR value */
;;;225      /* Set CIRC bit according to DMA_Mode value */
;;;226      /* Set PINC bit according to DMA_PeripheralInc value */
;;;227      /* Set MINC bit according to DMA_MemoryInc value */
;;;228      /* Set PSIZE bits according to DMA_PeripheralDataSize value */
;;;229      /* Set MSIZE bits according to DMA_MemoryDataSize value */
;;;230      /* Set PL bits according to DMA_Priority value */
;;;231      /* Set the MEM2MEM bit according to DMA_M2M value */
;;;232      tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
00014c  6a0c              LDR      r4,[r1,#0x20]
00014e  688b              LDR      r3,[r1,#8]
000150  4323              ORRS     r3,r3,r4
000152  690c              LDR      r4,[r1,#0x10]
000154  4323              ORRS     r3,r3,r4
000156  694c              LDR      r4,[r1,#0x14]
000158  4323              ORRS     r3,r3,r4
00015a  698c              LDR      r4,[r1,#0x18]
00015c  4323              ORRS     r3,r3,r4
00015e  69cc              LDR      r4,[r1,#0x1c]
000160  4323              ORRS     r3,r3,r4
000162  6a4c              LDR      r4,[r1,#0x24]
000164  4323              ORRS     r3,r3,r4
000166  6a8c              LDR      r4,[r1,#0x28]
000168  4323              ORRS     r3,r3,r4
00016a  431a              ORRS     r2,r2,r3
;;;233                DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
;;;234                DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
;;;235                DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
;;;236    
;;;237      /* Write to DMAy Channelx CCR */
;;;238      DMAy_Channelx->CCR = tmpreg;
00016c  6002              STR      r2,[r0,#0]
;;;239    
;;;240    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;241      /* Write to DMAy Channelx CNDTR */
;;;242      DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
00016e  68cb              LDR      r3,[r1,#0xc]
000170  6043              STR      r3,[r0,#4]
;;;243    
;;;244    /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
;;;245      /* Write to DMAy Channelx CPAR */
;;;246      DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
000172  680b              LDR      r3,[r1,#0]
000174  6083              STR      r3,[r0,#8]
;;;247    
;;;248    /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
;;;249      /* Write to DMAy Channelx CMAR */
;;;250      DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
000176  684b              LDR      r3,[r1,#4]
000178  60c3              STR      r3,[r0,#0xc]
;;;251    }
00017a  bd10              POP      {r4,pc}
;;;252    
                          ENDP

                  DMA_StructInit PROC
;;;258      */
;;;259    void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
00017c  2100              MOVS     r1,#0
;;;260    {
;;;261    /*-------------- Reset DMA init structure parameters values ------------------*/
;;;262      /* Initialize the DMA_PeripheralBaseAddr member */
;;;263      DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
00017e  6001              STR      r1,[r0,#0]
;;;264      /* Initialize the DMA_MemoryBaseAddr member */
;;;265      DMA_InitStruct->DMA_MemoryBaseAddr = 0;
000180  6041              STR      r1,[r0,#4]
;;;266      /* Initialize the DMA_DIR member */
;;;267      DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
000182  6081              STR      r1,[r0,#8]
;;;268      /* Initialize the DMA_BufferSize member */
;;;269      DMA_InitStruct->DMA_BufferSize = 0;
000184  60c1              STR      r1,[r0,#0xc]
;;;270      /* Initialize the DMA_PeripheralInc member */
;;;271      DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000186  6101              STR      r1,[r0,#0x10]
;;;272      /* Initialize the DMA_MemoryInc member */
;;;273      DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
000188  6141              STR      r1,[r0,#0x14]
;;;274      /* Initialize the DMA_PeripheralDataSize member */
;;;275      DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00018a  6181              STR      r1,[r0,#0x18]
;;;276      /* Initialize the DMA_MemoryDataSize member */
;;;277      DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
00018c  61c1              STR      r1,[r0,#0x1c]
;;;278      /* Initialize the DMA_Mode member */
;;;279      DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
00018e  6201              STR      r1,[r0,#0x20]
;;;280      /* Initialize the DMA_Priority member */
;;;281      DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
000190  6241              STR      r1,[r0,#0x24]
;;;282      /* Initialize the DMA_M2M member */
;;;283      DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
000192  6281              STR      r1,[r0,#0x28]
;;;284    }
000194  4770              BX       lr
;;;285    
                          ENDP

                  DMA_Cmd PROC
;;;293      */
;;;294    void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
000196  b121              CBZ      r1,|L1.418|
;;;295    {
;;;296      /* Check the parameters */
;;;297      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;298      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;299    
;;;300      if (NewState != DISABLE)
;;;301      {
;;;302        /* Enable the selected DMAy Channelx */
;;;303        DMAy_Channelx->CCR |= DMA_CCR1_EN;
000198  6802              LDR      r2,[r0,#0]
00019a  f0420201          ORR      r2,r2,#1
00019e  6002              STR      r2,[r0,#0]
0001a0  e004              B        |L1.428|
                  |L1.418|
;;;304      }
;;;305      else
;;;306      {
;;;307        /* Disable the selected DMAy Channelx */
;;;308        DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
0001a2  6802              LDR      r2,[r0,#0]
0001a4  f64f73fe          MOV      r3,#0xfffe
0001a8  401a              ANDS     r2,r2,r3
0001aa  6002              STR      r2,[r0,#0]
                  |L1.428|
;;;309      }
;;;310    }
0001ac  4770              BX       lr
;;;311    
                          ENDP

                  DMA_ITConfig PROC
;;;325      */
;;;326    void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
0001ae  b11a              CBZ      r2,|L1.440|
;;;327    {
;;;328      /* Check the parameters */
;;;329      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;330      assert_param(IS_DMA_CONFIG_IT(DMA_IT));
;;;331      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;332      if (NewState != DISABLE)
;;;333      {
;;;334        /* Enable the selected DMA interrupts */
;;;335        DMAy_Channelx->CCR |= DMA_IT;
0001b0  6803              LDR      r3,[r0,#0]
0001b2  430b              ORRS     r3,r3,r1
0001b4  6003              STR      r3,[r0,#0]
0001b6  e002              B        |L1.446|
                  |L1.440|
;;;336      }
;;;337      else
;;;338      {
;;;339        /* Disable the selected DMA interrupts */
;;;340        DMAy_Channelx->CCR &= ~DMA_IT;
0001b8  6803              LDR      r3,[r0,#0]
0001ba  438b              BICS     r3,r3,r1
0001bc  6003              STR      r3,[r0,#0]
                  |L1.446|
;;;341      }
;;;342    }
0001be  4770              BX       lr
;;;343    
                          ENDP

                  DMA_SetCurrDataCounter PROC
;;;352      */
;;;353    void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
0001c0  6041              STR      r1,[r0,#4]
;;;354    {
;;;355      /* Check the parameters */
;;;356      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;357      
;;;358    /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
;;;359      /* Write to DMAy Channelx CNDTR */
;;;360      DMAy_Channelx->CNDTR = DataNumber;  
;;;361    }
0001c2  4770              BX       lr
;;;362    
                          ENDP

                  DMA_GetCurrDataCounter PROC
;;;370      */
;;;371    uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
0001c4  4601              MOV      r1,r0
;;;372    {
;;;373      /* Check the parameters */
;;;374      assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
;;;375      /* Return the number of remaining data units for DMAy Channelx */
;;;376      return ((uint16_t)(DMAy_Channelx->CNDTR));
0001c6  6848              LDR      r0,[r1,#4]
0001c8  b280              UXTH     r0,r0
;;;377    }
0001ca  4770              BX       lr
;;;378    
                          ENDP

                  DMA_GetFlagStatus PROC
;;;432      */
;;;433    FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
0001cc  4601              MOV      r1,r0
;;;434    {
;;;435      FlagStatus bitstatus = RESET;
0001ce  2000              MOVS     r0,#0
;;;436      uint32_t tmpreg = 0;
0001d0  2200              MOVS     r2,#0
;;;437      
;;;438      /* Check the parameters */
;;;439      assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
;;;440    
;;;441      /* Calculate the used DMAy */
;;;442      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
0001d2  f0115f80          TST      r1,#0x10000000
0001d6  d002              BEQ      |L1.478|
;;;443      {
;;;444        /* Get DMA2 ISR register value */
;;;445        tmpreg = DMA2->ISR ;
0001d8  4b1a              LDR      r3,|L1.580|
0001da  681a              LDR      r2,[r3,#0]
0001dc  e001              B        |L1.482|
                  |L1.478|
;;;446      }
;;;447      else
;;;448      {
;;;449        /* Get DMA1 ISR register value */
;;;450        tmpreg = DMA1->ISR ;
0001de  4b17              LDR      r3,|L1.572|
0001e0  681a              LDR      r2,[r3,#0]
                  |L1.482|
;;;451      }
;;;452    
;;;453      /* Check the status of the specified DMAy flag */
;;;454      if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
0001e2  420a              TST      r2,r1
0001e4  d001              BEQ      |L1.490|
;;;455      {
;;;456        /* DMAy_FLAG is set */
;;;457        bitstatus = SET;
0001e6  2001              MOVS     r0,#1
0001e8  e000              B        |L1.492|
                  |L1.490|
;;;458      }
;;;459      else
;;;460      {
;;;461        /* DMAy_FLAG is reset */
;;;462        bitstatus = RESET;
0001ea  2000              MOVS     r0,#0
                  |L1.492|
;;;463      }
;;;464      
;;;465      /* Return the DMAy_FLAG status */
;;;466      return  bitstatus;
;;;467    }
0001ec  4770              BX       lr
;;;468    
                          ENDP

                  DMA_ClearFlag PROC
;;;522      */
;;;523    void DMA_ClearFlag(uint32_t DMAy_FLAG)
0001ee  f0105f80          TST      r0,#0x10000000
;;;524    {
;;;525      /* Check the parameters */
;;;526      assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
;;;527    
;;;528      /* Calculate the used DMAy */
;;;529      if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
0001f2  d002              BEQ      |L1.506|
;;;530      {
;;;531        /* Clear the selected DMAy flags */
;;;532        DMA2->IFCR = DMAy_FLAG;
0001f4  4912              LDR      r1,|L1.576|
0001f6  6008              STR      r0,[r1,#0]
0001f8  e001              B        |L1.510|
                  |L1.506|
;;;533      }
;;;534      else
;;;535      {
;;;536        /* Clear the selected DMAy flags */
;;;537        DMA1->IFCR = DMAy_FLAG;
0001fa  4910              LDR      r1,|L1.572|
0001fc  6048              STR      r0,[r1,#4]
                  |L1.510|
;;;538      }
;;;539    }
0001fe  4770              BX       lr
;;;540    
                          ENDP

                  DMA_GetITStatus PROC
;;;594      */
;;;595    ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
000200  4601              MOV      r1,r0
;;;596    {
;;;597      ITStatus bitstatus = RESET;
000202  2000              MOVS     r0,#0
;;;598      uint32_t tmpreg = 0;
000204  2200              MOVS     r2,#0
;;;599    
;;;600      /* Check the parameters */
;;;601      assert_param(IS_DMA_GET_IT(DMAy_IT));
;;;602    
;;;603      /* Calculate the used DMA */
;;;604      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
000206  f0115f80          TST      r1,#0x10000000
00020a  d002              BEQ      |L1.530|
;;;605      {
;;;606        /* Get DMA2 ISR register value */
;;;607        tmpreg = DMA2->ISR;
00020c  4b0d              LDR      r3,|L1.580|
00020e  681a              LDR      r2,[r3,#0]
000210  e001              B        |L1.534|
                  |L1.530|
;;;608      }
;;;609      else
;;;610      {
;;;611        /* Get DMA1 ISR register value */
;;;612        tmpreg = DMA1->ISR;
000212  4b0a              LDR      r3,|L1.572|
000214  681a              LDR      r2,[r3,#0]
                  |L1.534|
;;;613      }
;;;614    
;;;615      /* Check the status of the specified DMAy interrupt */
;;;616      if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
000216  420a              TST      r2,r1
000218  d001              BEQ      |L1.542|
;;;617      {
;;;618        /* DMAy_IT is set */
;;;619        bitstatus = SET;
00021a  2001              MOVS     r0,#1
00021c  e000              B        |L1.544|
                  |L1.542|
;;;620      }
;;;621      else
;;;622      {
;;;623        /* DMAy_IT is reset */
;;;624        bitstatus = RESET;
00021e  2000              MOVS     r0,#0
                  |L1.544|
;;;625      }
;;;626      /* Return the DMA_IT status */
;;;627      return  bitstatus;
;;;628    }
000220  4770              BX       lr
;;;629    
                          ENDP

                  DMA_ClearITPendingBit PROC
;;;683      */
;;;684    void DMA_ClearITPendingBit(uint32_t DMAy_IT)
000222  f0105f80          TST      r0,#0x10000000
;;;685    {
;;;686      /* Check the parameters */
;;;687      assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
;;;688    
;;;689      /* Calculate the used DMAy */
;;;690      if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
000226  d002              BEQ      |L1.558|
;;;691      {
;;;692        /* Clear the selected DMAy interrupt pending bits */
;;;693        DMA2->IFCR = DMAy_IT;
000228  4905              LDR      r1,|L1.576|
00022a  6008              STR      r0,[r1,#0]
00022c  e001              B        |L1.562|
                  |L1.558|
;;;694      }
;;;695      else
;;;696      {
;;;697        /* Clear the selected DMAy interrupt pending bits */
;;;698        DMA1->IFCR = DMAy_IT;
00022e  4903              LDR      r1,|L1.572|
000230  6048              STR      r0,[r1,#4]
                  |L1.562|
;;;699      }
;;;700    }
000232  4770              BX       lr
;;;701    
                          ENDP

                  |L1.564|
                          DCD      0x40020008
                  |L1.568|
                          DCD      0x40020408
                  |L1.572|
                          DCD      0x40020000
                  |L1.576|
                          DCD      0x40020404
                  |L1.580|
                          DCD      0x40020400
