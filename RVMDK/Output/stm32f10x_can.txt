; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Output\stm32f10x_can.o --depend=.\Output\stm32f10x_can.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Output\stm32f10x_can.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_can.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CAN_DeInit PROC
;;;121      */
;;;122    void CAN_DeInit(CAN_TypeDef* CANx)
000000  b510              PUSH     {r4,lr}
;;;123    {
000002  4604              MOV      r4,r0
;;;124      /* Check the parameters */
;;;125      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;126     
;;;127      if (CANx == CAN1)
000004  48ff              LDR      r0,|L1.1028|
000006  4284              CMP      r4,r0
000008  d109              BNE      |L1.30|
;;;128      {
;;;129        /* Enable CAN1 reset state */
;;;130        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0648              LSLS     r0,r1,#25
00000e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;131        /* Release CAN1 from reset state */
;;;132        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
000012  2100              MOVS     r1,#0
000014  f04f7000          MOV      r0,#0x2000000
000018  f7fffffe          BL       RCC_APB1PeriphResetCmd
00001c  e008              B        |L1.48|
                  |L1.30|
;;;133      }
;;;134      else
;;;135      {  
;;;136        /* Enable CAN2 reset state */
;;;137        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
00001e  2101              MOVS     r1,#1
000020  0688              LSLS     r0,r1,#26
000022  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;138        /* Release CAN2 from reset state */
;;;139        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
000026  2100              MOVS     r1,#0
000028  f04f6080          MOV      r0,#0x4000000
00002c  f7fffffe          BL       RCC_APB1PeriphResetCmd
                  |L1.48|
;;;140      }
;;;141    }
000030  bd10              POP      {r4,pc}
;;;142    
                          ENDP

                  CAN_Init PROC
;;;153      */
;;;154    uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
000032  b530              PUSH     {r4,r5,lr}
;;;155    {
000034  4602              MOV      r2,r0
;;;156      uint8_t InitStatus = CAN_InitStatus_Failed;
000036  2000              MOVS     r0,#0
;;;157      uint32_t wait_ack = 0x00000000;
000038  2300              MOVS     r3,#0
;;;158      /* Check the parameters */
;;;159      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;160      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
;;;161      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
;;;162      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
;;;163      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
;;;164      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
;;;165      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
;;;166      assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
;;;167      assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
;;;168      assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
;;;169      assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
;;;170      assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
;;;171    
;;;172      /* Exit from sleep mode */
;;;173      CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
00003a  6814              LDR      r4,[r2,#0]
00003c  f0240402          BIC      r4,r4,#2
000040  6014              STR      r4,[r2,#0]
;;;174    
;;;175      /* Request initialisation */
;;;176      CANx->MCR |= CAN_MCR_INRQ ;
000042  6814              LDR      r4,[r2,#0]
000044  f0440401          ORR      r4,r4,#1
000048  6014              STR      r4,[r2,#0]
;;;177    
;;;178      /* Wait the acknowledge */
;;;179      while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
00004a  e000              B        |L1.78|
                  |L1.76|
;;;180      {
;;;181        wait_ack++;
00004c  1c5b              ADDS     r3,r3,#1
                  |L1.78|
00004e  6854              LDR      r4,[r2,#4]            ;179
000050  f0040401          AND      r4,r4,#1              ;179
000054  2c01              CMP      r4,#1                 ;179
000056  d003              BEQ      |L1.96|
000058  f5a3447f          SUB      r4,r3,#0xff00         ;179
00005c  3cff              SUBS     r4,r4,#0xff           ;179
00005e  d1f5              BNE      |L1.76|
                  |L1.96|
;;;182      }
;;;183    
;;;184      /* Check acknowledge */
;;;185      if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
000060  6854              LDR      r4,[r2,#4]
000062  f0040401          AND      r4,r4,#1
000066  2c01              CMP      r4,#1
000068  d001              BEQ      |L1.110|
;;;186      {
;;;187        InitStatus = CAN_InitStatus_Failed;
00006a  2000              MOVS     r0,#0
00006c  e06e              B        |L1.332|
                  |L1.110|
;;;188      }
;;;189      else 
;;;190      {
;;;191        /* Set the time triggered communication mode */
;;;192        if (CAN_InitStruct->CAN_TTCM == ENABLE)
00006e  798c              LDRB     r4,[r1,#6]
000070  2c01              CMP      r4,#1
000072  d104              BNE      |L1.126|
;;;193        {
;;;194          CANx->MCR |= CAN_MCR_TTCM;
000074  6814              LDR      r4,[r2,#0]
000076  f0440480          ORR      r4,r4,#0x80
00007a  6014              STR      r4,[r2,#0]
00007c  e003              B        |L1.134|
                  |L1.126|
;;;195        }
;;;196        else
;;;197        {
;;;198          CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
00007e  6814              LDR      r4,[r2,#0]
000080  f0240480          BIC      r4,r4,#0x80
000084  6014              STR      r4,[r2,#0]
                  |L1.134|
;;;199        }
;;;200    
;;;201        /* Set the automatic bus-off management */
;;;202        if (CAN_InitStruct->CAN_ABOM == ENABLE)
000086  79cc              LDRB     r4,[r1,#7]
000088  2c01              CMP      r4,#1
00008a  d104              BNE      |L1.150|
;;;203        {
;;;204          CANx->MCR |= CAN_MCR_ABOM;
00008c  6814              LDR      r4,[r2,#0]
00008e  f0440440          ORR      r4,r4,#0x40
000092  6014              STR      r4,[r2,#0]
000094  e003              B        |L1.158|
                  |L1.150|
;;;205        }
;;;206        else
;;;207        {
;;;208          CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
000096  6814              LDR      r4,[r2,#0]
000098  f0240440          BIC      r4,r4,#0x40
00009c  6014              STR      r4,[r2,#0]
                  |L1.158|
;;;209        }
;;;210    
;;;211        /* Set the automatic wake-up mode */
;;;212        if (CAN_InitStruct->CAN_AWUM == ENABLE)
00009e  7a0c              LDRB     r4,[r1,#8]
0000a0  2c01              CMP      r4,#1
0000a2  d104              BNE      |L1.174|
;;;213        {
;;;214          CANx->MCR |= CAN_MCR_AWUM;
0000a4  6814              LDR      r4,[r2,#0]
0000a6  f0440420          ORR      r4,r4,#0x20
0000aa  6014              STR      r4,[r2,#0]
0000ac  e003              B        |L1.182|
                  |L1.174|
;;;215        }
;;;216        else
;;;217        {
;;;218          CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
0000ae  6814              LDR      r4,[r2,#0]
0000b0  f0240420          BIC      r4,r4,#0x20
0000b4  6014              STR      r4,[r2,#0]
                  |L1.182|
;;;219        }
;;;220    
;;;221        /* Set the no automatic retransmission */
;;;222        if (CAN_InitStruct->CAN_NART == ENABLE)
0000b6  7a4c              LDRB     r4,[r1,#9]
0000b8  2c01              CMP      r4,#1
0000ba  d104              BNE      |L1.198|
;;;223        {
;;;224          CANx->MCR |= CAN_MCR_NART;
0000bc  6814              LDR      r4,[r2,#0]
0000be  f0440410          ORR      r4,r4,#0x10
0000c2  6014              STR      r4,[r2,#0]
0000c4  e003              B        |L1.206|
                  |L1.198|
;;;225        }
;;;226        else
;;;227        {
;;;228          CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
0000c6  6814              LDR      r4,[r2,#0]
0000c8  f0240410          BIC      r4,r4,#0x10
0000cc  6014              STR      r4,[r2,#0]
                  |L1.206|
;;;229        }
;;;230    
;;;231        /* Set the receive FIFO locked mode */
;;;232        if (CAN_InitStruct->CAN_RFLM == ENABLE)
0000ce  7a8c              LDRB     r4,[r1,#0xa]
0000d0  2c01              CMP      r4,#1
0000d2  d104              BNE      |L1.222|
;;;233        {
;;;234          CANx->MCR |= CAN_MCR_RFLM;
0000d4  6814              LDR      r4,[r2,#0]
0000d6  f0440408          ORR      r4,r4,#8
0000da  6014              STR      r4,[r2,#0]
0000dc  e003              B        |L1.230|
                  |L1.222|
;;;235        }
;;;236        else
;;;237        {
;;;238          CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
0000de  6814              LDR      r4,[r2,#0]
0000e0  f0240408          BIC      r4,r4,#8
0000e4  6014              STR      r4,[r2,#0]
                  |L1.230|
;;;239        }
;;;240    
;;;241        /* Set the transmit FIFO priority */
;;;242        if (CAN_InitStruct->CAN_TXFP == ENABLE)
0000e6  7acc              LDRB     r4,[r1,#0xb]
0000e8  2c01              CMP      r4,#1
0000ea  d104              BNE      |L1.246|
;;;243        {
;;;244          CANx->MCR |= CAN_MCR_TXFP;
0000ec  6814              LDR      r4,[r2,#0]
0000ee  f0440404          ORR      r4,r4,#4
0000f2  6014              STR      r4,[r2,#0]
0000f4  e003              B        |L1.254|
                  |L1.246|
;;;245        }
;;;246        else
;;;247        {
;;;248          CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
0000f6  6814              LDR      r4,[r2,#0]
0000f8  f0240404          BIC      r4,r4,#4
0000fc  6014              STR      r4,[r2,#0]
                  |L1.254|
;;;249        }
;;;250    
;;;251        /* Set the bit timing register */
;;;252        CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
0000fe  788c              LDRB     r4,[r1,#2]
000100  07a4              LSLS     r4,r4,#30
000102  78cd              LDRB     r5,[r1,#3]
000104  ea446405          ORR      r4,r4,r5,LSL #24
000108  790d              LDRB     r5,[r1,#4]
00010a  ea444405          ORR      r4,r4,r5,LSL #16
00010e  794d              LDRB     r5,[r1,#5]
000110  ea445405          ORR      r4,r4,r5,LSL #20
000114  880d              LDRH     r5,[r1,#0]
000116  1e6d              SUBS     r5,r5,#1
000118  432c              ORRS     r4,r4,r5
00011a  61d4              STR      r4,[r2,#0x1c]
;;;253                    ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
;;;254                    ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
;;;255                    ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
;;;256                   ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
;;;257    
;;;258        /* Request leave initialisation */
;;;259        CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
00011c  6814              LDR      r4,[r2,#0]
00011e  f0240401          BIC      r4,r4,#1
000122  6014              STR      r4,[r2,#0]
;;;260    
;;;261       /* Wait the acknowledge */
;;;262       wait_ack = 0;
000124  2300              MOVS     r3,#0
;;;263    
;;;264       while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
000126  e000              B        |L1.298|
                  |L1.296|
;;;265       {
;;;266         wait_ack++;
000128  1c5b              ADDS     r3,r3,#1
                  |L1.298|
00012a  6854              LDR      r4,[r2,#4]            ;264
00012c  f0040401          AND      r4,r4,#1              ;264
000130  2c01              CMP      r4,#1                 ;264
000132  d103              BNE      |L1.316|
000134  f5a3447f          SUB      r4,r3,#0xff00         ;264
000138  3cff              SUBS     r4,r4,#0xff           ;264
00013a  d1f5              BNE      |L1.296|
                  |L1.316|
;;;267       }
;;;268    
;;;269        /* ...and check acknowledged */
;;;270        if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
00013c  6854              LDR      r4,[r2,#4]
00013e  f0040401          AND      r4,r4,#1
000142  2c01              CMP      r4,#1
000144  d101              BNE      |L1.330|
;;;271        {
;;;272          InitStatus = CAN_InitStatus_Failed;
000146  2000              MOVS     r0,#0
000148  e000              B        |L1.332|
                  |L1.330|
;;;273        }
;;;274        else
;;;275        {
;;;276          InitStatus = CAN_InitStatus_Success ;
00014a  2001              MOVS     r0,#1
                  |L1.332|
;;;277        }
;;;278      }
;;;279    
;;;280      /* At this step, return the status of initialization */
;;;281      return InitStatus;
;;;282    }
00014c  bd30              POP      {r4,r5,pc}
;;;283    
                          ENDP

                  CAN_FilterInit PROC
;;;291      */
;;;292    void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
00014e  b510              PUSH     {r4,lr}
;;;293    {
;;;294      uint32_t filter_number_bit_pos = 0;
000150  2100              MOVS     r1,#0
;;;295      /* Check the parameters */
;;;296      assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
;;;297      assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
;;;298      assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
;;;299      assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
;;;300      assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
;;;301    
;;;302      filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
000152  7a83              LDRB     r3,[r0,#0xa]
000154  2201              MOVS     r2,#1
000156  fa02f103          LSL      r1,r2,r3
;;;303    
;;;304      /* Initialisation mode for the filter */
;;;305      CAN1->FMR |= FMR_FINIT;
00015a  4aab              LDR      r2,|L1.1032|
00015c  6812              LDR      r2,[r2,#0]
00015e  f0420201          ORR      r2,r2,#1
000162  4baa              LDR      r3,|L1.1036|
000164  f8c32600          STR      r2,[r3,#0x600]
;;;306    
;;;307      /* Filter Deactivation */
;;;308      CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
000168  461a              MOV      r2,r3
00016a  f8d2261c          LDR      r2,[r2,#0x61c]
00016e  ea220201          BIC      r2,r2,r1
000172  4ba7              LDR      r3,|L1.1040|
000174  601a              STR      r2,[r3,#0]
;;;309    
;;;310      /* Filter Scale */
;;;311      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
000176  7b02              LDRB     r2,[r0,#0xc]
000178  b9b2              CBNZ     r2,|L1.424|
;;;312      {
;;;313        /* 16-bit scale for the filter */
;;;314        CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
00017a  4aa6              LDR      r2,|L1.1044|
00017c  6812              LDR      r2,[r2,#0]
00017e  ea220201          BIC      r2,r2,r1
000182  4ba4              LDR      r3,|L1.1044|
000184  601a              STR      r2,[r3,#0]
;;;315    
;;;316        /* First 16-bit identifier and First 16-bit mask */
;;;317        /* Or First 16-bit identifier and Second 16-bit identifier */
;;;318        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
000186  8842              LDRH     r2,[r0,#2]
000188  88c3              LDRH     r3,[r0,#6]
00018a  ea424303          ORR      r3,r2,r3,LSL #16
00018e  4aa2              LDR      r2,|L1.1048|
000190  7a84              LDRB     r4,[r0,#0xa]
000192  f8423034          STR      r3,[r2,r4,LSL #3]
;;;319        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
;;;320            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
;;;321    
;;;322        /* Second 16-bit identifier and Second 16-bit mask */
;;;323        /* Or Third 16-bit identifier and Fourth 16-bit identifier */
;;;324        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
000196  8802              LDRH     r2,[r0,#0]
000198  8883              LDRH     r3,[r0,#4]
00019a  ea424303          ORR      r3,r2,r3,LSL #16
00019e  4a9e              LDR      r2,|L1.1048|
0001a0  7a84              LDRB     r4,[r0,#0xa]
0001a2  eb0202c4          ADD      r2,r2,r4,LSL #3
0001a6  6053              STR      r3,[r2,#4]
                  |L1.424|
;;;325        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;326            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
;;;327      }
;;;328    
;;;329      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
0001a8  7b02              LDRB     r2,[r0,#0xc]
0001aa  2a01              CMP      r2,#1
0001ac  d116              BNE      |L1.476|
;;;330      {
;;;331        /* 32-bit scale for the filter */
;;;332        CAN1->FS1R |= filter_number_bit_pos;
0001ae  4a99              LDR      r2,|L1.1044|
0001b0  6812              LDR      r2,[r2,#0]
0001b2  ea420201          ORR      r2,r2,r1
0001b6  4b97              LDR      r3,|L1.1044|
0001b8  601a              STR      r2,[r3,#0]
;;;333        /* 32-bit identifier or First 32-bit identifier */
;;;334        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
0001ba  8842              LDRH     r2,[r0,#2]
0001bc  8803              LDRH     r3,[r0,#0]
0001be  ea424303          ORR      r3,r2,r3,LSL #16
0001c2  4a95              LDR      r2,|L1.1048|
0001c4  7a84              LDRB     r4,[r0,#0xa]
0001c6  f8423034          STR      r3,[r2,r4,LSL #3]
;;;335        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
;;;336            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
;;;337        /* 32-bit mask or Second 32-bit identifier */
;;;338        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
0001ca  88c2              LDRH     r2,[r0,#6]
0001cc  8883              LDRH     r3,[r0,#4]
0001ce  ea424303          ORR      r3,r2,r3,LSL #16
0001d2  4a91              LDR      r2,|L1.1048|
0001d4  7a84              LDRB     r4,[r0,#0xa]
0001d6  eb0202c4          ADD      r2,r2,r4,LSL #3
0001da  6053              STR      r3,[r2,#4]
                  |L1.476|
;;;339        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;340            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
;;;341      }
;;;342    
;;;343      /* Filter Mode */
;;;344      if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
0001dc  7ac2              LDRB     r2,[r0,#0xb]
0001de  b93a              CBNZ     r2,|L1.496|
;;;345      {
;;;346        /*Id/Mask mode for the filter*/
;;;347        CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
0001e0  4a8e              LDR      r2,|L1.1052|
0001e2  6812              LDR      r2,[r2,#0]
0001e4  ea220201          BIC      r2,r2,r1
0001e8  4b88              LDR      r3,|L1.1036|
0001ea  f8c32604          STR      r2,[r3,#0x604]
0001ee  e006              B        |L1.510|
                  |L1.496|
;;;348      }
;;;349      else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
;;;350      {
;;;351        /*Identifier list mode for the filter*/
;;;352        CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
0001f0  4a8a              LDR      r2,|L1.1052|
0001f2  6812              LDR      r2,[r2,#0]
0001f4  ea420201          ORR      r2,r2,r1
0001f8  4b84              LDR      r3,|L1.1036|
0001fa  f8c32604          STR      r2,[r3,#0x604]
                  |L1.510|
;;;353      }
;;;354    
;;;355      /* Filter FIFO assignment */
;;;356      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
0001fe  8902              LDRH     r2,[r0,#8]
000200  b932              CBNZ     r2,|L1.528|
;;;357      {
;;;358        /* FIFO 0 assignation for the filter */
;;;359        CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
000202  4a87              LDR      r2,|L1.1056|
000204  6812              LDR      r2,[r2,#0]
000206  ea220201          BIC      r2,r2,r1
00020a  4b80              LDR      r3,|L1.1036|
00020c  f8c32614          STR      r2,[r3,#0x614]
                  |L1.528|
;;;360      }
;;;361    
;;;362      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
000210  8902              LDRH     r2,[r0,#8]
000212  2a01              CMP      r2,#1
000214  d106              BNE      |L1.548|
;;;363      {
;;;364        /* FIFO 1 assignation for the filter */
;;;365        CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
000216  4a82              LDR      r2,|L1.1056|
000218  6812              LDR      r2,[r2,#0]
00021a  ea420201          ORR      r2,r2,r1
00021e  4b7b              LDR      r3,|L1.1036|
000220  f8c32614          STR      r2,[r3,#0x614]
                  |L1.548|
;;;366      }
;;;367      
;;;368      /* Filter activation */
;;;369      if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
000224  7b42              LDRB     r2,[r0,#0xd]
000226  2a01              CMP      r2,#1
000228  d106              BNE      |L1.568|
;;;370      {
;;;371        CAN1->FA1R |= filter_number_bit_pos;
00022a  4a79              LDR      r2,|L1.1040|
00022c  6812              LDR      r2,[r2,#0]
00022e  ea420201          ORR      r2,r2,r1
000232  4b76              LDR      r3,|L1.1036|
000234  f8c3261c          STR      r2,[r3,#0x61c]
                  |L1.568|
;;;372      }
;;;373    
;;;374      /* Leave the initialisation mode for the filter */
;;;375      CAN1->FMR &= ~FMR_FINIT;
000238  4a73              LDR      r2,|L1.1032|
00023a  6812              LDR      r2,[r2,#0]
00023c  f0220201          BIC      r2,r2,#1
000240  4b72              LDR      r3,|L1.1036|
000242  f8c32600          STR      r2,[r3,#0x600]
;;;376    }
000246  bd10              POP      {r4,pc}
;;;377    
                          ENDP

                  CAN_StructInit PROC
;;;383      */
;;;384    void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
000248  2100              MOVS     r1,#0
;;;385    {
;;;386      /* Reset CAN init structure parameters values */
;;;387      
;;;388      /* Initialize the time triggered communication mode */
;;;389      CAN_InitStruct->CAN_TTCM = DISABLE;
00024a  7181              STRB     r1,[r0,#6]
;;;390      
;;;391      /* Initialize the automatic bus-off management */
;;;392      CAN_InitStruct->CAN_ABOM = DISABLE;
00024c  71c1              STRB     r1,[r0,#7]
;;;393      
;;;394      /* Initialize the automatic wake-up mode */
;;;395      CAN_InitStruct->CAN_AWUM = DISABLE;
00024e  7201              STRB     r1,[r0,#8]
;;;396      
;;;397      /* Initialize the no automatic retransmission */
;;;398      CAN_InitStruct->CAN_NART = DISABLE;
000250  7241              STRB     r1,[r0,#9]
;;;399      
;;;400      /* Initialize the receive FIFO locked mode */
;;;401      CAN_InitStruct->CAN_RFLM = DISABLE;
000252  7281              STRB     r1,[r0,#0xa]
;;;402      
;;;403      /* Initialize the transmit FIFO priority */
;;;404      CAN_InitStruct->CAN_TXFP = DISABLE;
000254  72c1              STRB     r1,[r0,#0xb]
;;;405      
;;;406      /* Initialize the CAN_Mode member */
;;;407      CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
000256  7081              STRB     r1,[r0,#2]
;;;408      
;;;409      /* Initialize the CAN_SJW member */
;;;410      CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
000258  70c1              STRB     r1,[r0,#3]
;;;411      
;;;412      /* Initialize the CAN_BS1 member */
;;;413      CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
00025a  2103              MOVS     r1,#3
00025c  7101              STRB     r1,[r0,#4]
;;;414      
;;;415      /* Initialize the CAN_BS2 member */
;;;416      CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
00025e  2102              MOVS     r1,#2
000260  7141              STRB     r1,[r0,#5]
;;;417      
;;;418      /* Initialize the CAN_Prescaler member */
;;;419      CAN_InitStruct->CAN_Prescaler = 1;
000262  2101              MOVS     r1,#1
000264  8001              STRH     r1,[r0,#0]
;;;420    }
000266  4770              BX       lr
;;;421    
                          ENDP

                  CAN_SlaveStartBank PROC
;;;427      */
;;;428    void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
000268  4967              LDR      r1,|L1.1032|
;;;429    {
;;;430      /* Check the parameters */
;;;431      assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
;;;432      
;;;433      /* Enter Initialisation mode for the filter */
;;;434      CAN1->FMR |= FMR_FINIT;
00026a  6809              LDR      r1,[r1,#0]
00026c  f0410101          ORR      r1,r1,#1
000270  4a66              LDR      r2,|L1.1036|
000272  f8c21600          STR      r1,[r2,#0x600]
;;;435      
;;;436      /* Select the start slave bank */
;;;437      CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
000276  4964              LDR      r1,|L1.1032|
000278  6809              LDR      r1,[r1,#0]
00027a  f643720e          MOV      r2,#0x3f0e
00027e  ea210102          BIC      r1,r1,r2
000282  4a62              LDR      r2,|L1.1036|
000284  f8c21600          STR      r1,[r2,#0x600]
;;;438      CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
000288  4611              MOV      r1,r2
00028a  f8d11600          LDR      r1,[r1,#0x600]
00028e  ea412100          ORR      r1,r1,r0,LSL #8
000292  f8c21600          STR      r1,[r2,#0x600]
;;;439      
;;;440      /* Leave Initialisation mode for the filter */
;;;441      CAN1->FMR &= ~FMR_FINIT;
000296  4611              MOV      r1,r2
000298  f8d11600          LDR      r1,[r1,#0x600]
00029c  f0210101          BIC      r1,r1,#1
0002a0  f8c21600          STR      r1,[r2,#0x600]
;;;442    }
0002a4  4770              BX       lr
;;;443    
                          ENDP

                  CAN_DBGFreeze PROC
;;;450      */
;;;451    void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
0002a6  b121              CBZ      r1,|L1.690|
;;;452    {
;;;453      /* Check the parameters */
;;;454      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;455      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;456      
;;;457      if (NewState != DISABLE)
;;;458      {
;;;459        /* Enable Debug Freeze  */
;;;460        CANx->MCR |= MCR_DBF;
0002a8  6802              LDR      r2,[r0,#0]
0002aa  f4423280          ORR      r2,r2,#0x10000
0002ae  6002              STR      r2,[r0,#0]
0002b0  e003              B        |L1.698|
                  |L1.690|
;;;461      }
;;;462      else
;;;463      {
;;;464        /* Disable Debug Freeze */
;;;465        CANx->MCR &= ~MCR_DBF;
0002b2  6802              LDR      r2,[r0,#0]
0002b4  f4223280          BIC      r2,r2,#0x10000
0002b8  6002              STR      r2,[r0,#0]
                  |L1.698|
;;;466      }
;;;467    }
0002ba  4770              BX       lr
;;;468    
                          ENDP

                  CAN_TTComModeCmd PROC
;;;480      */
;;;481    void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
0002bc  b1e1              CBZ      r1,|L1.760|
;;;482    {
;;;483      /* Check the parameters */
;;;484      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;485      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;486      if (NewState != DISABLE)
;;;487      {
;;;488        /* Enable the TTCM mode */
;;;489        CANx->MCR |= CAN_MCR_TTCM;
0002be  6802              LDR      r2,[r0,#0]
0002c0  f0420280          ORR      r2,r2,#0x80
0002c4  6002              STR      r2,[r0,#0]
;;;490    
;;;491        /* Set TGT bits */
;;;492        CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
0002c6  f44f72c2          MOV      r2,#0x184
0002ca  5812              LDR      r2,[r2,r0]
0002cc  f4427380          ORR      r3,r2,#0x100
0002d0  f44f72c2          MOV      r2,#0x184
0002d4  5013              STR      r3,[r2,r0]
;;;493        CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
0002d6  f44f72ca          MOV      r2,#0x194
0002da  5812              LDR      r2,[r2,r0]
0002dc  f4427380          ORR      r3,r2,#0x100
0002e0  f44f72ca          MOV      r2,#0x194
0002e4  5013              STR      r3,[r2,r0]
;;;494        CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
0002e6  f44f72d2          MOV      r2,#0x1a4
0002ea  5812              LDR      r2,[r2,r0]
0002ec  f4427380          ORR      r3,r2,#0x100
0002f0  f44f72d2          MOV      r2,#0x1a4
0002f4  5013              STR      r3,[r2,r0]
0002f6  e01b              B        |L1.816|
                  |L1.760|
;;;495      }
;;;496      else
;;;497      {
;;;498        /* Disable the TTCM mode */
;;;499        CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
0002f8  6802              LDR      r2,[r0,#0]
0002fa  f0220280          BIC      r2,r2,#0x80
0002fe  6002              STR      r2,[r0,#0]
;;;500    
;;;501        /* Reset TGT bits */
;;;502        CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
000300  f44f72c2          MOV      r2,#0x184
000304  5812              LDR      r2,[r2,r0]
000306  f4227380          BIC      r3,r2,#0x100
00030a  f44f72c2          MOV      r2,#0x184
00030e  5013              STR      r3,[r2,r0]
;;;503        CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
000310  f44f72ca          MOV      r2,#0x194
000314  5812              LDR      r2,[r2,r0]
000316  f4227380          BIC      r3,r2,#0x100
00031a  f44f72ca          MOV      r2,#0x194
00031e  5013              STR      r3,[r2,r0]
;;;504        CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
000320  f44f72d2          MOV      r2,#0x1a4
000324  5812              LDR      r2,[r2,r0]
000326  f4227380          BIC      r3,r2,#0x100
00032a  f44f72d2          MOV      r2,#0x1a4
00032e  5013              STR      r3,[r2,r0]
                  |L1.816|
;;;505      }
;;;506    }
000330  4770              BX       lr
;;;507    /**
                          ENDP

                  CAN_Transmit PROC
;;;514      */
;;;515    uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
000332  b510              PUSH     {r4,lr}
;;;516    {
000334  4602              MOV      r2,r0
;;;517      uint8_t transmit_mailbox = 0;
000336  2000              MOVS     r0,#0
;;;518      /* Check the parameters */
;;;519      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;520      assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
;;;521      assert_param(IS_CAN_RTR(TxMessage->RTR));
;;;522      assert_param(IS_CAN_DLC(TxMessage->DLC));
;;;523    
;;;524      /* Select one empty transmit mailbox */
;;;525      if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
000338  6893              LDR      r3,[r2,#8]
00033a  f0036380          AND      r3,r3,#0x4000000
00033e  f1b36f80          CMP      r3,#0x4000000
000342  d100              BNE      |L1.838|
;;;526      {
;;;527        transmit_mailbox = 0;
000344  e010              B        |L1.872|
                  |L1.838|
;;;528      }
;;;529      else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
000346  6893              LDR      r3,[r2,#8]
000348  f0036300          AND      r3,r3,#0x8000000
00034c  f1b36f00          CMP      r3,#0x8000000
000350  d101              BNE      |L1.854|
;;;530      {
;;;531        transmit_mailbox = 1;
000352  2001              MOVS     r0,#1
000354  e008              B        |L1.872|
                  |L1.854|
;;;532      }
;;;533      else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
000356  6893              LDR      r3,[r2,#8]
000358  f0035380          AND      r3,r3,#0x10000000
00035c  f1b35f80          CMP      r3,#0x10000000
000360  d101              BNE      |L1.870|
;;;534      {
;;;535        transmit_mailbox = 2;
000362  2002              MOVS     r0,#2
000364  e000              B        |L1.872|
                  |L1.870|
;;;536      }
;;;537      else
;;;538      {
;;;539        transmit_mailbox = CAN_TxStatus_NoMailBox;
000366  2004              MOVS     r0,#4
                  |L1.872|
;;;540      }
;;;541    
;;;542      if (transmit_mailbox != CAN_TxStatus_NoMailBox)
000368  2804              CMP      r0,#4
00036a  d07e              BEQ      |L1.1130|
;;;543      {
;;;544        /* Set up the Id */
;;;545        CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
00036c  f50273c0          ADD      r3,r2,#0x180
000370  eb031300          ADD      r3,r3,r0,LSL #4
000374  681b              LDR      r3,[r3,#0]
000376  f0030401          AND      r4,r3,#1
00037a  f50273c0          ADD      r3,r2,#0x180
00037e  eb031300          ADD      r3,r3,r0,LSL #4
000382  601c              STR      r4,[r3,#0]
;;;546        if (TxMessage->IDE == CAN_Id_Standard)
000384  7a0b              LDRB     r3,[r1,#8]
000386  b97b              CBNZ     r3,|L1.936|
;;;547        {
;;;548          assert_param(IS_CAN_STDID(TxMessage->StdId));  
;;;549          CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
000388  7a4b              LDRB     r3,[r1,#9]
00038a  680c              LDR      r4,[r1,#0]
00038c  ea435344          ORR      r3,r3,r4,LSL #21
000390  f50274c0          ADD      r4,r2,#0x180
000394  eb041400          ADD      r4,r4,r0,LSL #4
000398  6824              LDR      r4,[r4,#0]
00039a  4323              ORRS     r3,r3,r4
00039c  f50274c0          ADD      r4,r2,#0x180
0003a0  eb041400          ADD      r4,r4,r0,LSL #4
0003a4  6023              STR      r3,[r4,#0]
0003a6  e010              B        |L1.970|
                  |L1.936|
;;;550                                                      TxMessage->RTR);
;;;551        }
;;;552        else
;;;553        {
;;;554          assert_param(IS_CAN_EXTID(TxMessage->ExtId));
;;;555          CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
0003a8  7a0b              LDRB     r3,[r1,#8]
0003aa  684c              LDR      r4,[r1,#4]
0003ac  ea4303c4          ORR      r3,r3,r4,LSL #3
0003b0  7a4c              LDRB     r4,[r1,#9]
0003b2  4323              ORRS     r3,r3,r4
0003b4  f50274c0          ADD      r4,r2,#0x180
0003b8  eb041400          ADD      r4,r4,r0,LSL #4
0003bc  6824              LDR      r4,[r4,#0]
0003be  4323              ORRS     r3,r3,r4
0003c0  f50274c0          ADD      r4,r2,#0x180
0003c4  eb041400          ADD      r4,r4,r0,LSL #4
0003c8  6023              STR      r3,[r4,#0]
                  |L1.970|
;;;556                                                      TxMessage->IDE | \
;;;557                                                      TxMessage->RTR);
;;;558        }
;;;559        
;;;560        /* Set up the DLC */
;;;561        TxMessage->DLC &= (uint8_t)0x0000000F;
0003ca  7a8b              LDRB     r3,[r1,#0xa]
0003cc  f003030f          AND      r3,r3,#0xf
0003d0  728b              STRB     r3,[r1,#0xa]
;;;562        CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
0003d2  f50273c0          ADD      r3,r2,#0x180
0003d6  eb031300          ADD      r3,r3,r0,LSL #4
0003da  685b              LDR      r3,[r3,#4]
0003dc  f023040f          BIC      r4,r3,#0xf
0003e0  f50273c0          ADD      r3,r2,#0x180
0003e4  eb031300          ADD      r3,r3,r0,LSL #4
0003e8  605c              STR      r4,[r3,#4]
;;;563        CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
0003ea  f50273c0          ADD      r3,r2,#0x180
0003ee  eb031300          ADD      r3,r3,r0,LSL #4
0003f2  685b              LDR      r3,[r3,#4]
0003f4  7a8c              LDRB     r4,[r1,#0xa]
0003f6  4323              ORRS     r3,r3,r4
0003f8  f50274c0          ADD      r4,r2,#0x180
0003fc  eb041400          ADD      r4,r4,r0,LSL #4
000400  6063              STR      r3,[r4,#4]
;;;564    
;;;565        /* Set up the data field */
;;;566        CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
000402  e00f              B        |L1.1060|
                  |L1.1028|
                          DCD      0x40006400
                  |L1.1032|
                          DCD      0x40006600
                  |L1.1036|
                          DCD      0x40006000
                  |L1.1040|
                          DCD      0x4000661c
                  |L1.1044|
                          DCD      0x4000660c
                  |L1.1048|
                          DCD      0x40006640
                  |L1.1052|
                          DCD      0x40006604
                  |L1.1056|
                          DCD      0x40006614
                  |L1.1060|
000424  7b8b              LDRB     r3,[r1,#0xe]
000426  061c              LSLS     r4,r3,#24
000428  7b4b              LDRB     r3,[r1,#0xd]
00042a  ea444403          ORR      r4,r4,r3,LSL #16
00042e  7b0b              LDRB     r3,[r1,#0xc]
000430  ea442303          ORR      r3,r4,r3,LSL #8
000434  7acc              LDRB     r4,[r1,#0xb]
000436  4323              ORRS     r3,r3,r4
000438  f50274c0          ADD      r4,r2,#0x180
00043c  eb041400          ADD      r4,r4,r0,LSL #4
000440  60a3              STR      r3,[r4,#8]
;;;567                                                 ((uint32_t)TxMessage->Data[2] << 16) |
;;;568                                                 ((uint32_t)TxMessage->Data[1] << 8) | 
;;;569                                                 ((uint32_t)TxMessage->Data[0]));
;;;570        CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
000442  7c8b              LDRB     r3,[r1,#0x12]
000444  061c              LSLS     r4,r3,#24
000446  7c4b              LDRB     r3,[r1,#0x11]
000448  ea444403          ORR      r4,r4,r3,LSL #16
00044c  7c0b              LDRB     r3,[r1,#0x10]
00044e  ea442303          ORR      r3,r4,r3,LSL #8
000452  7bcc              LDRB     r4,[r1,#0xf]
000454  4323              ORRS     r3,r3,r4
000456  f50274c0          ADD      r4,r2,#0x180
00045a  eb041400          ADD      r4,r4,r0,LSL #4
00045e  60e3              STR      r3,[r4,#0xc]
;;;571                                                 ((uint32_t)TxMessage->Data[6] << 16) |
;;;572                                                 ((uint32_t)TxMessage->Data[5] << 8) |
;;;573                                                 ((uint32_t)TxMessage->Data[4]));
;;;574        /* Request transmission */
;;;575        CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
000460  f50273c0          ADD      r3,r2,#0x180
000464  eb031300          ADD      r3,r3,r0,LSL #4
000468  e000              B        |L1.1132|
                  |L1.1130|
00046a  e007              B        |L1.1148|
                  |L1.1132|
00046c  681b              LDR      r3,[r3,#0]
00046e  f0430401          ORR      r4,r3,#1
000472  f50273c0          ADD      r3,r2,#0x180
000476  eb031300          ADD      r3,r3,r0,LSL #4
00047a  601c              STR      r4,[r3,#0]
                  |L1.1148|
;;;576      }
;;;577      return transmit_mailbox;
;;;578    }
00047c  bd10              POP      {r4,pc}
;;;579    
                          ENDP

                  CAN_TransmitStatus PROC
;;;588      */
;;;589    uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
00047e  b510              PUSH     {r4,lr}
;;;590    {
000480  4602              MOV      r2,r0
;;;591      uint32_t state = 0;
000482  2300              MOVS     r3,#0
;;;592    
;;;593      /* Check the parameters */
;;;594      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;595      assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
;;;596     
;;;597      switch (TransmitMailbox)
000484  b121              CBZ      r1,|L1.1168|
000486  2901              CMP      r1,#1
000488  d007              BEQ      |L1.1178|
00048a  2902              CMP      r1,#2
00048c  d10f              BNE      |L1.1198|
00048e  e009              B        |L1.1188|
                  |L1.1168|
;;;598      {
;;;599        case (CAN_TXMAILBOX_0): 
;;;600          state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
000490  6890              LDR      r0,[r2,#8]
000492  4cf8              LDR      r4,|L1.2164|
000494  ea000304          AND      r3,r0,r4
;;;601          break;
000498  e00b              B        |L1.1202|
                  |L1.1178|
;;;602        case (CAN_TXMAILBOX_1): 
;;;603          state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
00049a  6890              LDR      r0,[r2,#8]
00049c  4cf6              LDR      r4,|L1.2168|
00049e  ea000304          AND      r3,r0,r4
;;;604          break;
0004a2  e006              B        |L1.1202|
                  |L1.1188|
;;;605        case (CAN_TXMAILBOX_2): 
;;;606          state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
0004a4  6890              LDR      r0,[r2,#8]
0004a6  4cf5              LDR      r4,|L1.2172|
0004a8  ea000304          AND      r3,r0,r4
;;;607          break;
0004ac  e001              B        |L1.1202|
                  |L1.1198|
;;;608        default:
;;;609          state = CAN_TxStatus_Failed;
0004ae  2300              MOVS     r3,#0
;;;610          break;
0004b0  bf00              NOP      
                  |L1.1202|
0004b2  bf00              NOP                            ;601
;;;611      }
;;;612      switch (state)
0004b4  4cf2              LDR      r4,|L1.2176|
0004b6  1b18              SUBS     r0,r3,r4
0004b8  42a3              CMP      r3,r4
0004ba  d016              BEQ      |L1.1258|
0004bc  dc07              BGT      |L1.1230|
0004be  b183              CBZ      r3,|L1.1250|
0004c0  f06f6080          MVN      r0,#0x4000000
0004c4  1818              ADDS     r0,r3,r0
0004c6  d00e              BEQ      |L1.1254|
0004c8  2802              CMP      r0,#2
0004ca  d118              BNE      |L1.1278|
0004cc  e011              B        |L1.1266|
                  |L1.1230|
0004ce  f5b07f00          CMP      r0,#0x200
0004d2  d010              BEQ      |L1.1270|
0004d4  4ceb              LDR      r4,|L1.2180|
0004d6  1900              ADDS     r0,r0,r4
0004d8  d009              BEQ      |L1.1262|
0004da  f5b03f00          CMP      r0,#0x20000
0004de  d10e              BNE      |L1.1278|
0004e0  e00b              B        |L1.1274|
                  |L1.1250|
;;;613      {
;;;614          /* transmit pending  */
;;;615        case (0x0): state = CAN_TxStatus_Pending;
0004e2  2302              MOVS     r3,#2
;;;616          break;
0004e4  e00d              B        |L1.1282|
                  |L1.1254|
;;;617          /* transmit failed  */
;;;618         case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
0004e6  2300              MOVS     r3,#0
;;;619          break;
0004e8  e00b              B        |L1.1282|
                  |L1.1258|
;;;620         case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
0004ea  2300              MOVS     r3,#0
;;;621          break;
0004ec  e009              B        |L1.1282|
                  |L1.1262|
;;;622         case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
0004ee  2300              MOVS     r3,#0
;;;623          break;
0004f0  e007              B        |L1.1282|
                  |L1.1266|
;;;624          /* transmit succeeded  */
;;;625        case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
0004f2  2301              MOVS     r3,#1
;;;626          break;
0004f4  e005              B        |L1.1282|
                  |L1.1270|
;;;627        case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
0004f6  2301              MOVS     r3,#1
;;;628          break;
0004f8  e003              B        |L1.1282|
                  |L1.1274|
;;;629        case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
0004fa  2301              MOVS     r3,#1
;;;630          break;
0004fc  e001              B        |L1.1282|
                  |L1.1278|
;;;631        default: state = CAN_TxStatus_Failed;
0004fe  2300              MOVS     r3,#0
;;;632          break;
000500  bf00              NOP      
                  |L1.1282|
000502  bf00              NOP                            ;616
;;;633      }
;;;634      return (uint8_t) state;
000504  b2d8              UXTB     r0,r3
;;;635    }
000506  bd10              POP      {r4,pc}
;;;636    
                          ENDP

                  CAN_CancelTransmit PROC
;;;642      */
;;;643    void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
000508  b121              CBZ      r1,|L1.1300|
;;;644    {
;;;645      /* Check the parameters */
;;;646      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;647      assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
;;;648      /* abort transmission */
;;;649      switch (Mailbox)
00050a  2901              CMP      r1,#1
00050c  d007              BEQ      |L1.1310|
00050e  2902              CMP      r1,#2
000510  d10f              BNE      |L1.1330|
000512  e009              B        |L1.1320|
                  |L1.1300|
;;;650      {
;;;651        case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
000514  6882              LDR      r2,[r0,#8]
000516  f0420280          ORR      r2,r2,#0x80
00051a  6082              STR      r2,[r0,#8]
;;;652          break;
00051c  e00a              B        |L1.1332|
                  |L1.1310|
;;;653        case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
00051e  6882              LDR      r2,[r0,#8]
000520  f4424200          ORR      r2,r2,#0x8000
000524  6082              STR      r2,[r0,#8]
;;;654          break;
000526  e005              B        |L1.1332|
                  |L1.1320|
;;;655        case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
000528  6882              LDR      r2,[r0,#8]
00052a  f4420200          ORR      r2,r2,#0x800000
00052e  6082              STR      r2,[r0,#8]
;;;656          break;
000530  e000              B        |L1.1332|
                  |L1.1330|
;;;657        default:
;;;658          break;
000532  bf00              NOP      
                  |L1.1332|
000534  bf00              NOP                            ;652
;;;659      }
;;;660    }
000536  4770              BX       lr
;;;661    
                          ENDP

                  CAN_Receive PROC
;;;670      */
;;;671    void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
000538  b510              PUSH     {r4,lr}
;;;672    {
;;;673      /* Check the parameters */
;;;674      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;675      assert_param(IS_CAN_FIFO(FIFONumber));
;;;676      /* Get the Id */
;;;677      RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
00053a  f50073d8          ADD      r3,r0,#0x1b0
00053e  eb031301          ADD      r3,r3,r1,LSL #4
000542  681b              LDR      r3,[r3,#0]
000544  f0030304          AND      r3,r3,#4
000548  7213              STRB     r3,[r2,#8]
;;;678      if (RxMessage->IDE == CAN_Id_Standard)
00054a  7a13              LDRB     r3,[r2,#8]
00054c  b953              CBNZ     r3,|L1.1380|
;;;679      {
;;;680        RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
00054e  f50073d8          ADD      r3,r0,#0x1b0
000552  eb031301          ADD      r3,r3,r1,LSL #4
000556  681b              LDR      r3,[r3,#0]
000558  f24074ff          MOV      r4,#0x7ff
00055c  ea045353          AND      r3,r4,r3,LSR #21
000560  6013              STR      r3,[r2,#0]
000562  e009              B        |L1.1400|
                  |L1.1380|
;;;681      }
;;;682      else
;;;683      {
;;;684        RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
000564  f50073d8          ADD      r3,r0,#0x1b0
000568  eb031301          ADD      r3,r3,r1,LSL #4
00056c  681b              LDR      r3,[r3,#0]
00056e  f06f4460          MVN      r4,#0xe0000000
000572  ea0403d3          AND      r3,r4,r3,LSR #3
000576  6053              STR      r3,[r2,#4]
                  |L1.1400|
;;;685      }
;;;686      
;;;687      RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
000578  f50073d8          ADD      r3,r0,#0x1b0
00057c  eb031301          ADD      r3,r3,r1,LSL #4
000580  681b              LDR      r3,[r3,#0]
000582  f0030302          AND      r3,r3,#2
000586  7253              STRB     r3,[r2,#9]
;;;688      /* Get the DLC */
;;;689      RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
000588  f50073d8          ADD      r3,r0,#0x1b0
00058c  eb031301          ADD      r3,r3,r1,LSL #4
000590  685b              LDR      r3,[r3,#4]
000592  f003030f          AND      r3,r3,#0xf
000596  7293              STRB     r3,[r2,#0xa]
;;;690      /* Get the FMI */
;;;691      RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
000598  f50073d8          ADD      r3,r0,#0x1b0
00059c  eb031301          ADD      r3,r3,r1,LSL #4
0005a0  685b              LDR      r3,[r3,#4]
0005a2  0a1b              LSRS     r3,r3,#8
0005a4  74d3              STRB     r3,[r2,#0x13]
;;;692      /* Get the data field */
;;;693      RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
0005a6  f50073d8          ADD      r3,r0,#0x1b0
0005aa  eb031301          ADD      r3,r3,r1,LSL #4
0005ae  689b              LDR      r3,[r3,#8]
0005b0  72d3              STRB     r3,[r2,#0xb]
;;;694      RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
0005b2  f50073d8          ADD      r3,r0,#0x1b0
0005b6  eb031301          ADD      r3,r3,r1,LSL #4
0005ba  689b              LDR      r3,[r3,#8]
0005bc  0a1b              LSRS     r3,r3,#8
0005be  7313              STRB     r3,[r2,#0xc]
;;;695      RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
0005c0  f50073d8          ADD      r3,r0,#0x1b0
0005c4  eb031301          ADD      r3,r3,r1,LSL #4
0005c8  689b              LDR      r3,[r3,#8]
0005ca  0c1b              LSRS     r3,r3,#16
0005cc  7353              STRB     r3,[r2,#0xd]
;;;696      RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
0005ce  f50073d8          ADD      r3,r0,#0x1b0
0005d2  eb031301          ADD      r3,r3,r1,LSL #4
0005d6  689b              LDR      r3,[r3,#8]
0005d8  0e1b              LSRS     r3,r3,#24
0005da  7393              STRB     r3,[r2,#0xe]
;;;697      RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
0005dc  f50073d8          ADD      r3,r0,#0x1b0
0005e0  eb031301          ADD      r3,r3,r1,LSL #4
0005e4  68db              LDR      r3,[r3,#0xc]
0005e6  73d3              STRB     r3,[r2,#0xf]
;;;698      RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
0005e8  f50073d8          ADD      r3,r0,#0x1b0
0005ec  eb031301          ADD      r3,r3,r1,LSL #4
0005f0  68db              LDR      r3,[r3,#0xc]
0005f2  0a1b              LSRS     r3,r3,#8
0005f4  7413              STRB     r3,[r2,#0x10]
;;;699      RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
0005f6  f50073d8          ADD      r3,r0,#0x1b0
0005fa  eb031301          ADD      r3,r3,r1,LSL #4
0005fe  68db              LDR      r3,[r3,#0xc]
000600  0c1b              LSRS     r3,r3,#16
000602  7453              STRB     r3,[r2,#0x11]
;;;700      RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
000604  f50073d8          ADD      r3,r0,#0x1b0
000608  eb031301          ADD      r3,r3,r1,LSL #4
00060c  68db              LDR      r3,[r3,#0xc]
00060e  0e1b              LSRS     r3,r3,#24
000610  7493              STRB     r3,[r2,#0x12]
;;;701      /* Release the FIFO */
;;;702      /* Release FIFO0 */
;;;703      if (FIFONumber == CAN_FIFO0)
000612  b921              CBNZ     r1,|L1.1566|
;;;704      {
;;;705        CANx->RF0R |= CAN_RF0R_RFOM0;
000614  68c3              LDR      r3,[r0,#0xc]
000616  f0430320          ORR      r3,r3,#0x20
00061a  60c3              STR      r3,[r0,#0xc]
00061c  e003              B        |L1.1574|
                  |L1.1566|
;;;706      }
;;;707      /* Release FIFO1 */
;;;708      else /* FIFONumber == CAN_FIFO1 */
;;;709      {
;;;710        CANx->RF1R |= CAN_RF1R_RFOM1;
00061e  6903              LDR      r3,[r0,#0x10]
000620  f0430320          ORR      r3,r3,#0x20
000624  6103              STR      r3,[r0,#0x10]
                  |L1.1574|
;;;711      }
;;;712    }
000626  bd10              POP      {r4,pc}
;;;713    
                          ENDP

                  CAN_FIFORelease PROC
;;;719      */
;;;720    void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
000628  b921              CBNZ     r1,|L1.1588|
;;;721    {
;;;722      /* Check the parameters */
;;;723      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;724      assert_param(IS_CAN_FIFO(FIFONumber));
;;;725      /* Release FIFO0 */
;;;726      if (FIFONumber == CAN_FIFO0)
;;;727      {
;;;728        CANx->RF0R |= CAN_RF0R_RFOM0;
00062a  68c2              LDR      r2,[r0,#0xc]
00062c  f0420220          ORR      r2,r2,#0x20
000630  60c2              STR      r2,[r0,#0xc]
000632  e003              B        |L1.1596|
                  |L1.1588|
;;;729      }
;;;730      /* Release FIFO1 */
;;;731      else /* FIFONumber == CAN_FIFO1 */
;;;732      {
;;;733        CANx->RF1R |= CAN_RF1R_RFOM1;
000634  6902              LDR      r2,[r0,#0x10]
000636  f0420220          ORR      r2,r2,#0x20
00063a  6102              STR      r2,[r0,#0x10]
                  |L1.1596|
;;;734      }
;;;735    }
00063c  4770              BX       lr
;;;736    
                          ENDP

                  CAN_MessagePending PROC
;;;742      */
;;;743    uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
00063e  4602              MOV      r2,r0
;;;744    {
;;;745      uint8_t message_pending=0;
000640  2000              MOVS     r0,#0
;;;746      /* Check the parameters */
;;;747      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;748      assert_param(IS_CAN_FIFO(FIFONumber));
;;;749      if (FIFONumber == CAN_FIFO0)
000642  b919              CBNZ     r1,|L1.1612|
;;;750      {
;;;751        message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
000644  68d3              LDR      r3,[r2,#0xc]
000646  f0030003          AND      r0,r3,#3
00064a  e006              B        |L1.1626|
                  |L1.1612|
;;;752      }
;;;753      else if (FIFONumber == CAN_FIFO1)
00064c  2901              CMP      r1,#1
00064e  d103              BNE      |L1.1624|
;;;754      {
;;;755        message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
000650  6913              LDR      r3,[r2,#0x10]
000652  f0030003          AND      r0,r3,#3
000656  e000              B        |L1.1626|
                  |L1.1624|
;;;756      }
;;;757      else
;;;758      {
;;;759        message_pending = 0;
000658  2000              MOVS     r0,#0
                  |L1.1626|
;;;760      }
;;;761      return message_pending;
;;;762    }
00065a  4770              BX       lr
;;;763    
                          ENDP

                  CAN_OperatingModeRequest PROC
;;;773      */
;;;774    uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
00065c  b510              PUSH     {r4,lr}
;;;775    {
00065e  4602              MOV      r2,r0
000660  460b              MOV      r3,r1
;;;776      uint8_t status = CAN_ModeStatus_Failed;
000662  2000              MOVS     r0,#0
;;;777      
;;;778      /* Timeout for INAK or also for SLAK bits*/
;;;779      uint32_t timeout = INAK_TIMEOUT; 
000664  f64f71ff          MOV      r1,#0xffff
;;;780    
;;;781      /* Check the parameters */
;;;782      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;783      assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
;;;784    
;;;785      if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
000668  b9bb              CBNZ     r3,|L1.1690|
;;;786      {
;;;787        /* Request initialisation */
;;;788        CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
00066a  6814              LDR      r4,[r2,#0]
00066c  f0240402          BIC      r4,r4,#2
000670  f0440401          ORR      r4,r4,#1
000674  6014              STR      r4,[r2,#0]
;;;789    
;;;790        /* Wait the acknowledge */
;;;791        while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
000676  e000              B        |L1.1658|
                  |L1.1656|
;;;792        {
;;;793          timeout--;
000678  1e49              SUBS     r1,r1,#1
                  |L1.1658|
00067a  6854              LDR      r4,[r2,#4]            ;791
00067c  f0040403          AND      r4,r4,#3              ;791
000680  2c01              CMP      r4,#1                 ;791
000682  d001              BEQ      |L1.1672|
000684  2900              CMP      r1,#0                 ;791
000686  d1f7              BNE      |L1.1656|
                  |L1.1672|
;;;794        }
;;;795        if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
000688  6854              LDR      r4,[r2,#4]
00068a  f0040403          AND      r4,r4,#3
00068e  2c01              CMP      r4,#1
000690  d001              BEQ      |L1.1686|
;;;796        {
;;;797          status = CAN_ModeStatus_Failed;
000692  2000              MOVS     r0,#0
000694  e032              B        |L1.1788|
                  |L1.1686|
;;;798        }
;;;799        else
;;;800        {
;;;801          status = CAN_ModeStatus_Success;
000696  2001              MOVS     r0,#1
000698  e030              B        |L1.1788|
                  |L1.1690|
;;;802        }
;;;803      }
;;;804      else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
00069a  2b01              CMP      r3,#1
00069c  d113              BNE      |L1.1734|
;;;805      {
;;;806        /* Request leave initialisation and sleep mode  and enter Normal mode */
;;;807        CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
00069e  6814              LDR      r4,[r2,#0]
0006a0  f0240403          BIC      r4,r4,#3
0006a4  6014              STR      r4,[r2,#0]
;;;808    
;;;809        /* Wait the acknowledge */
;;;810        while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
0006a6  e000              B        |L1.1706|
                  |L1.1704|
;;;811        {
;;;812          timeout--;
0006a8  1e49              SUBS     r1,r1,#1
                  |L1.1706|
0006aa  6854              LDR      r4,[r2,#4]            ;810
0006ac  f0140f03          TST      r4,#3                 ;810
0006b0  d001              BEQ      |L1.1718|
0006b2  2900              CMP      r1,#0                 ;810
0006b4  d1f8              BNE      |L1.1704|
                  |L1.1718|
;;;813        }
;;;814        if ((CANx->MSR & CAN_MODE_MASK) != 0)
0006b6  6854              LDR      r4,[r2,#4]
0006b8  f0140f03          TST      r4,#3
0006bc  d001              BEQ      |L1.1730|
;;;815        {
;;;816          status = CAN_ModeStatus_Failed;
0006be  2000              MOVS     r0,#0
0006c0  e01c              B        |L1.1788|
                  |L1.1730|
;;;817        }
;;;818        else
;;;819        {
;;;820          status = CAN_ModeStatus_Success;
0006c2  2001              MOVS     r0,#1
0006c4  e01a              B        |L1.1788|
                  |L1.1734|
;;;821        }
;;;822      }
;;;823      else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
0006c6  2b02              CMP      r3,#2
0006c8  d117              BNE      |L1.1786|
;;;824      {
;;;825        /* Request Sleep mode */
;;;826        CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
0006ca  6814              LDR      r4,[r2,#0]
0006cc  f0240401          BIC      r4,r4,#1
0006d0  f0440402          ORR      r4,r4,#2
0006d4  6014              STR      r4,[r2,#0]
;;;827    
;;;828        /* Wait the acknowledge */
;;;829        while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
0006d6  e000              B        |L1.1754|
                  |L1.1752|
;;;830        {
;;;831          timeout--;
0006d8  1e49              SUBS     r1,r1,#1
                  |L1.1754|
0006da  6854              LDR      r4,[r2,#4]            ;829
0006dc  f0040403          AND      r4,r4,#3              ;829
0006e0  2c02              CMP      r4,#2                 ;829
0006e2  d001              BEQ      |L1.1768|
0006e4  2900              CMP      r1,#0                 ;829
0006e6  d1f7              BNE      |L1.1752|
                  |L1.1768|
;;;832        }
;;;833        if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
0006e8  6854              LDR      r4,[r2,#4]
0006ea  f0040403          AND      r4,r4,#3
0006ee  2c02              CMP      r4,#2
0006f0  d001              BEQ      |L1.1782|
;;;834        {
;;;835          status = CAN_ModeStatus_Failed;
0006f2  2000              MOVS     r0,#0
0006f4  e002              B        |L1.1788|
                  |L1.1782|
;;;836        }
;;;837        else
;;;838        {
;;;839          status = CAN_ModeStatus_Success;
0006f6  2001              MOVS     r0,#1
0006f8  e000              B        |L1.1788|
                  |L1.1786|
;;;840        }
;;;841      }
;;;842      else
;;;843      {
;;;844        status = CAN_ModeStatus_Failed;
0006fa  2000              MOVS     r0,#0
                  |L1.1788|
;;;845      }
;;;846    
;;;847      return  (uint8_t) status;
;;;848    }
0006fc  bd10              POP      {r4,pc}
;;;849    
                          ENDP

                  CAN_Sleep PROC
;;;855      */
;;;856    uint8_t CAN_Sleep(CAN_TypeDef* CANx)
0006fe  4601              MOV      r1,r0
;;;857    {
;;;858      uint8_t sleepstatus = CAN_Sleep_Failed;
000700  2000              MOVS     r0,#0
;;;859      
;;;860      /* Check the parameters */
;;;861      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;862        
;;;863      /* Request Sleep mode */
;;;864       CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
000702  680a              LDR      r2,[r1,#0]
000704  f0220201          BIC      r2,r2,#1
000708  f0420202          ORR      r2,r2,#2
00070c  600a              STR      r2,[r1,#0]
;;;865       
;;;866      /* Sleep mode status */
;;;867      if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
00070e  684a              LDR      r2,[r1,#4]
000710  f0020203          AND      r2,r2,#3
000714  2a02              CMP      r2,#2
000716  d100              BNE      |L1.1818|
;;;868      {
;;;869        /* Sleep mode not entered */
;;;870        sleepstatus =  CAN_Sleep_Ok;
000718  2001              MOVS     r0,#1
                  |L1.1818|
;;;871      }
;;;872      /* return sleep mode status */
;;;873       return (uint8_t)sleepstatus;
;;;874    }
00071a  4770              BX       lr
;;;875    
                          ENDP

                  CAN_WakeUp PROC
;;;881      */
;;;882    uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
00071c  4601              MOV      r1,r0
;;;883    {
;;;884      uint32_t wait_slak = SLAK_TIMEOUT;
00071e  f64f72ff          MOV      r2,#0xffff
;;;885      uint8_t wakeupstatus = CAN_WakeUp_Failed;
000722  2000              MOVS     r0,#0
;;;886      
;;;887      /* Check the parameters */
;;;888      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;889        
;;;890      /* Wake up request */
;;;891      CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
000724  680b              LDR      r3,[r1,#0]
000726  f0230302          BIC      r3,r3,#2
00072a  600b              STR      r3,[r1,#0]
;;;892        
;;;893      /* Sleep mode status */
;;;894      while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
00072c  e000              B        |L1.1840|
                  |L1.1838|
;;;895      {
;;;896       wait_slak--;
00072e  1e52              SUBS     r2,r2,#1
                  |L1.1840|
000730  684b              LDR      r3,[r1,#4]            ;894
000732  f0030302          AND      r3,r3,#2              ;894
000736  2b02              CMP      r3,#2                 ;894
000738  d101              BNE      |L1.1854|
00073a  2a00              CMP      r2,#0                 ;894
00073c  d1f7              BNE      |L1.1838|
                  |L1.1854|
;;;897      }
;;;898      if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
00073e  684b              LDR      r3,[r1,#4]
000740  f0030302          AND      r3,r3,#2
000744  2b02              CMP      r3,#2
000746  d000              BEQ      |L1.1866|
;;;899      {
;;;900       /* wake up done : Sleep mode exited */
;;;901        wakeupstatus = CAN_WakeUp_Ok;
000748  2001              MOVS     r0,#1
                  |L1.1866|
;;;902      }
;;;903      /* return wakeup status */
;;;904      return (uint8_t)wakeupstatus;
;;;905    }
00074a  4770              BX       lr
;;;906    
                          ENDP

                  CAN_GetLastErrorCode PROC
;;;921     
;;;922    uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
00074c  4601              MOV      r1,r0
;;;923    {
;;;924      uint8_t errorcode=0;
00074e  2000              MOVS     r0,#0
;;;925      
;;;926      /* Check the parameters */
;;;927      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;928      
;;;929      /* Get the error code*/
;;;930      errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
000750  698a              LDR      r2,[r1,#0x18]
000752  f0020070          AND      r0,r2,#0x70
;;;931      
;;;932      /* Return the error code*/
;;;933      return errorcode;
;;;934    }
000756  4770              BX       lr
;;;935    /**
                          ENDP

                  CAN_GetReceiveErrorCounter PROC
;;;945      */
;;;946    uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
000758  4601              MOV      r1,r0
;;;947    {
;;;948      uint8_t counter=0;
00075a  2000              MOVS     r0,#0
;;;949      
;;;950      /* Check the parameters */
;;;951      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;952      
;;;953      /* Get the Receive Error Counter*/
;;;954      counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
00075c  698a              LDR      r2,[r1,#0x18]
00075e  0e10              LSRS     r0,r2,#24
;;;955      
;;;956      /* Return the Receive Error Counter*/
;;;957      return counter;
;;;958    }
000760  4770              BX       lr
;;;959    
                          ENDP

                  CAN_GetLSBTransmitErrorCounter PROC
;;;965      */
;;;966    uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
000762  4601              MOV      r1,r0
;;;967    {
;;;968      uint8_t counter=0;
000764  2000              MOVS     r0,#0
;;;969      
;;;970      /* Check the parameters */
;;;971      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;972      
;;;973      /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
;;;974      counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
000766  698a              LDR      r2,[r1,#0x18]
000768  f3c24007          UBFX     r0,r2,#16,#8
;;;975      
;;;976      /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
;;;977      return counter;
;;;978    }
00076c  4770              BX       lr
;;;979    
                          ENDP

                  CAN_ITConfig PROC
;;;1002     */
;;;1003   void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
00076e  b11a              CBZ      r2,|L1.1912|
;;;1004   {
;;;1005     /* Check the parameters */
;;;1006     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1007     assert_param(IS_CAN_IT(CAN_IT));
;;;1008     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1009   
;;;1010     if (NewState != DISABLE)
;;;1011     {
;;;1012       /* Enable the selected CANx interrupt */
;;;1013       CANx->IER |= CAN_IT;
000770  6943              LDR      r3,[r0,#0x14]
000772  430b              ORRS     r3,r3,r1
000774  6143              STR      r3,[r0,#0x14]
000776  e002              B        |L1.1918|
                  |L1.1912|
;;;1014     }
;;;1015     else
;;;1016     {
;;;1017       /* Disable the selected CANx interrupt */
;;;1018       CANx->IER &= ~CAN_IT;
000778  6943              LDR      r3,[r0,#0x14]
00077a  438b              BICS     r3,r3,r1
00077c  6143              STR      r3,[r0,#0x14]
                  |L1.1918|
;;;1019     }
;;;1020   }
00077e  4770              BX       lr
;;;1021   /**
                          ENDP

                  CAN_GetFlagStatus PROC
;;;1042     */
;;;1043   FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
000780  b510              PUSH     {r4,lr}
;;;1044   {
000782  4602              MOV      r2,r0
;;;1045     FlagStatus bitstatus = RESET;
000784  2000              MOVS     r0,#0
;;;1046     
;;;1047     /* Check the parameters */
;;;1048     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1049     assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
;;;1050     
;;;1051   
;;;1052     if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
000786  f4110f70          TST      r1,#0xf00000
00078a  d008              BEQ      |L1.1950|
;;;1053     { 
;;;1054       /* Check the status of the specified CAN flag */
;;;1055       if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
00078c  6993              LDR      r3,[r2,#0x18]
00078e  f3c10413          UBFX     r4,r1,#0,#20
000792  4223              TST      r3,r4
000794  d001              BEQ      |L1.1946|
;;;1056       { 
;;;1057         /* CAN_FLAG is set */
;;;1058         bitstatus = SET;
000796  2001              MOVS     r0,#1
000798  e02d              B        |L1.2038|
                  |L1.1946|
;;;1059       }
;;;1060       else
;;;1061       { 
;;;1062         /* CAN_FLAG is reset */
;;;1063         bitstatus = RESET;
00079a  2000              MOVS     r0,#0
00079c  e02b              B        |L1.2038|
                  |L1.1950|
;;;1064       }
;;;1065     }
;;;1066     else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
00079e  f0117f80          TST      r1,#0x1000000
0007a2  d008              BEQ      |L1.1974|
;;;1067     { 
;;;1068       /* Check the status of the specified CAN flag */
;;;1069       if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
0007a4  6853              LDR      r3,[r2,#4]
0007a6  f3c10413          UBFX     r4,r1,#0,#20
0007aa  4223              TST      r3,r4
0007ac  d001              BEQ      |L1.1970|
;;;1070       { 
;;;1071         /* CAN_FLAG is set */
;;;1072         bitstatus = SET;
0007ae  2001              MOVS     r0,#1
0007b0  e021              B        |L1.2038|
                  |L1.1970|
;;;1073       }
;;;1074       else
;;;1075       { 
;;;1076         /* CAN_FLAG is reset */
;;;1077         bitstatus = RESET;
0007b2  2000              MOVS     r0,#0
0007b4  e01f              B        |L1.2038|
                  |L1.1974|
;;;1078       }
;;;1079     }
;;;1080     else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
0007b6  f0116f00          TST      r1,#0x8000000
0007ba  d008              BEQ      |L1.1998|
;;;1081     { 
;;;1082       /* Check the status of the specified CAN flag */
;;;1083       if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
0007bc  6893              LDR      r3,[r2,#8]
0007be  f3c10413          UBFX     r4,r1,#0,#20
0007c2  4223              TST      r3,r4
0007c4  d001              BEQ      |L1.1994|
;;;1084       { 
;;;1085         /* CAN_FLAG is set */
;;;1086         bitstatus = SET;
0007c6  2001              MOVS     r0,#1
0007c8  e015              B        |L1.2038|
                  |L1.1994|
;;;1087       }
;;;1088       else
;;;1089       { 
;;;1090         /* CAN_FLAG is reset */
;;;1091         bitstatus = RESET;
0007ca  2000              MOVS     r0,#0
0007cc  e013              B        |L1.2038|
                  |L1.1998|
;;;1092       }
;;;1093     }
;;;1094     else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
0007ce  f0117f00          TST      r1,#0x2000000
0007d2  d008              BEQ      |L1.2022|
;;;1095     { 
;;;1096       /* Check the status of the specified CAN flag */
;;;1097       if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
0007d4  68d3              LDR      r3,[r2,#0xc]
0007d6  f3c10413          UBFX     r4,r1,#0,#20
0007da  4223              TST      r3,r4
0007dc  d001              BEQ      |L1.2018|
;;;1098       { 
;;;1099         /* CAN_FLAG is set */
;;;1100         bitstatus = SET;
0007de  2001              MOVS     r0,#1
0007e0  e009              B        |L1.2038|
                  |L1.2018|
;;;1101       }
;;;1102       else
;;;1103       { 
;;;1104         /* CAN_FLAG is reset */
;;;1105         bitstatus = RESET;
0007e2  2000              MOVS     r0,#0
0007e4  e007              B        |L1.2038|
                  |L1.2022|
;;;1106       }
;;;1107     }
;;;1108     else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
;;;1109     { 
;;;1110       /* Check the status of the specified CAN flag */
;;;1111       if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
0007e6  6913              LDR      r3,[r2,#0x10]
0007e8  f3c10413          UBFX     r4,r1,#0,#20
0007ec  4223              TST      r3,r4
0007ee  d001              BEQ      |L1.2036|
;;;1112       { 
;;;1113         /* CAN_FLAG is set */
;;;1114         bitstatus = SET;
0007f0  2001              MOVS     r0,#1
0007f2  e000              B        |L1.2038|
                  |L1.2036|
;;;1115       }
;;;1116       else
;;;1117       { 
;;;1118         /* CAN_FLAG is reset */
;;;1119         bitstatus = RESET;
0007f4  2000              MOVS     r0,#0
                  |L1.2038|
;;;1120       }
;;;1121     }
;;;1122     /* Return the CAN_FLAG status */
;;;1123     return  bitstatus;
;;;1124   }
0007f6  bd10              POP      {r4,pc}
;;;1125   
                          ENDP

                  CAN_ClearFlag PROC
;;;1142     */
;;;1143   void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
0007f8  2200              MOVS     r2,#0
;;;1144   {
;;;1145     uint32_t flagtmp=0;
;;;1146     /* Check the parameters */
;;;1147     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1148     assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
;;;1149     
;;;1150     if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
0007fa  4b23              LDR      r3,|L1.2184|
0007fc  4299              CMP      r1,r3
0007fe  d102              BNE      |L1.2054|
;;;1151     {
;;;1152       /* Clear the selected CAN flags */
;;;1153       CANx->ESR = (uint32_t)RESET;
000800  2300              MOVS     r3,#0
000802  6183              STR      r3,[r0,#0x18]
000804  e011              B        |L1.2090|
                  |L1.2054|
;;;1154     }
;;;1155     else /* MSR or TSR or RF0R or RF1R */
;;;1156     {
;;;1157       flagtmp = CAN_FLAG & 0x000FFFFF;
000806  f3c10213          UBFX     r2,r1,#0,#20
;;;1158   
;;;1159       if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
00080a  f0117f00          TST      r1,#0x2000000
00080e  d001              BEQ      |L1.2068|
;;;1160       {
;;;1161         /* Receive Flags */
;;;1162         CANx->RF0R = (uint32_t)(flagtmp);
000810  60c2              STR      r2,[r0,#0xc]
000812  e00a              B        |L1.2090|
                  |L1.2068|
;;;1163       }
;;;1164       else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
000814  f0116f80          TST      r1,#0x4000000
000818  d001              BEQ      |L1.2078|
;;;1165       {
;;;1166         /* Receive Flags */
;;;1167         CANx->RF1R = (uint32_t)(flagtmp);
00081a  6102              STR      r2,[r0,#0x10]
00081c  e005              B        |L1.2090|
                  |L1.2078|
;;;1168       }
;;;1169       else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
00081e  f0116f00          TST      r1,#0x8000000
000822  d001              BEQ      |L1.2088|
;;;1170       {
;;;1171         /* Transmit Flags */
;;;1172         CANx->TSR = (uint32_t)(flagtmp);
000824  6082              STR      r2,[r0,#8]
000826  e000              B        |L1.2090|
                  |L1.2088|
;;;1173       }
;;;1174       else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
;;;1175       {
;;;1176         /* Operating mode Flags */
;;;1177         CANx->MSR = (uint32_t)(flagtmp);
000828  6042              STR      r2,[r0,#4]
                  |L1.2090|
;;;1178       }
;;;1179     }
;;;1180   }
00082a  4770              BX       lr
;;;1181   
                          ENDP

                  CheckITStatus PROC
;;;1384     */
;;;1385   static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
00082c  4602              MOV      r2,r0
;;;1386   {
;;;1387     ITStatus pendingbitstatus = RESET;
00082e  2000              MOVS     r0,#0
;;;1388     
;;;1389     if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
000830  420a              TST      r2,r1
000832  d001              BEQ      |L1.2104|
;;;1390     {
;;;1391       /* CAN_IT is set */
;;;1392       pendingbitstatus = SET;
000834  2001              MOVS     r0,#1
000836  e000              B        |L1.2106|
                  |L1.2104|
;;;1393     }
;;;1394     else
;;;1395     {
;;;1396       /* CAN_IT is reset */
;;;1397       pendingbitstatus = RESET;
000838  2000              MOVS     r0,#0
                  |L1.2106|
;;;1398     }
;;;1399     return pendingbitstatus;
;;;1400   }
00083a  4770              BX       lr
;;;1401   
                          ENDP

                  CAN_GetITStatus PROC
;;;1202     */
;;;1203   ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
00083c  b570              PUSH     {r4-r6,lr}
;;;1204   {
00083e  4604              MOV      r4,r0
000840  460d              MOV      r5,r1
;;;1205     ITStatus itstatus = RESET;
000842  2600              MOVS     r6,#0
;;;1206     /* Check the parameters */
;;;1207     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1208     assert_param(IS_CAN_IT(CAN_IT));
;;;1209     
;;;1210     /* check the enable interrupt bit */
;;;1211    if((CANx->IER & CAN_IT) != RESET)
000844  6960              LDR      r0,[r4,#0x14]
000846  4228              TST      r0,r5
000848  d071              BEQ      |L1.2350|
;;;1212    {
;;;1213      /* in case the Interrupt is enabled, .... */
;;;1214       switch (CAN_IT)
00084a  f5b57f80          CMP      r5,#0x100
00084e  d068              BEQ      |L1.2338|
000850  dc1c              BGT      |L1.2188|
000852  2d08              CMP      r5,#8
000854  d041              BEQ      |L1.2266|
000856  dc06              BGT      |L1.2150|
000858  2d01              CMP      r5,#1
00085a  d02c              BEQ      |L1.2230|
00085c  2d02              CMP      r5,#2
00085e  d030              BEQ      |L1.2242|
000860  2d04              CMP      r5,#4
000862  d17e              BNE      |L1.2402|
000864  e033              B        |L1.2254|
                  |L1.2150|
000866  2d10              CMP      r5,#0x10
000868  d03d              BEQ      |L1.2278|
00086a  2d20              CMP      r5,#0x20
00086c  d041              BEQ      |L1.2290|
00086e  2d40              CMP      r5,#0x40
000870  d177              BNE      |L1.2402|
000872  e044              B        |L1.2302|
                  |L1.2164|
                          DCD      0x04000003
                  |L1.2168|
                          DCD      0x08000300
                  |L1.2172|
                          DCD      0x10030000
                  |L1.2176|
                          DCD      0x08000100
                  |L1.2180|
                          DCD      0xf7ff0100
                  |L1.2184|
                          DCD      0x30f00070
                  |L1.2188|
00088c  f5b54f00          CMP      r5,#0x8000
000890  d061              BEQ      |L1.2390|
000892  dc09              BGT      |L1.2216|
000894  f5b57f00          CMP      r5,#0x200
000898  d04a              BEQ      |L1.2352|
00089a  f5b56f80          CMP      r5,#0x400
00089e  d04d              BEQ      |L1.2364|
0008a0  f5b56f00          CMP      r5,#0x800
0008a4  d15d              BNE      |L1.2402|
0008a6  e050              B        |L1.2378|
                  |L1.2216|
0008a8  f5b53f80          CMP      r5,#0x10000
0008ac  d02d              BEQ      |L1.2314|
0008ae  f5b53f00          CMP      r5,#0x20000
0008b2  d156              BNE      |L1.2402|
0008b4  e02f              B        |L1.2326|
                  |L1.2230|
;;;1215       {
;;;1216         case CAN_IT_TME:
;;;1217                  /* Check CAN_TSR_RQCPx bits */
;;;1218   	             itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
0008b6  68a0              LDR      r0,[r4,#8]
0008b8  4955              LDR      r1,|L1.2576|
0008ba  f7fffffe          BL       CheckITStatus
0008be  4606              MOV      r6,r0
;;;1219   	      break;
0008c0  e051              B        |L1.2406|
                  |L1.2242|
;;;1220         case CAN_IT_FMP0:
;;;1221                  /* Check CAN_RF0R_FMP0 bit */
;;;1222   	             itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
0008c2  68e0              LDR      r0,[r4,#0xc]
0008c4  2103              MOVS     r1,#3
0008c6  f7fffffe          BL       CheckITStatus
0008ca  4606              MOV      r6,r0
;;;1223   	      break;
0008cc  e04b              B        |L1.2406|
                  |L1.2254|
;;;1224         case CAN_IT_FF0:
;;;1225                  /* Check CAN_RF0R_FULL0 bit */
;;;1226                  itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
0008ce  68e0              LDR      r0,[r4,#0xc]
0008d0  2108              MOVS     r1,#8
0008d2  f7fffffe          BL       CheckITStatus
0008d6  4606              MOV      r6,r0
;;;1227   	      break;
0008d8  e045              B        |L1.2406|
                  |L1.2266|
;;;1228         case CAN_IT_FOV0:
;;;1229                  /* Check CAN_RF0R_FOVR0 bit */
;;;1230                  itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
0008da  68e0              LDR      r0,[r4,#0xc]
0008dc  2110              MOVS     r1,#0x10
0008de  f7fffffe          BL       CheckITStatus
0008e2  4606              MOV      r6,r0
;;;1231   	      break;
0008e4  e03f              B        |L1.2406|
                  |L1.2278|
;;;1232         case CAN_IT_FMP1:
;;;1233                  /* Check CAN_RF1R_FMP1 bit */
;;;1234                  itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
0008e6  6920              LDR      r0,[r4,#0x10]
0008e8  2103              MOVS     r1,#3
0008ea  f7fffffe          BL       CheckITStatus
0008ee  4606              MOV      r6,r0
;;;1235   	      break;
0008f0  e039              B        |L1.2406|
                  |L1.2290|
;;;1236         case CAN_IT_FF1:
;;;1237                  /* Check CAN_RF1R_FULL1 bit */
;;;1238   	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
0008f2  6920              LDR      r0,[r4,#0x10]
0008f4  2108              MOVS     r1,#8
0008f6  f7fffffe          BL       CheckITStatus
0008fa  4606              MOV      r6,r0
;;;1239   	      break;
0008fc  e033              B        |L1.2406|
                  |L1.2302|
;;;1240         case CAN_IT_FOV1:
;;;1241                  /* Check CAN_RF1R_FOVR1 bit */
;;;1242   	             itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
0008fe  6920              LDR      r0,[r4,#0x10]
000900  2110              MOVS     r1,#0x10
000902  f7fffffe          BL       CheckITStatus
000906  4606              MOV      r6,r0
;;;1243   	      break;
000908  e02d              B        |L1.2406|
                  |L1.2314|
;;;1244         case CAN_IT_WKU:
;;;1245                  /* Check CAN_MSR_WKUI bit */
;;;1246                  itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
00090a  6860              LDR      r0,[r4,#4]
00090c  2108              MOVS     r1,#8
00090e  f7fffffe          BL       CheckITStatus
000912  4606              MOV      r6,r0
;;;1247   	      break;
000914  e027              B        |L1.2406|
                  |L1.2326|
;;;1248         case CAN_IT_SLK:
;;;1249                  /* Check CAN_MSR_SLAKI bit */
;;;1250   	             itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
000916  6860              LDR      r0,[r4,#4]
000918  2110              MOVS     r1,#0x10
00091a  f7fffffe          BL       CheckITStatus
00091e  4606              MOV      r6,r0
;;;1251   	      break;
000920  e021              B        |L1.2406|
                  |L1.2338|
;;;1252         case CAN_IT_EWG:
;;;1253                  /* Check CAN_ESR_EWGF bit */
;;;1254   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
000922  69a0              LDR      r0,[r4,#0x18]
000924  2101              MOVS     r1,#1
000926  f7fffffe          BL       CheckITStatus
00092a  4606              MOV      r6,r0
;;;1255   	      break;
00092c  e01b              B        |L1.2406|
                  |L1.2350|
00092e  e01b              B        |L1.2408|
                  |L1.2352|
;;;1256         case CAN_IT_EPV:
;;;1257                  /* Check CAN_ESR_EPVF bit */
;;;1258   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
000930  69a0              LDR      r0,[r4,#0x18]
000932  2102              MOVS     r1,#2
000934  f7fffffe          BL       CheckITStatus
000938  4606              MOV      r6,r0
;;;1259   	      break;
00093a  e014              B        |L1.2406|
                  |L1.2364|
;;;1260         case CAN_IT_BOF:
;;;1261                  /* Check CAN_ESR_BOFF bit */
;;;1262   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
00093c  69a0              LDR      r0,[r4,#0x18]
00093e  2104              MOVS     r1,#4
000940  f7fffffe          BL       CheckITStatus
000944  4606              MOV      r6,r0
;;;1263   	      break;
000946  e00e              B        |L1.2406|
000948  e00b              B        |L1.2402|
                  |L1.2378|
;;;1264         case CAN_IT_LEC:
;;;1265                  /* Check CAN_ESR_LEC bit */
;;;1266   	             itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
00094a  69a0              LDR      r0,[r4,#0x18]
00094c  2170              MOVS     r1,#0x70
00094e  f7fffffe          BL       CheckITStatus
000952  4606              MOV      r6,r0
;;;1267   	      break;
000954  e007              B        |L1.2406|
                  |L1.2390|
;;;1268         case CAN_IT_ERR:
;;;1269                  /* Check CAN_MSR_ERRI bit */ 
;;;1270                  itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
000956  6860              LDR      r0,[r4,#4]
000958  2104              MOVS     r1,#4
00095a  f7fffffe          BL       CheckITStatus
00095e  4606              MOV      r6,r0
;;;1271   	      break;
000960  e001              B        |L1.2406|
                  |L1.2402|
;;;1272         default :
;;;1273                  /* in case of error, return RESET */
;;;1274                 itstatus = RESET;
000962  2600              MOVS     r6,#0
;;;1275                 break;
000964  bf00              NOP      
                  |L1.2406|
000966  e000              B        |L1.2410|
                  |L1.2408|
;;;1276       }
;;;1277     }
;;;1278     else
;;;1279     {
;;;1280      /* in case the Interrupt is not enabled, return RESET */
;;;1281       itstatus  = RESET;
000968  2600              MOVS     r6,#0
                  |L1.2410|
;;;1282     }
;;;1283     
;;;1284     /* Return the CAN_IT status */
;;;1285     return  itstatus;
00096a  4630              MOV      r0,r6
;;;1286   }
00096c  bd70              POP      {r4-r6,pc}
;;;1287   
                          ENDP

                  CAN_ClearITPendingBit PROC
;;;1305     */
;;;1306   void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
00096e  f5b17f00          CMP      r1,#0x200
;;;1307   {
;;;1308     /* Check the parameters */
;;;1309     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1310     assert_param(IS_CAN_CLEAR_IT(CAN_IT));
;;;1311   
;;;1312     switch (CAN_IT)
000972  d03a              BEQ      |L1.2538|
000974  dc0f              BGT      |L1.2454|
000976  2920              CMP      r1,#0x20
000978  d028              BEQ      |L1.2508|
00097a  dc06              BGT      |L1.2442|
00097c  2901              CMP      r1,#1
00097e  d01c              BEQ      |L1.2490|
000980  2904              CMP      r1,#4
000982  d01d              BEQ      |L1.2496|
000984  2908              CMP      r1,#8
000986  d140              BNE      |L1.2570|
000988  e01d              B        |L1.2502|
                  |L1.2442|
00098a  2940              CMP      r1,#0x40
00098c  d021              BEQ      |L1.2514|
00098e  f5b17f80          CMP      r1,#0x100
000992  d13a              BNE      |L1.2570|
000994  e026              B        |L1.2532|
                  |L1.2454|
000996  f5b14f00          CMP      r1,#0x8000
00099a  d031              BEQ      |L1.2560|
00099c  dc06              BGT      |L1.2476|
00099e  f5b16f80          CMP      r1,#0x400
0009a2  d025              BEQ      |L1.2544|
0009a4  f5b16f00          CMP      r1,#0x800
0009a8  d12f              BNE      |L1.2570|
0009aa  e024              B        |L1.2550|
                  |L1.2476|
0009ac  f5b13f80          CMP      r1,#0x10000
0009b0  d012              BEQ      |L1.2520|
0009b2  f5b13f00          CMP      r1,#0x20000
0009b6  d128              BNE      |L1.2570|
0009b8  e011              B        |L1.2526|
                  |L1.2490|
;;;1313     {
;;;1314         case CAN_IT_TME:
;;;1315                 /* Clear CAN_TSR_RQCPx (rc_w1)*/
;;;1316   	      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
0009ba  4a15              LDR      r2,|L1.2576|
0009bc  6082              STR      r2,[r0,#8]
;;;1317   	      break;
0009be  e025              B        |L1.2572|
                  |L1.2496|
;;;1318         case CAN_IT_FF0:
;;;1319                 /* Clear CAN_RF0R_FULL0 (rc_w1)*/
;;;1320   	      CANx->RF0R = CAN_RF0R_FULL0; 
0009c0  2208              MOVS     r2,#8
0009c2  60c2              STR      r2,[r0,#0xc]
;;;1321   	      break;
0009c4  e022              B        |L1.2572|
                  |L1.2502|
;;;1322         case CAN_IT_FOV0:
;;;1323                 /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
;;;1324   	      CANx->RF0R = CAN_RF0R_FOVR0; 
0009c6  2210              MOVS     r2,#0x10
0009c8  60c2              STR      r2,[r0,#0xc]
;;;1325   	      break;
0009ca  e01f              B        |L1.2572|
                  |L1.2508|
;;;1326         case CAN_IT_FF1:
;;;1327                 /* Clear CAN_RF1R_FULL1 (rc_w1)*/
;;;1328   	      CANx->RF1R = CAN_RF1R_FULL1;  
0009cc  2208              MOVS     r2,#8
0009ce  6102              STR      r2,[r0,#0x10]
;;;1329   	      break;
0009d0  e01c              B        |L1.2572|
                  |L1.2514|
;;;1330         case CAN_IT_FOV1:
;;;1331                 /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
;;;1332   	      CANx->RF1R = CAN_RF1R_FOVR1; 
0009d2  2210              MOVS     r2,#0x10
0009d4  6102              STR      r2,[r0,#0x10]
;;;1333   	      break;
0009d6  e019              B        |L1.2572|
                  |L1.2520|
;;;1334         case CAN_IT_WKU:
;;;1335                 /* Clear CAN_MSR_WKUI (rc_w1)*/
;;;1336   	      CANx->MSR = CAN_MSR_WKUI;  
0009d8  2208              MOVS     r2,#8
0009da  6042              STR      r2,[r0,#4]
;;;1337   	      break;
0009dc  e016              B        |L1.2572|
                  |L1.2526|
;;;1338         case CAN_IT_SLK:
;;;1339                 /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
;;;1340   	      CANx->MSR = CAN_MSR_SLAKI;   
0009de  2210              MOVS     r2,#0x10
0009e0  6042              STR      r2,[r0,#4]
;;;1341   	      break;
0009e2  e013              B        |L1.2572|
                  |L1.2532|
;;;1342         case CAN_IT_EWG:
;;;1343                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1344   	      CANx->MSR = CAN_MSR_ERRI;
0009e4  2204              MOVS     r2,#4
0009e6  6042              STR      r2,[r0,#4]
;;;1345                 /* Note : the corresponding Flag is cleared by hardware depending 
;;;1346                           of the CAN Bus status*/ 
;;;1347   	      break;
0009e8  e010              B        |L1.2572|
                  |L1.2538|
;;;1348         case CAN_IT_EPV:
;;;1349                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1350   	      CANx->MSR = CAN_MSR_ERRI; 
0009ea  2204              MOVS     r2,#4
0009ec  6042              STR      r2,[r0,#4]
;;;1351                 /* Note : the corresponding Flag is cleared by hardware depending 
;;;1352                           of the CAN Bus status*/
;;;1353   	      break;
0009ee  e00d              B        |L1.2572|
                  |L1.2544|
;;;1354         case CAN_IT_BOF:
;;;1355                 /* Clear CAN_MSR_ERRI (rc_w1) */ 
;;;1356   	      CANx->MSR = CAN_MSR_ERRI; 
0009f0  2204              MOVS     r2,#4
0009f2  6042              STR      r2,[r0,#4]
;;;1357                 /* Note : the corresponding Flag is cleared by hardware depending 
;;;1358                           of the CAN Bus status*/
;;;1359   	      break;
0009f4  e00a              B        |L1.2572|
                  |L1.2550|
;;;1360         case CAN_IT_LEC:
;;;1361                 /*  Clear LEC bits */
;;;1362   	      CANx->ESR = RESET; 
0009f6  2200              MOVS     r2,#0
0009f8  6182              STR      r2,[r0,#0x18]
;;;1363                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1364   	      CANx->MSR = CAN_MSR_ERRI; 
0009fa  2204              MOVS     r2,#4
0009fc  6042              STR      r2,[r0,#4]
;;;1365   	      break;
0009fe  e005              B        |L1.2572|
                  |L1.2560|
;;;1366         case CAN_IT_ERR:
;;;1367                 /*Clear LEC bits */
;;;1368   	      CANx->ESR = RESET; 
000a00  2200              MOVS     r2,#0
000a02  6182              STR      r2,[r0,#0x18]
;;;1369                 /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1370   	      CANx->MSR = CAN_MSR_ERRI; 
000a04  2204              MOVS     r2,#4
000a06  6042              STR      r2,[r0,#4]
;;;1371   	      /* Note : BOFF, EPVF and EWGF Flags are cleared by hardware depending 
;;;1372                     of the CAN Bus status*/
;;;1373   	      break;
000a08  e000              B        |L1.2572|
                  |L1.2570|
;;;1374         default :
;;;1375   	      break;
000a0a  bf00              NOP      
                  |L1.2572|
000a0c  bf00              NOP                            ;1317
;;;1376      }
;;;1377   }
000a0e  4770              BX       lr
;;;1378   
                          ENDP

                  |L1.2576|
                          DCD      0x00010101
