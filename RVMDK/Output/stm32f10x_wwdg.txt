; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\Output\stm32f10x_wwdg.o --depend=.\Output\stm32f10x_wwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\User -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Output\stm32f10x_wwdg.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_wwdg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  WWDG_DeInit PROC
;;;101      */
;;;102    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;103    {
;;;104      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;105      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f44f6000          MOV      r0,#0x800
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;106    }
000014  bd10              POP      {r4,pc}
;;;107    
                          ENDP

                  WWDG_SetPrescaler PROC
;;;117      */
;;;118    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000016  2100              MOVS     r1,#0
;;;119    {
;;;120      uint32_t tmpreg = 0;
;;;121      /* Check the parameters */
;;;122      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;123      /* Clear WDGTB[1:0] bits */
;;;124      tmpreg = WWDG->CFR & CFR_WDGTB_Mask;
000018  4a16              LDR      r2,|L1.116|
00001a  6812              LDR      r2,[r2,#0]
00001c  f42271c0          BIC      r1,r2,#0x180
;;;125      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;126      tmpreg |= WWDG_Prescaler;
000020  ea410100          ORR      r1,r1,r0
;;;127      /* Store the new value */
;;;128      WWDG->CFR = tmpreg;
000024  4a14              LDR      r2,|L1.120|
000026  f8c21c04          STR      r1,[r2,#0xc04]
;;;129    }
00002a  4770              BX       lr
;;;130    
                          ENDP

                  WWDG_SetWindowValue PROC
;;;136      */
;;;137    void WWDG_SetWindowValue(uint8_t WindowValue)
00002c  2100              MOVS     r1,#0
;;;138    {
;;;139      __IO uint32_t tmpreg = 0;
;;;140    
;;;141      /* Check the parameters */
;;;142      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;143      /* Clear W[6:0] bits */
;;;144    
;;;145      tmpreg = WWDG->CFR & CFR_W_Mask;
00002e  4a11              LDR      r2,|L1.116|
000030  6812              LDR      r2,[r2,#0]
000032  f022017f          BIC      r1,r2,#0x7f
;;;146    
;;;147      /* Set W[6:0] bits according to WindowValue value */
;;;148      tmpreg |= WindowValue & (uint32_t) BIT_Mask;
000036  f000027f          AND      r2,r0,#0x7f
00003a  ea420101          ORR      r1,r2,r1
;;;149    
;;;150      /* Store the new value */
;;;151      WWDG->CFR = tmpreg;
00003e  4a0e              LDR      r2,|L1.120|
000040  f8c21c04          STR      r1,[r2,#0xc04]
;;;152    }
000044  4770              BX       lr
;;;153    
                          ENDP

                  WWDG_EnableIT PROC
;;;158      */
;;;159    void WWDG_EnableIT(void)
000046  2001              MOVS     r0,#1
;;;160    {
;;;161      *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
000048  490c              LDR      r1,|L1.124|
00004a  6008              STR      r0,[r1,#0]
;;;162    }
00004c  4770              BX       lr
;;;163    
                          ENDP

                  WWDG_SetCounter PROC
;;;169      */
;;;170    void WWDG_SetCounter(uint8_t Counter)
00004e  f000017f          AND      r1,r0,#0x7f
;;;171    {
;;;172      /* Check the parameters */
;;;173      assert_param(IS_WWDG_COUNTER(Counter));
;;;174      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;175         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;176      WWDG->CR = Counter & BIT_Mask;
000052  4a0b              LDR      r2,|L1.128|
000054  6011              STR      r1,[r2,#0]
;;;177    }
000056  4770              BX       lr
;;;178    
                          ENDP

                  WWDG_Enable PROC
;;;184      */
;;;185    void WWDG_Enable(uint8_t Counter)
000058  f0400180          ORR      r1,r0,#0x80
;;;186    {
;;;187      /* Check the parameters */
;;;188      assert_param(IS_WWDG_COUNTER(Counter));
;;;189      WWDG->CR = CR_WDGA_Set | Counter;
00005c  4a08              LDR      r2,|L1.128|
00005e  6011              STR      r1,[r2,#0]
;;;190    }
000060  4770              BX       lr
;;;191    
                          ENDP

                  WWDG_GetFlagStatus PROC
;;;196      */
;;;197    FlagStatus WWDG_GetFlagStatus(void)
000062  4808              LDR      r0,|L1.132|
;;;198    {
;;;199      return (FlagStatus)(WWDG->SR);
000064  6800              LDR      r0,[r0,#0]
000066  b2c0              UXTB     r0,r0
;;;200    }
000068  4770              BX       lr
;;;201    
                          ENDP

                  WWDG_ClearFlag PROC
;;;206      */
;;;207    void WWDG_ClearFlag(void)
00006a  2000              MOVS     r0,#0
;;;208    {
;;;209      WWDG->SR = (uint32_t)RESET;
00006c  4905              LDR      r1,|L1.132|
00006e  6008              STR      r0,[r1,#0]
;;;210    }
000070  4770              BX       lr
;;;211    
                          ENDP

000072  0000              DCW      0x0000
                  |L1.116|
                          DCD      0x40002c04
                  |L1.120|
                          DCD      0x40002000
                  |L1.124|
                          DCD      0x420580a4
                  |L1.128|
                          DCD      0x40002c00
                  |L1.132|
                          DCD      0x40002c08
