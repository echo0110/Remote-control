; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\system_stm32f10x.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\system_stm32f10x.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\STM32F10x_StdPeriph_Driver\src -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -IC:\Users\Administrator\Desktop\ssr-accounts\handheld_device\RVMDK\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\system_stm32f10x.crf ..\User\system_stm32f10x.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=1

                  SetSysClock PROC
;;;357      */
;;;358    static void SetSysClock(void)
000000  b510              PUSH     {r4,lr}
;;;359    {
;;;360    #ifdef SYSCLK_FREQ_HSE
;;;361      SetSysClockToHSE();
;;;362    #elif defined SYSCLK_FREQ_24MHz
;;;363      SetSysClockTo24();
;;;364    #elif defined SYSCLK_FREQ_36MHz
;;;365      SetSysClockTo36();
;;;366    #elif defined SYSCLK_FREQ_48MHz
;;;367      SetSysClockTo48();
;;;368    #elif defined SYSCLK_FREQ_56MHz
;;;369      SetSysClockTo56();  
;;;370    #elif defined SYSCLK_FREQ_72MHz
;;;371      SetSysClockTo72();
000002  f7fffffe          BL       SetSysClockTo72
;;;372    #endif
;;;373     
;;;374     /* If none of the define above is enabled, the HSI is used as System clock
;;;375        source (default after reset) */ 
;;;376    }
000006  bd10              POP      {r4,pc}
;;;377    
                          ENDP


                          AREA ||i.SetSysClockTo72||, CODE, READONLY, ALIGN=2

                  SetSysClockTo72 PROC
;;;925      */
;;;926    static void SetSysClockTo72(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;927    {
;;;928      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;929      
;;;930      /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
;;;931      /* Enable HSE */    
;;;932      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000008  4833              LDR      r0,|L2.216|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  4931              LDR      r1,|L2.216|
000012  6008              STR      r0,[r1,#0]
;;;933     
;;;934      /* Wait till HSE is ready and if Time out is reached exit */
;;;935      do
000014  bf00              NOP      
                  |L2.22|
;;;936      {
;;;937        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000016  4830              LDR      r0,|L2.216|
000018  6800              LDR      r0,[r0,#0]
00001a  f4003000          AND      r0,r0,#0x20000
00001e  9000              STR      r0,[sp,#0]
;;;938        StartUpCounter++;  
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  9001              STR      r0,[sp,#4]
;;;939      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000026  9800              LDR      r0,[sp,#0]
000028  b918              CBNZ     r0,|L2.50|
00002a  9801              LDR      r0,[sp,#4]
00002c  f5b06fa0          CMP      r0,#0x500
000030  d1f1              BNE      |L2.22|
                  |L2.50|
;;;940    
;;;941      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000032  4829              LDR      r0,|L2.216|
000034  6800              LDR      r0,[r0,#0]
000036  f4003000          AND      r0,r0,#0x20000
00003a  b110              CBZ      r0,|L2.66|
;;;942      {
;;;943        HSEStatus = (uint32_t)0x01;
00003c  2001              MOVS     r0,#1
00003e  9000              STR      r0,[sp,#0]
000040  e001              B        |L2.70|
                  |L2.66|
;;;944      }
;;;945      else
;;;946      {
;;;947        HSEStatus = (uint32_t)0x00;
000042  2000              MOVS     r0,#0
000044  9000              STR      r0,[sp,#0]
                  |L2.70|
;;;948      }  
;;;949    
;;;950      if (HSEStatus == (uint32_t)0x01)
000046  9800              LDR      r0,[sp,#0]
000048  2801              CMP      r0,#1
00004a  d143              BNE      |L2.212|
;;;951      {
;;;952        /* Enable Prefetch Buffer */
;;;953        FLASH->ACR |= FLASH_ACR_PRFTBE;
00004c  4823              LDR      r0,|L2.220|
00004e  6800              LDR      r0,[r0,#0]
000050  f0400010          ORR      r0,r0,#0x10
000054  4921              LDR      r1,|L2.220|
000056  6008              STR      r0,[r1,#0]
;;;954    
;;;955        /* Flash 2 wait state */
;;;956        FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
000058  4608              MOV      r0,r1
00005a  6800              LDR      r0,[r0,#0]
00005c  f0200003          BIC      r0,r0,#3
000060  6008              STR      r0,[r1,#0]
;;;957        FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
000062  4608              MOV      r0,r1
000064  6800              LDR      r0,[r0,#0]
000066  f0400002          ORR      r0,r0,#2
00006a  6008              STR      r0,[r1,#0]
;;;958    
;;;959     
;;;960        /* HCLK = SYSCLK */
;;;961        RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
00006c  481a              LDR      r0,|L2.216|
00006e  6840              LDR      r0,[r0,#4]
000070  4919              LDR      r1,|L2.216|
000072  6048              STR      r0,[r1,#4]
;;;962          
;;;963        /* PCLK2 = HCLK */
;;;964        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
000074  4608              MOV      r0,r1
000076  6840              LDR      r0,[r0,#4]
000078  6048              STR      r0,[r1,#4]
;;;965        
;;;966        /* PCLK1 = HCLK */
;;;967        RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
00007a  4608              MOV      r0,r1
00007c  6840              LDR      r0,[r0,#4]
00007e  f4406080          ORR      r0,r0,#0x400
000082  6048              STR      r0,[r1,#4]
;;;968    
;;;969    #ifdef STM32F10X_CL
;;;970        /* Configure PLLs ------------------------------------------------------*/
;;;971        /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
;;;972        /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
;;;973            
;;;974        RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
;;;975                                  RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
;;;976        RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
;;;977                                 RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
;;;978      
;;;979        /* Enable PLL2 */
;;;980        RCC->CR |= RCC_CR_PLL2ON;
;;;981        /* Wait till PLL2 is ready */
;;;982        while((RCC->CR & RCC_CR_PLL2RDY) == 0)
;;;983        {
;;;984        }
;;;985        
;;;986       
;;;987        /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
;;;988        RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
;;;989        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
;;;990                                RCC_CFGR_PLLMULL9); 
;;;991    #else    
;;;992        /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
;;;993        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
000084  4608              MOV      r0,r1
000086  6840              LDR      r0,[r0,#4]
000088  f420107c          BIC      r0,r0,#0x3f0000
00008c  6048              STR      r0,[r1,#4]
;;;994                                            RCC_CFGR_PLLMULL));
;;;995        RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
00008e  4608              MOV      r0,r1
000090  6840              LDR      r0,[r0,#4]
000092  f44010e8          ORR      r0,r0,#0x1d0000
000096  6048              STR      r0,[r1,#4]
;;;996    #endif /* STM32F10X_CL */
;;;997    
;;;998        /* Enable PLL */
;;;999        RCC->CR |= RCC_CR_PLLON;
000098  4608              MOV      r0,r1
00009a  6800              LDR      r0,[r0,#0]
00009c  f0407080          ORR      r0,r0,#0x1000000
0000a0  6008              STR      r0,[r1,#0]
;;;1000   
;;;1001       /* Wait till PLL is ready */
;;;1002       while((RCC->CR & RCC_CR_PLLRDY) == 0)
0000a2  bf00              NOP      
                  |L2.164|
0000a4  480c              LDR      r0,|L2.216|
0000a6  6800              LDR      r0,[r0,#0]
0000a8  f0007000          AND      r0,r0,#0x2000000
0000ac  2800              CMP      r0,#0
0000ae  d0f9              BEQ      |L2.164|
;;;1003       {
;;;1004       }
;;;1005       
;;;1006       /* Select PLL as system clock source */
;;;1007       RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
0000b0  4809              LDR      r0,|L2.216|
0000b2  6840              LDR      r0,[r0,#4]
0000b4  f0200003          BIC      r0,r0,#3
0000b8  4907              LDR      r1,|L2.216|
0000ba  6048              STR      r0,[r1,#4]
;;;1008       RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
0000bc  4608              MOV      r0,r1
0000be  6840              LDR      r0,[r0,#4]
0000c0  f0400002          ORR      r0,r0,#2
0000c4  6048              STR      r0,[r1,#4]
;;;1009   
;;;1010       /* Wait till PLL is used as system clock source */
;;;1011       while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
0000c6  bf00              NOP      
                  |L2.200|
0000c8  4803              LDR      r0,|L2.216|
0000ca  6840              LDR      r0,[r0,#4]
0000cc  f000000c          AND      r0,r0,#0xc
0000d0  2808              CMP      r0,#8
0000d2  d1f9              BNE      |L2.200|
                  |L2.212|
;;;1012       {
;;;1013       }
;;;1014     }
;;;1015     else
;;;1016     { /* If HSE fails to start-up, the application will have wrong clock 
;;;1017            configuration. User can add here some code to deal with this error */
;;;1018     }
;;;1019   }
0000d4  bd0c              POP      {r2,r3,pc}
;;;1020   #endif
                          ENDP

0000d6  0000              DCW      0x0000
                  |L2.216|
                          DCD      0x40021000
                  |L2.220|
                          DCD      0x40022000

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;244      */
;;;245    void SystemCoreClockUpdate (void)
000000  b510              PUSH     {r4,lr}
;;;246    {
;;;247      uint32_t tmp = 0, pllmull = 0, pllsource = 0;
000002  2100              MOVS     r1,#0
000004  2000              MOVS     r0,#0
000006  2200              MOVS     r2,#0
;;;248    
;;;249    #ifdef  STM32F10X_CL
;;;250      uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
;;;251    #endif /* STM32F10X_CL */
;;;252    
;;;253    #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;254      uint32_t prediv1factor = 0;
;;;255    #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
;;;256        
;;;257      /* Get SYSCLK source -------------------------------------------------------*/
;;;258      tmp = RCC->CFGR & RCC_CFGR_SWS;
000008  4b21              LDR      r3,|L3.144|
00000a  685b              LDR      r3,[r3,#4]
00000c  f003010c          AND      r1,r3,#0xc
;;;259      
;;;260      switch (tmp)
000010  b121              CBZ      r1,|L3.28|
000012  2904              CMP      r1,#4
000014  d006              BEQ      |L3.36|
000016  2908              CMP      r1,#8
000018  d128              BNE      |L3.108|
00001a  e007              B        |L3.44|
                  |L3.28|
;;;261      {
;;;262        case 0x00:  /* HSI used as system clock */
;;;263          SystemCoreClock = HSI_VALUE;
00001c  4b1d              LDR      r3,|L3.148|
00001e  4c1e              LDR      r4,|L3.152|
000020  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;264          break;
000022  e027              B        |L3.116|
                  |L3.36|
;;;265        case 0x04:  /* HSE used as system clock */
;;;266          SystemCoreClock = HSE_VALUE;
000024  4b1b              LDR      r3,|L3.148|
000026  4c1c              LDR      r4,|L3.152|
000028  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;267          break;
00002a  e023              B        |L3.116|
                  |L3.44|
;;;268        case 0x08:  /* PLL used as system clock */
;;;269    
;;;270          /* Get PLL clock source and multiplication factor ----------------------*/
;;;271          pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
00002c  4b18              LDR      r3,|L3.144|
00002e  685b              LDR      r3,[r3,#4]
000030  f4031070          AND      r0,r3,#0x3c0000
;;;272          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
000034  4b16              LDR      r3,|L3.144|
000036  685b              LDR      r3,[r3,#4]
000038  f4033280          AND      r2,r3,#0x10000
;;;273          
;;;274    #ifndef STM32F10X_CL      
;;;275          pllmull = ( pllmull >> 18) + 2;
00003c  2302              MOVS     r3,#2
00003e  eb034090          ADD      r0,r3,r0,LSR #18
;;;276          
;;;277          if (pllsource == 0x00)
000042  b922              CBNZ     r2,|L3.78|
;;;278          {
;;;279            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;280            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
000044  4b15              LDR      r3,|L3.156|
000046  4343              MULS     r3,r0,r3
000048  4c13              LDR      r4,|L3.152|
00004a  6023              STR      r3,[r4,#0]  ; SystemCoreClock
00004c  e00d              B        |L3.106|
                  |L3.78|
;;;281          }
;;;282          else
;;;283          {
;;;284     #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;285           prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;286           /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;287           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
;;;288     #else
;;;289            /* HSE selected as PLL clock entry */
;;;290            if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
00004e  4b10              LDR      r3,|L3.144|
000050  685b              LDR      r3,[r3,#4]
000052  f4033300          AND      r3,r3,#0x20000
000056  b123              CBZ      r3,|L3.98|
;;;291            {/* HSE oscillator clock divided by 2 */
;;;292              SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
000058  4b10              LDR      r3,|L3.156|
00005a  4343              MULS     r3,r0,r3
00005c  4c0e              LDR      r4,|L3.152|
00005e  6023              STR      r3,[r4,#0]  ; SystemCoreClock
000060  e003              B        |L3.106|
                  |L3.98|
;;;293            }
;;;294            else
;;;295            {
;;;296              SystemCoreClock = HSE_VALUE * pllmull;
000062  4b0c              LDR      r3,|L3.148|
000064  4343              MULS     r3,r0,r3
000066  4c0c              LDR      r4,|L3.152|
000068  6023              STR      r3,[r4,#0]  ; SystemCoreClock
                  |L3.106|
;;;297            }
;;;298     #endif
;;;299          }
;;;300    #else
;;;301          pllmull = pllmull >> 18;
;;;302          
;;;303          if (pllmull != 0x0D)
;;;304          {
;;;305             pllmull += 2;
;;;306          }
;;;307          else
;;;308          { /* PLL multiplication factor = PLL input clock * 6.5 */
;;;309            pllmull = 13 / 2; 
;;;310          }
;;;311                
;;;312          if (pllsource == 0x00)
;;;313          {
;;;314            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;315            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
;;;316          }
;;;317          else
;;;318          {/* PREDIV1 selected as PLL clock entry */
;;;319            
;;;320            /* Get PREDIV1 clock source and division factor */
;;;321            prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
;;;322            prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
;;;323            
;;;324            if (prediv1source == 0)
;;;325            { 
;;;326              /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;327              SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
;;;328            }
;;;329            else
;;;330            {/* PLL2 clock selected as PREDIV1 clock entry */
;;;331              
;;;332              /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;333              prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
;;;334              pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
;;;335              SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
;;;336            }
;;;337          }
;;;338    #endif /* STM32F10X_CL */ 
;;;339          break;
00006a  e003              B        |L3.116|
                  |L3.108|
;;;340    
;;;341        default:
;;;342          SystemCoreClock = HSI_VALUE;
00006c  4b09              LDR      r3,|L3.148|
00006e  4c0a              LDR      r4,|L3.152|
000070  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;343          break;
000072  bf00              NOP      
                  |L3.116|
000074  bf00              NOP                            ;264
;;;344      }
;;;345      
;;;346      /* Compute HCLK clock frequency ----------------*/
;;;347      /* Get HCLK prescaler */
;;;348      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000076  4b06              LDR      r3,|L3.144|
000078  685b              LDR      r3,[r3,#4]
00007a  f3c31303          UBFX     r3,r3,#4,#4
00007e  4c08              LDR      r4,|L3.160|
000080  5ce1              LDRB     r1,[r4,r3]
;;;349      /* HCLK clock frequency */
;;;350      SystemCoreClock >>= tmp;  
000082  4b05              LDR      r3,|L3.152|
000084  681b              LDR      r3,[r3,#0]  ; SystemCoreClock
000086  40cb              LSRS     r3,r3,r1
000088  4c03              LDR      r4,|L3.152|
00008a  6023              STR      r3,[r4,#0]  ; SystemCoreClock
;;;351    }
00008c  bd10              POP      {r4,pc}
;;;352    
                          ENDP

00008e  0000              DCW      0x0000
                  |L3.144|
                          DCD      0x40021000
                  |L3.148|
                          DCD      0x007a1200
                  |L3.152|
                          DCD      SystemCoreClock
                  |L3.156|
                          DCD      0x003d0900
                  |L3.160|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;179      */
;;;180    void SystemInit (void)
000000  b510              PUSH     {r4,lr}
;;;181    {
;;;182      /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
;;;183      /* Set HSION bit */
;;;184      RCC->CR |= (uint32_t)0x00000001;
000002  4813              LDR      r0,|L4.80|
000004  6800              LDR      r0,[r0,#0]
000006  f0400001          ORR      r0,r0,#1
00000a  4911              LDR      r1,|L4.80|
00000c  6008              STR      r0,[r1,#0]
;;;185    
;;;186      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;187    #ifndef STM32F10X_CL
;;;188      RCC->CFGR &= (uint32_t)0xF8FF0000;
00000e  4608              MOV      r0,r1
000010  6840              LDR      r0,[r0,#4]
000012  4910              LDR      r1,|L4.84|
000014  4008              ANDS     r0,r0,r1
000016  490e              LDR      r1,|L4.80|
000018  6048              STR      r0,[r1,#4]
;;;189    #else
;;;190      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;191    #endif /* STM32F10X_CL */   
;;;192      
;;;193      /* Reset HSEON, CSSON and PLLON bits */
;;;194      RCC->CR &= (uint32_t)0xFEF6FFFF;
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]
00001e  490e              LDR      r1,|L4.88|
000020  4008              ANDS     r0,r0,r1
000022  490b              LDR      r1,|L4.80|
000024  6008              STR      r0,[r1,#0]
;;;195    
;;;196      /* Reset HSEBYP bit */
;;;197      RCC->CR &= (uint32_t)0xFFFBFFFF;
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]
00002a  f4202080          BIC      r0,r0,#0x40000
00002e  6008              STR      r0,[r1,#0]
;;;198    
;;;199      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;200      RCC->CFGR &= (uint32_t)0xFF80FFFF;
000030  4608              MOV      r0,r1
000032  6840              LDR      r0,[r0,#4]
000034  f42000fe          BIC      r0,r0,#0x7f0000
000038  6048              STR      r0,[r1,#4]
;;;201    
;;;202    #ifdef STM32F10X_CL
;;;203      /* Reset PLL2ON and PLL3ON bits */
;;;204      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;205    
;;;206      /* Disable all interrupts and clear pending bits  */
;;;207      RCC->CIR = 0x00FF0000;
;;;208    
;;;209      /* Reset CFGR2 register */
;;;210      RCC->CFGR2 = 0x00000000;
;;;211    #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
;;;212      /* Disable all interrupts and clear pending bits  */
;;;213      RCC->CIR = 0x009F0000;
;;;214    
;;;215      /* Reset CFGR2 register */
;;;216      RCC->CFGR2 = 0x00000000;      
;;;217    #else
;;;218      /* Disable all interrupts and clear pending bits  */
;;;219      RCC->CIR = 0x009F0000;
00003a  f44f001f          MOV      r0,#0x9f0000
00003e  6088              STR      r0,[r1,#8]
;;;220    #endif /* STM32F10X_CL */
;;;221        
;;;222    #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
;;;223      #ifdef DATA_IN_ExtSRAM
;;;224        SystemInit_ExtMemCtl(); 
;;;225      #endif /* DATA_IN_ExtSRAM */
;;;226    #endif 
;;;227    
;;;228      /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
;;;229      /* Configure the Flash Latency cycles and enable prefetch buffer */
;;;230      SetSysClock();
000040  f7fffffe          BL       SetSysClock
;;;231    
;;;232    #ifdef VECT_TAB_SRAM
;;;233      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
;;;234    #else
;;;235      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
000044  f04f6000          MOV      r0,#0x8000000
000048  4904              LDR      r1,|L4.92|
00004a  6008              STR      r0,[r1,#0]
;;;236    #endif 
;;;237    }
00004c  bd10              POP      {r4,pc}
;;;238    
                          ENDP

00004e  0000              DCW      0x0000
                  |L4.80|
                          DCD      0x40021000
                  |L4.84|
                          DCD      0xf8ff0000
                  |L4.88|
                          DCD      0xfef6ffff
                  |L4.92|
                          DCD      0xe000ed08

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x044aa200
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09
