; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\main.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\STM32F10x_StdPeriph_Driver\src -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\bsp_lib -IC:\Users\Administrator\Desktop\ssr-accounts\handheld_device\RVMDK\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\main.crf ..\User\main.c]
                          THUMB

                          AREA ||i.FSM_link_connected||, CODE, READONLY, ALIGN=2

                  FSM_link_connected PROC
;;;109    
;;;110    void FSM_link_connected(struct FSM *me){
000000  b510              PUSH     {r4,lr}
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
;;;111    
;;;112    	unsigned char buf[32] = {0};
000006  2120              MOVS     r1,#0x20
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       __aeabi_memclr4
;;;113    	
;;;114    	if(me->key!=-1){
00000e  6860              LDR      r0,[r4,#4]
000010  1c40              ADDS     r0,r0,#1
000012  b1f8              CBZ      r0,|L1.84|
;;;115    		//oled_show_line3(SENDING, 0);
;;;116    		lcd_show_line3(SENDING, 0);
000014  2100              MOVS     r1,#0
000016  2007              MOVS     r0,#7
000018  f7fffffe          BL       lcd_show_line3
;;;117    		Delay_Ms(150);
00001c  2096              MOVS     r0,#0x96
00001e  f7fffffe          BL       Delay_Ms
;;;118    		key_trans(me->key, buf);
000022  88a1              LDRH     r1,[r4,#4]
000024  b288              UXTH     r0,r1
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       key_trans
;;;119    		disable_key();
00002c  f7fffffe          BL       disable_key
;;;120    		if(NRF24L01_Send(buf)==0){
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       NRF24L01_Send
000036  b920              CBNZ     r0,|L1.66|
;;;121    			//提示发送成功
;;;122    			//oled_show_line3(SEND_OK, 0);
;;;123    			lcd_show_line3(SEND_OK, 0);
000038  2100              MOVS     r1,#0
00003a  2004              MOVS     r0,#4
00003c  f7fffffe          BL       lcd_show_line3
000040  e006              B        |L1.80|
                  |L1.66|
;;;124    		}else{
;;;125    			//提示发送不成功
;;;126    //			oled_show_line3(SEND_FAIL, 0);
;;;127    			lcd_show_line3(SEND_FAIL, 0);
000042  2100              MOVS     r1,#0
000044  2003              MOVS     r0,#3
000046  f7fffffe          BL       lcd_show_line3
;;;128    			NRF24L01_TX_Mode(addr);
00004a  4803              LDR      r0,|L1.88|
00004c  f7fffffe          BL       NRF24L01_TX_Mode
                  |L1.80|
;;;129    		}
;;;130    		enable_key();
000050  f7fffffe          BL       enable_key
                  |L1.84|
;;;131    	}
;;;132    	return;
;;;133    }
000054  b008              ADD      sp,sp,#0x20
000056  bd10              POP      {r4,pc}
;;;134    
                          ENDP

                  |L1.88|
                          DCD      addr

                          AREA ||i.FSM_link_disconnected||, CODE, READONLY, ALIGN=1

                  FSM_link_disconnected PROC
;;;134    
;;;135    void FSM_link_disconnected(struct FSM *me){
000000  4770              BX       lr
;;;136    
;;;137    	//TODO
;;;138    	return;
;;;139    }
;;;140    
                          ENDP


                          AREA ||i.FSM_link_start||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  FSM_link_start PROC
;;;41     
;;;42     void FSM_link_start(struct FSM *me){
000000  b530              PUSH     {r4,r5,lr}
000002  b08b              SUB      sp,sp,#0x2c
000004  4604              MOV      r4,r0
;;;43     	int key;
;;;44     	unsigned char buf[32] = {0};
000006  2120              MOVS     r1,#0x20
000008  a803              ADD      r0,sp,#0xc
00000a  f7fffffe          BL       __aeabi_memclr4
;;;45     	
;;;46     	LCD_P8x16Str(5,0,(unsigned char*)"N");//oled_show_line1(INPUT_TYPE, "N");
00000e  a24e              ADR      r2,|L3.328|
000010  2100              MOVS     r1,#0
000012  2005              MOVS     r0,#5
000014  f7fffffe          BL       LCD_P8x16Str
;;;47     	LCD_show_line1_bmp(BMP_NO_SIGNAL);//oled_show_line1_bmp(BMP_NO_SIGNAL);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       LCD_show_line1_bmp
;;;48     	oled_clear_line(LINE2);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       oled_clear_line
;;;49     	oled_clear_line(LINE3);
000024  2005              MOVS     r0,#5
000026  f7fffffe          BL       oled_clear_line
;;;50       save_addr(addr);
00002a  4848              LDR      r0,|L3.332|
00002c  f7fffffe          BL       save_addr
;;;51     	if(read_addr(addr) != -1){
000030  4846              LDR      r0,|L3.332|
000032  f7fffffe          BL       read_addr
000036  1c40              ADDS     r0,r0,#1
000038  2800              CMP      r0,#0
00003a  d03d              BEQ      |L3.184|
;;;52     		sprintf(buf, "%d:%d:%d:%d:%d\0", addr[0], addr[1], addr[2], addr[3], addr[4]);
00003c  4843              LDR      r0,|L3.332|
00003e  7900              LDRB     r0,[r0,#4]  ; addr
000040  4942              LDR      r1,|L3.332|
000042  78c9              LDRB     r1,[r1,#3]  ; addr
000044  4a41              LDR      r2,|L3.332|
000046  7892              LDRB     r2,[r2,#2]  ; addr
000048  e9cd2100          STRD     r2,r1,[sp,#0]
00004c  9002              STR      r0,[sp,#8]
00004e  483f              LDR      r0,|L3.332|
000050  7843              LDRB     r3,[r0,#1]  ; addr
000052  7802              LDRB     r2,[r0,#0]  ; addr
000054  a13e              ADR      r1,|L3.336|
000056  a803              ADD      r0,sp,#0xc
000058  f7fffffe          BL       __2sprintf
;;;53     		LCD_P8x16Str(LCD_LINE4,1,buf);//OLED_ShowString(0, 2, buf);
00005c  aa03              ADD      r2,sp,#0xc
00005e  2101              MOVS     r1,#1
000060  2005              MOVS     r0,#5
000062  f7fffffe          BL       LCD_P8x16Str
;;;54     		LCD_ShowCHinese((u8*)"是",LINE4,5);//5--行  line4---列//OLED_ShowCHinese(0,LINE4,22);
000066  2205              MOVS     r2,#5
000068  2106              MOVS     r1,#6
00006a  a03d              ADR      r0,|L3.352|
00006c  f7fffffe          BL       LCD_ShowCHinese
;;;55     		LCD_ShowCHinese((u8*)"否",6*16,5);//OLED_ShowCHinese(7*16,LINE4,23);
000070  2205              MOVS     r2,#5
000072  2160              MOVS     r1,#0x60
000074  a03b              ADR      r0,|L3.356|
000076  f7fffffe          BL       LCD_ShowCHinese
;;;56     		while(1){
00007a  e01b              B        |L3.180|
                  |L3.124|
;;;57     			key = get_key();
00007c  f7fffffe          BL       get_key
000080  4605              MOV      r5,r0
;;;58     			if(BUTTON_FUN == key){
000082  2d0c              CMP      r5,#0xc
000084  d100              BNE      |L3.136|
;;;59     				break;
000086  e016              B        |L3.182|
                  |L3.136|
;;;60     			}else if(BUTTON_COLON == key){
000088  2d0d              CMP      r5,#0xd
00008a  d113              BNE      |L3.180|
;;;61     				oled_clear_line(LINE2);
00008c  2001              MOVS     r0,#1
00008e  f7fffffe          BL       oled_clear_line
;;;62     				oled_clear_line(LINE3);
000092  2005              MOVS     r0,#5
000094  f7fffffe          BL       oled_clear_line
;;;63     				oled_clear_line(LINE4);
000098  2006              MOVS     r0,#6
00009a  f7fffffe          BL       oled_clear_line
;;;64     				oled_show_line2(INPUT_ADDR, 0);
00009e  2100              MOVS     r1,#0
0000a0  2001              MOVS     r0,#1
0000a2  f7fffffe          BL       oled_show_line2
;;;65     				while(get_addr(addr)!= 0);
0000a6  bf00              NOP      
                  |L3.168|
0000a8  4828              LDR      r0,|L3.332|
0000aa  f7fffffe          BL       get_addr
0000ae  2800              CMP      r0,#0
0000b0  d1fa              BNE      |L3.168|
;;;66     				break;
0000b2  e000              B        |L3.182|
                  |L3.180|
0000b4  e7e2              B        |L3.124|
                  |L3.182|
0000b6  e012              B        |L3.222|
                  |L3.184|
;;;67     			}
;;;68     		}
;;;69     	}else{
;;;70     		oled_clear_line(LINE2);
0000b8  2001              MOVS     r0,#1
0000ba  f7fffffe          BL       oled_clear_line
;;;71     		oled_clear_line(LINE3);
0000be  2005              MOVS     r0,#5
0000c0  f7fffffe          BL       oled_clear_line
;;;72     		oled_clear_line(LINE4);
0000c4  2006              MOVS     r0,#6
0000c6  f7fffffe          BL       oled_clear_line
;;;73     		oled_show_line2(INPUT_ADDR, 0);
0000ca  2100              MOVS     r1,#0
0000cc  2001              MOVS     r0,#1
0000ce  f7fffffe          BL       oled_show_line2
;;;74     		while(get_addr(addr)!= 0);
0000d2  bf00              NOP      
                  |L3.212|
0000d4  481d              LDR      r0,|L3.332|
0000d6  f7fffffe          BL       get_addr
0000da  2800              CMP      r0,#0
0000dc  d1fa              BNE      |L3.212|
                  |L3.222|
;;;75     	}
;;;76     
;;;77     	NRF24L01_TX_Mode(addr);
0000de  481b              LDR      r0,|L3.332|
0000e0  f7fffffe          BL       NRF24L01_TX_Mode
;;;78     
;;;79     	if(NRF24L01_Send(buf)){
0000e4  a803              ADD      r0,sp,#0xc
0000e6  f7fffffe          BL       NRF24L01_Send
0000ea  b1a8              CBZ      r0,|L3.280|
;;;80     		//提示连接不成功
;;;81     //		oled_show_line3(CONNECT_STATUS_FAIL, 0);
;;;82     //		oled_show_line1(INPUT_TYPE, "N");
;;;83     //		oled_show_line1_bmp(BMP_NO_SIGNAL);
;;;84     //		oled_clear_line(LINE2);
;;;85     		lcd_show_line3(CONNECT_STATUS_FAIL, 0);//oled_show_line3(CONNECT_STATUS_OK, 0);
0000ec  2100              MOVS     r1,#0
0000ee  2001              MOVS     r0,#1
0000f0  f7fffffe          BL       lcd_show_line3
;;;86     		LCD_P8x16Str(5,0,(unsigned char*)"N");//oled_show_line1(INPUT_TYPE, "F");
0000f4  a214              ADR      r2,|L3.328|
0000f6  2100              MOVS     r1,#0
0000f8  2005              MOVS     r0,#5
0000fa  f7fffffe          BL       LCD_P8x16Str
;;;87     		LCD_show_line1_bmp(BMP_NO_SIGNAL);
0000fe  2001              MOVS     r0,#1
000100  f7fffffe          BL       LCD_show_line1_bmp
;;;88     		
;;;89     		
;;;90     		me->status = LINK_START;
000104  2000              MOVS     r0,#0
000106  7020              STRB     r0,[r4,#0]
;;;91     		me->action = FSM_link_start;
000108  f2af100b          ADR      r0,FSM_link_start + 1
00010c  60a0              STR      r0,[r4,#8]
;;;92     		Delay_Ms(2000);
00010e  f44f60fa          MOV      r0,#0x7d0
000112  f7fffffe          BL       Delay_Ms
000116  e014              B        |L3.322|
                  |L3.280|
;;;93     	}else{
;;;94     		//提示连接成功
;;;95     		lcd_clear_line(1);
000118  2001              MOVS     r0,#1
00011a  f7fffffe          BL       lcd_clear_line
;;;96     		lcd_show_line3(CONNECT_STATUS_OK, 0);//oled_show_line3(CONNECT_STATUS_OK, 0);
00011e  2100              MOVS     r1,#0
000120  2002              MOVS     r0,#2
000122  f7fffffe          BL       lcd_show_line3
;;;97     		lcd_show_line1(INPUT_TYPE,(unsigned char*)"F");//oled_show_line1(INPUT_TYPE, "F");
000126  a110              ADR      r1,|L3.360|
000128  2000              MOVS     r0,#0
00012a  f7fffffe          BL       lcd_show_line1
;;;98     		LCD_show_line1_bmp(BMP_SIGNAL);
00012e  2000              MOVS     r0,#0
000130  f7fffffe          BL       LCD_show_line1_bmp
;;;99     		//lcd_clear_line(LINE3);
;;;100    		
;;;101    		me->status = LINK_CONNECTED;
000134  2001              MOVS     r0,#1
000136  7020              STRB     r0,[r4,#0]
;;;102    		me->action = FSM_link_connected;
000138  480c              LDR      r0,|L3.364|
00013a  60a0              STR      r0,[r4,#8]
;;;103    		
;;;104    		save_addr(addr);
00013c  4803              LDR      r0,|L3.332|
00013e  f7fffffe          BL       save_addr
                  |L3.322|
;;;105    	}
;;;106    	
;;;107    	return;
;;;108    }
000142  b00b              ADD      sp,sp,#0x2c
000144  bd30              POP      {r4,r5,pc}
;;;109    
                          ENDP

000146  0000              DCW      0x0000
                  |L3.328|
000148  4e00              DCB      "N",0
00014a  00                DCB      0
00014b  00                DCB      0
                  |L3.332|
                          DCD      addr
                  |L3.336|
000150  25643a25          DCB      "%d:%d:%d:%d:%d",0
000154  643a2564
000158  3a25643a
00015c  256400  
00015f  00                DCB      0
                  |L3.352|
000160  cac700            DCB      202,199,0
000163  00                DCB      0
                  |L3.356|
000164  b7f100            DCB      183,241,0
000167  00                DCB      0
                  |L3.360|
000168  4600              DCB      "F",0
00016a  00                DCB      0
00016b  00                DCB      0
                  |L3.364|
                          DCD      FSM_link_connected

                          AREA ||i.display_by_key||, CODE, READONLY, ALIGN=2

                  display_by_key PROC
;;;152    //oled dispaly
;;;153    void display_by_key(int key, struct FSM *me){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;154    	static u32 tmp = 0;
;;;155    	
;;;156    	if(key < 0){
000006  2c00              CMP      r4,#0
000008  da00              BGE      |L4.12|
                  |L4.10|
;;;157    		return;
;;;158    	}
;;;159    	
;;;160    	if((LINK_START != me->status) && (key == BUTTON_FUN)){
;;;161    		oled_clear_line(LINE2);
;;;162    		oled_clear_line(LINE3);
;;;163    		if(fun_flag == KEY_FUN){
;;;164    			//oled_show_line1(INPUT_TYPE, "N");
;;;165    			lcd_clear_line(1);
;;;166    			lcd_clear_line(2);
;;;167    			lcd_clear_line(3);
;;;168    			lcd_clear_line(4);
;;;169    			lcd_show_line1(INPUT_TYPE,(unsigned char*)"N");
;;;170    			fun_flag = KEY_NUM;
;;;171    			tmp = 0;
;;;172    			//oled_show_line2(INPUT_NUM, BUTTON_OK);
;;;173    			  lcd_show_line2(INPUT_NUM,BUTTON_OK);
;;;174    //			LCD_P8x16Str(0,INPUT_NUM,(unsigned char*)"_");
;;;175    		}else if(fun_flag == KEY_NUM){
;;;176    			//oled_show_line1(INPUT_TYPE, "F");
;;;177    			lcd_clear_line(1);
;;;178    			lcd_clear_line(2);
;;;179    			lcd_clear_line(3);
;;;180    			lcd_clear_line(4);
;;;181    			LCD_P8x16Str(0,INPUT_TYPE,(unsigned char*)"F");
;;;182    			fun_flag = KEY_FUN;
;;;183    		}
;;;184    		me->key = -1;
;;;185    		return;
;;;186    	}
;;;187    	
;;;188    	if(LINK_CONNECTED == me->status){
;;;189    		if(KEY_FUN == fun_flag){
;;;190    			if(key>9){
;;;191    				me->key = -1;
;;;192    				return;
;;;193    			}
;;;194    			switch(key){
;;;195    				case 0:
;;;196    					//oled_show_line2(FUN_LIGHT_OFF, key);
;;;197    				  lcd_show_line2(FUN_LIGHT_OFF, key);
;;;198    					break;	
;;;199    				case 1:
;;;200    					//oled_show_line2(FUN_LIGHT_RED, key);
;;;201    				  lcd_show_line2(FUN_LIGHT_RED, key);
;;;202    					break;				
;;;203    				case 2:
;;;204    					//oled_show_line2(FUN_YELLOW_FLASH, key);
;;;205    				  lcd_show_line2(FUN_YELLOW_FLASH, key);
;;;206    					break;				
;;;207    				case 3:
;;;208    					//oled_show_line2(FUN_EAST_WEST_STRAIGHT, key);
;;;209    				  lcd_show_line2(FUN_EAST_WEST_STRAIGHT, key);
;;;210    					break;				
;;;211    				case 4:
;;;212    					//oled_show_line2(FUN_SOUTH_NORTH_STRAIGHT, key);
;;;213    				  lcd_show_line2(FUN_SOUTH_NORTH_STRAIGHT, key);
;;;214    					break;				
;;;215    				case 5:
;;;216    					//oled_show_line2(FUN_EAST_WEST_TURN_LEFT, key);
;;;217    				  lcd_show_line2(FUN_EAST_WEST_TURN_LEFT, key);
;;;218    					break;				
;;;219    				case 6:
;;;220    					//oled_show_line2(FUN_SOUTH_NORTH_TURN_LEFT, key);
;;;221    				  lcd_show_line2(FUN_SOUTH_NORTH_TURN_LEFT, key);
;;;222    					break;
;;;223    				
;;;224    				case 7:
;;;225    					//oled_show_line2(FUN_HANDLE_CONTROL_CANCEL, key);
;;;226    				  lcd_show_line2(FUN_HANDLE_CONTROL_CANCEL, key);
;;;227    					break;
;;;228    				
;;;229    				case 8:
;;;230              lcd_show_line2(FUN_EAST_WEST_TURN_LEFT, key);
;;;231    					break;						
;;;232    				case 9:
;;;233    				case 10:
;;;234    				case 11:
;;;235    				case 12:		
;;;236    				case 13:
;;;237    					oled_clear_line(LINE2);
;;;238    					break;					
;;;239    				default:
;;;240    					break;
;;;241    			}
;;;242    		}else if(KEY_NUM == fun_flag){//用户自定义方案号
;;;243    			//oled_clear_line(LINE2);			
;;;244    			//oled_clear_line(LINE3);			
;;;245    			lcd_clear_line(1);
;;;246    			lcd_clear_line(2);
;;;247    			lcd_clear_line(3);
;;;248    			lcd_clear_line(4);
;;;249    			tmp = 0;
;;;250    			//oled_show_line2(INPUT_NUM, BUTTON_OK);
;;;251    			lcd_show_line2(INPUT_NUM, BUTTON_OK);
;;;252    			while(key != BUTTON_OK){				
;;;253    				if(BUTTON_FUN == key){//切换功能
;;;254    					//oled_clear_line(LINE2);
;;;255    					//oled_show_line1(INPUT_TYPE, "F");
;;;256    					lcd_clear_line(1);
;;;257    					lcd_clear_line(2);
;;;258    			    lcd_clear_line(3);
;;;259    			    lcd_clear_line(4);
;;;260    					lcd_show_line1(INPUT_TYPE,(unsigned char*)"F");
;;;261    					fun_flag = KEY_FUN;
;;;262    					me->key = -1;
;;;263    					tmp = 0;
;;;264    					return;
;;;265    				}
;;;266    				if(key != -1){
;;;267    					if(key < 10){
;;;268    						tmp = tmp*10 + key;
;;;269    					}else if(BUTTON_DEL == key){
;;;270    						tmp /= 10;
;;;271    					}
;;;272    					//oled_show_line2(INPUT_NUM, key);
;;;273    					lcd_show_line2(INPUT_NUM, key);
;;;274    				}
;;;275    				key = get_key();
;;;276    			}
;;;277    			me->key = tmp;
;;;278    		}
;;;279    	}
;;;280    	
;;;281    	return;
;;;282    }
00000a  bd70              POP      {r4-r6,pc}
                  |L4.12|
00000c  7828              LDRB     r0,[r5,#0]            ;160
00000e  2800              CMP      r0,#0                 ;160
000010  d03f              BEQ      |L4.146|
000012  2c0c              CMP      r4,#0xc               ;160
000014  d13d              BNE      |L4.146|
000016  2001              MOVS     r0,#1                 ;161
000018  f7fffffe          BL       oled_clear_line
00001c  2005              MOVS     r0,#5                 ;162
00001e  f7fffffe          BL       oled_clear_line
000022  486e              LDR      r0,|L4.476|
000024  6800              LDR      r0,[r0,#0]            ;163  ; fun_flag
000026  2801              CMP      r0,#1                 ;163
000028  d118              BNE      |L4.92|
00002a  f7fffffe          BL       lcd_clear_line
00002e  2002              MOVS     r0,#2                 ;166
000030  f7fffffe          BL       lcd_clear_line
000034  2003              MOVS     r0,#3                 ;167
000036  f7fffffe          BL       lcd_clear_line
00003a  2004              MOVS     r0,#4                 ;168
00003c  f7fffffe          BL       lcd_clear_line
000040  a167              ADR      r1,|L4.480|
000042  2000              MOVS     r0,#0                 ;169
000044  f7fffffe          BL       lcd_show_line1
000048  2000              MOVS     r0,#0                 ;170
00004a  4964              LDR      r1,|L4.476|
00004c  6008              STR      r0,[r1,#0]            ;170  ; fun_flag
00004e  4965              LDR      r1,|L4.484|
000050  6008              STR      r0,[r1,#0]            ;171  ; tmp
000052  210a              MOVS     r1,#0xa               ;173
000054  2006              MOVS     r0,#6                 ;173
000056  f7fffffe          BL       lcd_show_line2
00005a  e016              B        |L4.138|
                  |L4.92|
00005c  485f              LDR      r0,|L4.476|
00005e  6800              LDR      r0,[r0,#0]            ;175  ; fun_flag
000060  b998              CBNZ     r0,|L4.138|
000062  2001              MOVS     r0,#1                 ;177
000064  f7fffffe          BL       lcd_clear_line
000068  2002              MOVS     r0,#2                 ;178
00006a  f7fffffe          BL       lcd_clear_line
00006e  2003              MOVS     r0,#3                 ;179
000070  f7fffffe          BL       lcd_clear_line
000074  2004              MOVS     r0,#4                 ;180
000076  f7fffffe          BL       lcd_clear_line
00007a  a25b              ADR      r2,|L4.488|
00007c  2100              MOVS     r1,#0                 ;181
00007e  4608              MOV      r0,r1                 ;181
000080  f7fffffe          BL       LCD_P8x16Str
000084  2001              MOVS     r0,#1                 ;182
000086  4955              LDR      r1,|L4.476|
000088  6008              STR      r0,[r1,#0]            ;182  ; fun_flag
                  |L4.138|
00008a  f04f30ff          MOV      r0,#0xffffffff        ;184
00008e  6068              STR      r0,[r5,#4]            ;184
000090  e7bb              B        |L4.10|
                  |L4.146|
000092  7828              LDRB     r0,[r5,#0]            ;188
000094  2801              CMP      r0,#1                 ;188
000096  d149              BNE      |L4.300|
000098  4850              LDR      r0,|L4.476|
00009a  6800              LDR      r0,[r0,#0]            ;189  ; fun_flag
00009c  2801              CMP      r0,#1                 ;189
00009e  d146              BNE      |L4.302|
0000a0  2c09              CMP      r4,#9                 ;190
0000a2  dd02              BLE      |L4.170|
0000a4  1e80              SUBS     r0,r0,#2              ;191
0000a6  6068              STR      r0,[r5,#4]            ;191
0000a8  e7af              B        |L4.10|
                  |L4.170|
0000aa  2c0e              CMP      r4,#0xe               ;194
0000ac  d23d              BCS      |L4.298|
0000ae  e8dff004          TBB      [pc,r4]               ;194
0000b2  070c              DCB      0x07,0x0c
0000b4  11161b20          DCB      0x11,0x16,0x1b,0x20
0000b8  252a2f34          DCB      0x25,0x2a,0x2f,0x34
0000bc  35363738          DCB      0x35,0x36,0x37,0x38
0000c0  b2e1              UXTB     r1,r4                 ;197
0000c2  2002              MOVS     r0,#2                 ;197
0000c4  f7fffffe          BL       lcd_show_line2
0000c8  e030              B        |L4.300|
0000ca  b2e1              UXTB     r1,r4                 ;201
0000cc  2003              MOVS     r0,#3                 ;201
0000ce  f7fffffe          BL       lcd_show_line2
0000d2  e02b              B        |L4.300|
0000d4  b2e1              UXTB     r1,r4                 ;205
0000d6  2004              MOVS     r0,#4                 ;205
0000d8  f7fffffe          BL       lcd_show_line2
0000dc  e026              B        |L4.300|
0000de  b2e1              UXTB     r1,r4                 ;209
0000e0  2005              MOVS     r0,#5                 ;209
0000e2  f7fffffe          BL       lcd_show_line2
0000e6  e021              B        |L4.300|
0000e8  b2e1              UXTB     r1,r4                 ;213
0000ea  2007              MOVS     r0,#7                 ;213
0000ec  f7fffffe          BL       lcd_show_line2
0000f0  e01c              B        |L4.300|
0000f2  b2e1              UXTB     r1,r4                 ;217
0000f4  2008              MOVS     r0,#8                 ;217
0000f6  f7fffffe          BL       lcd_show_line2
0000fa  e017              B        |L4.300|
0000fc  b2e1              UXTB     r1,r4                 ;221
0000fe  2009              MOVS     r0,#9                 ;221
000100  f7fffffe          BL       lcd_show_line2
000104  e012              B        |L4.300|
000106  b2e1              UXTB     r1,r4                 ;226
000108  200a              MOVS     r0,#0xa               ;226
00010a  f7fffffe          BL       lcd_show_line2
00010e  e00d              B        |L4.300|
000110  b2e1              UXTB     r1,r4                 ;230
000112  2008              MOVS     r0,#8                 ;230
000114  f7fffffe          BL       lcd_show_line2
000118  e008              B        |L4.300|
00011a  bf00              NOP                            ;233
00011c  bf00              NOP                            ;234
00011e  bf00              NOP                            ;235
000120  bf00              NOP                            ;236
000122  2001              MOVS     r0,#1                 ;237
000124  f7fffffe          BL       oled_clear_line
000128  e000              B        |L4.300|
                  |L4.298|
00012a  bf00              NOP                            ;240
                  |L4.300|
00012c  e054              B        |L4.472|
                  |L4.302|
00012e  482b              LDR      r0,|L4.476|
000130  6800              LDR      r0,[r0,#0]            ;242  ; fun_flag
000132  2800              CMP      r0,#0                 ;242
000134  d150              BNE      |L4.472|
000136  2001              MOVS     r0,#1                 ;245
000138  f7fffffe          BL       lcd_clear_line
00013c  2002              MOVS     r0,#2                 ;246
00013e  f7fffffe          BL       lcd_clear_line
000142  2003              MOVS     r0,#3                 ;247
000144  f7fffffe          BL       lcd_clear_line
000148  2004              MOVS     r0,#4                 ;248
00014a  f7fffffe          BL       lcd_clear_line
00014e  2000              MOVS     r0,#0                 ;249
000150  4924              LDR      r1,|L4.484|
000152  6008              STR      r0,[r1,#0]            ;249  ; tmp
000154  210a              MOVS     r1,#0xa               ;251
000156  2006              MOVS     r0,#6                 ;251
000158  f7fffffe          BL       lcd_show_line2
00015c  e037              B        |L4.462|
                  |L4.350|
00015e  2c0c              CMP      r4,#0xc               ;253
000160  d118              BNE      |L4.404|
000162  2001              MOVS     r0,#1                 ;256
000164  f7fffffe          BL       lcd_clear_line
000168  2002              MOVS     r0,#2                 ;257
00016a  f7fffffe          BL       lcd_clear_line
00016e  2003              MOVS     r0,#3                 ;258
000170  f7fffffe          BL       lcd_clear_line
000174  2004              MOVS     r0,#4                 ;259
000176  f7fffffe          BL       lcd_clear_line
00017a  a11b              ADR      r1,|L4.488|
00017c  2000              MOVS     r0,#0                 ;260
00017e  f7fffffe          BL       lcd_show_line1
000182  2001              MOVS     r0,#1                 ;261
000184  4915              LDR      r1,|L4.476|
000186  6008              STR      r0,[r1,#0]            ;261  ; fun_flag
000188  1e80              SUBS     r0,r0,#2              ;262
00018a  6068              STR      r0,[r5,#4]            ;262
00018c  2000              MOVS     r0,#0                 ;263
00018e  4915              LDR      r1,|L4.484|
000190  6008              STR      r0,[r1,#0]            ;263  ; tmp
000192  e73a              B        |L4.10|
                  |L4.404|
000194  1c60              ADDS     r0,r4,#1              ;266
000196  b1b8              CBZ      r0,|L4.456|
000198  2c0a              CMP      r4,#0xa               ;267
00019a  da08              BGE      |L4.430|
00019c  4811              LDR      r0,|L4.484|
00019e  6800              LDR      r0,[r0,#0]            ;268  ; tmp
0001a0  eb000080          ADD      r0,r0,r0,LSL #2       ;268
0001a4  eb040040          ADD      r0,r4,r0,LSL #1       ;268
0001a8  490e              LDR      r1,|L4.484|
0001aa  6008              STR      r0,[r1,#0]            ;268  ; tmp
0001ac  e008              B        |L4.448|
                  |L4.430|
0001ae  2c0b              CMP      r4,#0xb               ;269
0001b0  d106              BNE      |L4.448|
0001b2  480c              LDR      r0,|L4.484|
0001b4  6800              LDR      r0,[r0,#0]            ;270  ; tmp
0001b6  210a              MOVS     r1,#0xa               ;270
0001b8  fbb0f0f1          UDIV     r0,r0,r1              ;270
0001bc  4909              LDR      r1,|L4.484|
0001be  6008              STR      r0,[r1,#0]            ;270  ; tmp
                  |L4.448|
0001c0  b2e1              UXTB     r1,r4                 ;273
0001c2  2006              MOVS     r0,#6                 ;273
0001c4  f7fffffe          BL       lcd_show_line2
                  |L4.456|
0001c8  f7fffffe          BL       get_key
0001cc  4604              MOV      r4,r0                 ;275
                  |L4.462|
0001ce  2c0a              CMP      r4,#0xa               ;252
0001d0  d1c5              BNE      |L4.350|
0001d2  4804              LDR      r0,|L4.484|
0001d4  6800              LDR      r0,[r0,#0]            ;277  ; tmp
0001d6  6068              STR      r0,[r5,#4]            ;277
                  |L4.472|
0001d8  bf00              NOP                            ;281
0001da  e716              B        |L4.10|
;;;283    
                          ENDP

                  |L4.476|
                          DCD      fun_flag
                  |L4.480|
0001e0  4e00              DCB      "N",0
0001e2  00                DCB      0
0001e3  00                DCB      0
                  |L4.484|
                          DCD      tmp
                  |L4.488|
0001e8  4600              DCB      "F",0
0001ea  00                DCB      0
0001eb  00                DCB      0

                          AREA ||i.fun_xor||, CODE, READONLY, ALIGN=1

                  fun_xor PROC
;;;140    
;;;141    static u8 fun_xor(char *p, int len){
000000  b510              PUSH     {r4,lr}
000002  4602              MOV      r2,r0
;;;142    	u8 ret = 0;
000004  2000              MOVS     r0,#0
;;;143    	
;;;144    	while(len --){
000006  e002              B        |L5.14|
                  |L5.8|
;;;145    		ret = ret ^ *p;
000008  7813              LDRB     r3,[r2,#0]
00000a  4058              EORS     r0,r0,r3
;;;146    		p += 1;
00000c  1c52              ADDS     r2,r2,#1
                  |L5.14|
00000e  000b              MOVS     r3,r1                 ;144
000010  f1a10101          SUB      r1,r1,#1              ;144
000014  d1f8              BNE      |L5.8|
;;;147    	}
;;;148    	
;;;149    	return ret;
;;;150    }
000016  bd10              POP      {r4,pc}
;;;151    
                          ENDP


                          AREA ||i.key_trans||, CODE, READONLY, ALIGN=2

                  key_trans PROC
;;;283    
;;;284    void key_trans(u16 key, u8 *data){
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;285    	int i;
;;;286    	
;;;287    	if(fun_flag == KEY_FUN){
000006  480d              LDR      r0,|L6.60|
000008  6800              LDR      r0,[r0,#0]  ; fun_flag
00000a  2801              CMP      r0,#1
00000c  d102              BNE      |L6.20|
;;;288    		data[0] = 2;
00000e  2002              MOVS     r0,#2
000010  7020              STRB     r0,[r4,#0]
000012  e001              B        |L6.24|
                  |L6.20|
;;;289    	}else{
;;;290    		data[0] = 1;
000014  2001              MOVS     r0,#1
000016  7020              STRB     r0,[r4,#0]
                  |L6.24|
;;;291    	}
;;;292    	data[1] = 2;//数据长度
000018  2002              MOVS     r0,#2
00001a  7060              STRB     r0,[r4,#1]
;;;293    	data[2] = (key>>8)&0xFF;
00001c  0a30              LSRS     r0,r6,#8
00001e  70a0              STRB     r0,[r4,#2]
;;;294    	data[3] = key&0xFF;
000020  70e6              STRB     r6,[r4,#3]
;;;295    	data[4] = fun_xor(data, 4);
000022  2104              MOVS     r1,#4
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       fun_xor
00002a  7120              STRB     r0,[r4,#4]
;;;296    	for(i=5;i<32;i++){
00002c  2505              MOVS     r5,#5
00002e  e002              B        |L6.54|
                  |L6.48|
;;;297    		data[i] = 0;
000030  2000              MOVS     r0,#0
000032  5560              STRB     r0,[r4,r5]
000034  1c6d              ADDS     r5,r5,#1              ;296
                  |L6.54|
000036  2d20              CMP      r5,#0x20              ;296
000038  dbfa              BLT      |L6.48|
;;;298    	}
;;;299    	
;;;300    	return;
;;;301    }
00003a  bd70              POP      {r4-r6,pc}
;;;302    
                          ENDP

                  |L6.60|
                          DCD      fun_flag

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;305    
;;;306    int main(void)
000000  f7fffffe          BL       RCC_Configuration
;;;307    {
;;;308    	int key;
;;;309    	RCC_Configuration();   //初始化系统
;;;310    	NVIC_Configuration();	
000004  f7fffffe          BL       NVIC_Configuration
;;;311    	spi_init();
000008  f7fffffe          BL       spi_init
;;;312    	button_init();
00000c  f7fffffe          BL       button_init
;;;313    	//OLED_Init();
;;;314    	LCD_Init();
000010  f7fffffe          BL       LCD_Init
;;;315    	//OLED_Clear();
;;;316    	ad_init();
000014  f7fffffe          BL       ad_init
;;;317      Init_St7565();	 
000018  f7fffffe          BL       Init_St7565
;;;318       while (1){	
00001c  e00b              B        |L7.54|
                  |L7.30|
;;;319    		 
;;;320    		//disp_ch('_',5,4);
;;;321    		key = get_key();
00001e  f7fffffe          BL       get_key
000022  4604              MOV      r4,r0
;;;322    		me.key = key;
000024  4804              LDR      r0,|L7.56|
000026  6044              STR      r4,[r0,#4]  ; me
;;;323    		display_by_key(key, &me);
000028  4601              MOV      r1,r0
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       display_by_key
;;;324    		FSM_dispatch(me);
000030  4801              LDR      r0,|L7.56|
000032  6881              LDR      r1,[r0,#8]  ; me
000034  4788              BLX      r1
                  |L7.54|
000036  e7f2              B        |L7.30|
;;;325      }
;;;326    }
;;;327    
                          ENDP

                  |L7.56|
                          DCD      ||me||

                          AREA ||.data||, DATA, ALIGN=2

                  nrf24l01
                          DCD      0x00000000
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  fun_flag
                          DCD      0x00000001
                  addr
00000c  34431010          DCB      0x34,0x43,0x10,0x10
000010  01000000          DCB      0x01,0x00,0x00,0x00
                  ||me||
000014  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      FSM_link_start
                  tmp
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
