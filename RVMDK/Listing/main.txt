; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\main.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\STM32F10x_StdPeriph_Driver\src -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\bsp_lib -IC:\Users\Administrator\Desktop\ssr-accounts\handheld_device\RVMDK\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\main.crf ..\User\main.c]
                          THUMB

                          AREA ||i.FSM_link_connected||, CODE, READONLY, ALIGN=2

                  FSM_link_connected PROC
;;;109    
;;;110    void FSM_link_connected(struct FSM *me){
000000  b510              PUSH     {r4,lr}
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
;;;111    
;;;112    	unsigned char buf[32] = {0};
000006  2120              MOVS     r1,#0x20
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       __aeabi_memclr4
;;;113    	
;;;114    	if(me->key!=-1){
00000e  6860              LDR      r0,[r4,#4]
000010  1c40              ADDS     r0,r0,#1
000012  b1f8              CBZ      r0,|L1.84|
;;;115    		//oled_show_line3(SENDING, 0);
;;;116    		lcd_show_line3(SENDING, 0);
000014  2100              MOVS     r1,#0
000016  2007              MOVS     r0,#7
000018  f7fffffe          BL       lcd_show_line3
;;;117    		Delay_Ms(150);
00001c  2096              MOVS     r0,#0x96
00001e  f7fffffe          BL       Delay_Ms
;;;118    		key_trans(me->key, buf);
000022  88a1              LDRH     r1,[r4,#4]
000024  b288              UXTH     r0,r1
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       key_trans
;;;119    		disable_key();
00002c  f7fffffe          BL       disable_key
;;;120    		if(NRF24L01_Send(buf)==0){
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       NRF24L01_Send
000036  b920              CBNZ     r0,|L1.66|
;;;121    			//提示发送成功
;;;122    			//oled_show_line3(SEND_OK, 0);
;;;123    			lcd_show_line3(SEND_OK, 0);
000038  2100              MOVS     r1,#0
00003a  2004              MOVS     r0,#4
00003c  f7fffffe          BL       lcd_show_line3
000040  e006              B        |L1.80|
                  |L1.66|
;;;124    		}else{
;;;125    			//提示发送不成功
;;;126    //			oled_show_line3(SEND_FAIL, 0);
;;;127    			lcd_show_line3(SEND_FAIL, 0);
000042  2100              MOVS     r1,#0
000044  2003              MOVS     r0,#3
000046  f7fffffe          BL       lcd_show_line3
;;;128    			NRF24L01_TX_Mode(addr);
00004a  4803              LDR      r0,|L1.88|
00004c  f7fffffe          BL       NRF24L01_TX_Mode
                  |L1.80|
;;;129    		}
;;;130    		enable_key();
000050  f7fffffe          BL       enable_key
                  |L1.84|
;;;131    	}
;;;132    	return;
;;;133    }
000054  b008              ADD      sp,sp,#0x20
000056  bd10              POP      {r4,pc}
;;;134    
                          ENDP

                  |L1.88|
                          DCD      addr

                          AREA ||i.FSM_link_disconnected||, CODE, READONLY, ALIGN=1

                  FSM_link_disconnected PROC
;;;134    
;;;135    void FSM_link_disconnected(struct FSM *me){
000000  4770              BX       lr
;;;136    
;;;137    	//TODO
;;;138    	return;
;;;139    }
;;;140    
                          ENDP


                          AREA ||i.FSM_link_start||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  FSM_link_start PROC
;;;41     
;;;42     void FSM_link_start(struct FSM *me){
000000  b530              PUSH     {r4,r5,lr}
000002  b08b              SUB      sp,sp,#0x2c
000004  4604              MOV      r4,r0
;;;43     	int key;
;;;44     	unsigned char buf[32] = {0};
000006  2120              MOVS     r1,#0x20
000008  a803              ADD      r0,sp,#0xc
00000a  f7fffffe          BL       __aeabi_memclr4
;;;45     	
;;;46     	LCD_P8x16Str(5,0,(unsigned char*)"N");//oled_show_line1(INPUT_TYPE, "N");
00000e  a24e              ADR      r2,|L3.328|
000010  2100              MOVS     r1,#0
000012  2005              MOVS     r0,#5
000014  f7fffffe          BL       LCD_P8x16Str
;;;47     	LCD_show_line1_bmp(BMP_NO_SIGNAL);//oled_show_line1_bmp(BMP_NO_SIGNAL);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       LCD_show_line1_bmp
;;;48     	oled_clear_line(LINE2);
00001e  2001              MOVS     r0,#1
000020  f7fffffe          BL       oled_clear_line
;;;49     	oled_clear_line(LINE3);
000024  2005              MOVS     r0,#5
000026  f7fffffe          BL       oled_clear_line
;;;50       save_addr(addr);
00002a  4848              LDR      r0,|L3.332|
00002c  f7fffffe          BL       save_addr
;;;51     	if(read_addr(addr) != -1){
000030  4846              LDR      r0,|L3.332|
000032  f7fffffe          BL       read_addr
000036  1c40              ADDS     r0,r0,#1
000038  2800              CMP      r0,#0
00003a  d03d              BEQ      |L3.184|
;;;52     		sprintf(buf, "%d:%d:%d:%d:%d\0", addr[0], addr[1], addr[2], addr[3], addr[4]);
00003c  4843              LDR      r0,|L3.332|
00003e  7900              LDRB     r0,[r0,#4]  ; addr
000040  4942              LDR      r1,|L3.332|
000042  78c9              LDRB     r1,[r1,#3]  ; addr
000044  4a41              LDR      r2,|L3.332|
000046  7892              LDRB     r2,[r2,#2]  ; addr
000048  e9cd2100          STRD     r2,r1,[sp,#0]
00004c  9002              STR      r0,[sp,#8]
00004e  483f              LDR      r0,|L3.332|
000050  7843              LDRB     r3,[r0,#1]  ; addr
000052  7802              LDRB     r2,[r0,#0]  ; addr
000054  a13e              ADR      r1,|L3.336|
000056  a803              ADD      r0,sp,#0xc
000058  f7fffffe          BL       __2sprintf
;;;53     		LCD_P8x16Str(LCD_LINE4,1,buf);//OLED_ShowString(0, 2, buf);
00005c  aa03              ADD      r2,sp,#0xc
00005e  2101              MOVS     r1,#1
000060  2005              MOVS     r0,#5
000062  f7fffffe          BL       LCD_P8x16Str
;;;54     		LCD_ShowCHinese((u8*)"是",LINE4,5);//5--行  line4---列//OLED_ShowCHinese(0,LINE4,22);
000066  2205              MOVS     r2,#5
000068  2106              MOVS     r1,#6
00006a  a03d              ADR      r0,|L3.352|
00006c  f7fffffe          BL       LCD_ShowCHinese
;;;55     		LCD_ShowCHinese((u8*)"否",6*16,5);//OLED_ShowCHinese(7*16,LINE4,23);
000070  2205              MOVS     r2,#5
000072  2160              MOVS     r1,#0x60
000074  a03b              ADR      r0,|L3.356|
000076  f7fffffe          BL       LCD_ShowCHinese
;;;56     		while(1){
00007a  e01b              B        |L3.180|
                  |L3.124|
;;;57     			key = get_key();
00007c  f7fffffe          BL       get_key
000080  4605              MOV      r5,r0
;;;58     			if(BUTTON_FUN == key){
000082  2d0c              CMP      r5,#0xc
000084  d100              BNE      |L3.136|
;;;59     				break;
000086  e016              B        |L3.182|
                  |L3.136|
;;;60     			}else if(BUTTON_COLON == key){
000088  2d0d              CMP      r5,#0xd
00008a  d113              BNE      |L3.180|
;;;61     				oled_clear_line(LINE2);
00008c  2001              MOVS     r0,#1
00008e  f7fffffe          BL       oled_clear_line
;;;62     				oled_clear_line(LINE3);
000092  2005              MOVS     r0,#5
000094  f7fffffe          BL       oled_clear_line
;;;63     				oled_clear_line(LINE4);
000098  2006              MOVS     r0,#6
00009a  f7fffffe          BL       oled_clear_line
;;;64     				oled_show_line2(INPUT_ADDR, 0);
00009e  2100              MOVS     r1,#0
0000a0  2001              MOVS     r0,#1
0000a2  f7fffffe          BL       oled_show_line2
;;;65     				while(get_addr(addr)!= 0);
0000a6  bf00              NOP      
                  |L3.168|
0000a8  4828              LDR      r0,|L3.332|
0000aa  f7fffffe          BL       get_addr
0000ae  2800              CMP      r0,#0
0000b0  d1fa              BNE      |L3.168|
;;;66     				break;
0000b2  e000              B        |L3.182|
                  |L3.180|
0000b4  e7e2              B        |L3.124|
                  |L3.182|
0000b6  e012              B        |L3.222|
                  |L3.184|
;;;67     			}
;;;68     		}
;;;69     	}else{
;;;70     		oled_clear_line(LINE2);
0000b8  2001              MOVS     r0,#1
0000ba  f7fffffe          BL       oled_clear_line
;;;71     		oled_clear_line(LINE3);
0000be  2005              MOVS     r0,#5
0000c0  f7fffffe          BL       oled_clear_line
;;;72     		oled_clear_line(LINE4);
0000c4  2006              MOVS     r0,#6
0000c6  f7fffffe          BL       oled_clear_line
;;;73     		oled_show_line2(INPUT_ADDR, 0);
0000ca  2100              MOVS     r1,#0
0000cc  2001              MOVS     r0,#1
0000ce  f7fffffe          BL       oled_show_line2
;;;74     		while(get_addr(addr)!= 0);
0000d2  bf00              NOP      
                  |L3.212|
0000d4  481d              LDR      r0,|L3.332|
0000d6  f7fffffe          BL       get_addr
0000da  2800              CMP      r0,#0
0000dc  d1fa              BNE      |L3.212|
                  |L3.222|
;;;75     	}
;;;76     
;;;77     	NRF24L01_TX_Mode(addr);
0000de  481b              LDR      r0,|L3.332|
0000e0  f7fffffe          BL       NRF24L01_TX_Mode
;;;78     
;;;79     	if(NRF24L01_Send(buf)){
0000e4  a803              ADD      r0,sp,#0xc
0000e6  f7fffffe          BL       NRF24L01_Send
0000ea  b1a8              CBZ      r0,|L3.280|
;;;80     		//提示连接不成功
;;;81     //		oled_show_line3(CONNECT_STATUS_FAIL, 0);
;;;82     //		oled_show_line1(INPUT_TYPE, "N");
;;;83     //		oled_show_line1_bmp(BMP_NO_SIGNAL);
;;;84     //		oled_clear_line(LINE2);
;;;85     		lcd_show_line3(CONNECT_STATUS_FAIL, 0);//oled_show_line3(CONNECT_STATUS_OK, 0);
0000ec  2100              MOVS     r1,#0
0000ee  2001              MOVS     r0,#1
0000f0  f7fffffe          BL       lcd_show_line3
;;;86     		LCD_P8x16Str(5,0,(unsigned char*)"N");//oled_show_line1(INPUT_TYPE, "F");
0000f4  a214              ADR      r2,|L3.328|
0000f6  2100              MOVS     r1,#0
0000f8  2005              MOVS     r0,#5
0000fa  f7fffffe          BL       LCD_P8x16Str
;;;87     		LCD_show_line1_bmp(BMP_NO_SIGNAL);
0000fe  2001              MOVS     r0,#1
000100  f7fffffe          BL       LCD_show_line1_bmp
;;;88     		
;;;89     		
;;;90     		me->status = LINK_START;
000104  2000              MOVS     r0,#0
000106  7020              STRB     r0,[r4,#0]
;;;91     		me->action = FSM_link_start;
000108  f2af100b          ADR      r0,FSM_link_start + 1
00010c  60a0              STR      r0,[r4,#8]
;;;92     		Delay_Ms(2000);
00010e  f44f60fa          MOV      r0,#0x7d0
000112  f7fffffe          BL       Delay_Ms
000116  e014              B        |L3.322|
                  |L3.280|
;;;93     	}else{
;;;94     		//提示连接成功
;;;95     		lcd_clear_line(1);
000118  2001              MOVS     r0,#1
00011a  f7fffffe          BL       lcd_clear_line
;;;96     		lcd_show_line3(CONNECT_STATUS_OK, 0);//oled_show_line3(CONNECT_STATUS_OK, 0);
00011e  2100              MOVS     r1,#0
000120  2002              MOVS     r0,#2
000122  f7fffffe          BL       lcd_show_line3
;;;97     		lcd_show_line1(INPUT_TYPE,(unsigned char*)"F");//oled_show_line1(INPUT_TYPE, "F");
000126  a110              ADR      r1,|L3.360|
000128  2000              MOVS     r0,#0
00012a  f7fffffe          BL       lcd_show_line1
;;;98     		LCD_show_line1_bmp(BMP_SIGNAL);
00012e  2000              MOVS     r0,#0
000130  f7fffffe          BL       LCD_show_line1_bmp
;;;99     		//lcd_clear_line(LINE3);
;;;100    		
;;;101    		me->status = LINK_CONNECTED;
000134  2001              MOVS     r0,#1
000136  7020              STRB     r0,[r4,#0]
;;;102    		me->action = FSM_link_connected;
000138  480c              LDR      r0,|L3.364|
00013a  60a0              STR      r0,[r4,#8]
;;;103    		
;;;104    		save_addr(addr);
00013c  4803              LDR      r0,|L3.332|
00013e  f7fffffe          BL       save_addr
                  |L3.322|
;;;105    	}
;;;106    	
;;;107    	return;
;;;108    }
000142  b00b              ADD      sp,sp,#0x2c
000144  bd30              POP      {r4,r5,pc}
;;;109    
                          ENDP

000146  0000              DCW      0x0000
                  |L3.328|
000148  4e00              DCB      "N",0
00014a  00                DCB      0
00014b  00                DCB      0
                  |L3.332|
                          DCD      addr
                  |L3.336|
000150  25643a25          DCB      "%d:%d:%d:%d:%d",0
000154  643a2564
000158  3a25643a
00015c  256400  
00015f  00                DCB      0
                  |L3.352|
000160  cac700            DCB      202,199,0
000163  00                DCB      0
                  |L3.356|
000164  b7f100            DCB      183,241,0
000167  00                DCB      0
                  |L3.360|
000168  4600              DCB      "F",0
00016a  00                DCB      0
00016b  00                DCB      0
                  |L3.364|
                          DCD      FSM_link_connected

                          AREA ||i.display_by_key||, CODE, READONLY, ALIGN=2

                  display_by_key PROC
;;;152    //oled dispaly
;;;153    void display_by_key(int key, struct FSM *me){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;154    	static u32 tmp = 0;
;;;155    	
;;;156    	if(key < 0){
000006  2c00              CMP      r4,#0
000008  da00              BGE      |L4.12|
                  |L4.10|
;;;157    		return;
;;;158    	}
;;;159    	
;;;160    	if((LINK_START != me->status) && (key == BUTTON_FUN)){
;;;161    		oled_clear_line(LINE2);
;;;162    		oled_clear_line(LINE3);
;;;163    		if(fun_flag == KEY_FUN){
;;;164    			//oled_show_line1(INPUT_TYPE, "N");
;;;165    			lcd_clear_line(1);
;;;166    			lcd_clear_line(2);
;;;167    			lcd_clear_line(3);
;;;168    			lcd_clear_line(4);
;;;169    //			LCD_P8x16Str(0,INPUT_TYPE,(unsigned char*)" ");
;;;170    //			LCD_P8x16Str(1,INPUT_TYPE,(unsigned char*)" ");
;;;171    //			LCD_P8x16Str(2,INPUT_TYPE,(unsigned char*)" ");
;;;172    //			LCD_P8x16Str(3,INPUT_TYPE,(unsigned char*)" ");
;;;173    //			LCD_P8x16Str(4,INPUT_TYPE,(unsigned char*)" ");
;;;174    			LCD_P8x16Str(5,INPUT_TYPE,(unsigned char*)" ");
;;;175    		
;;;176    			lcd_show_line1(INPUT_TYPE,(unsigned char*)"N");
;;;177    			fun_flag = KEY_NUM;
;;;178    			tmp = 0;
;;;179    			//oled_show_line2(INPUT_NUM, BUTTON_OK);
;;;180    			  lcd_show_line2(INPUT_NUM,BUTTON_OK);
;;;181    //			LCD_P8x16Str(0,INPUT_NUM,(unsigned char*)"_");
;;;182    		}else if(fun_flag == KEY_NUM){
;;;183    			//oled_show_line1(INPUT_TYPE, "F");
;;;184    			lcd_clear_line(1);
;;;185    			lcd_clear_line(2);
;;;186    			lcd_clear_line(3);
;;;187    			lcd_clear_line(4);
;;;188    			LCD_P8x16Str(5,INPUT_TYPE,(unsigned char*)" ");
;;;189    			//LCD_P8x16Str(0,INPUT_TYPE,(unsigned char*)"F");
;;;190    			lcd_show_line1(INPUT_TYPE,(unsigned char*)"F");
;;;191    			fun_flag = KEY_FUN;
;;;192    		}
;;;193    		me->key = -1;
;;;194    		return;
;;;195    	}
;;;196    	
;;;197    	if(LINK_CONNECTED == me->status){
;;;198    		if(KEY_FUN == fun_flag){
;;;199    			if(key>9){
;;;200    				me->key = -1;
;;;201    				return;
;;;202    			}
;;;203    			switch(key){
;;;204    				case 0:
;;;205    					//oled_show_line2(FUN_LIGHT_OFF, key);
;;;206    				  lcd_show_line2(FUN_LIGHT_OFF, key);
;;;207    					break;	
;;;208    				case 1:
;;;209    					//oled_show_line2(FUN_LIGHT_RED, key);
;;;210    				  lcd_show_line2(FUN_LIGHT_RED, key);
;;;211    					break;				
;;;212    				case 2:
;;;213    					//oled_show_line2(FUN_YELLOW_FLASH, key);
;;;214    				  lcd_show_line2(FUN_YELLOW_FLASH, key);
;;;215    					break;				
;;;216    				case 3:
;;;217    					//oled_show_line2(FUN_EAST_WEST_STRAIGHT, key);
;;;218    				  lcd_show_line2(FUN_EAST_WEST_STRAIGHT, key);
;;;219    					break;				
;;;220    				case 4:
;;;221    					//oled_show_line2(FUN_SOUTH_NORTH_STRAIGHT, key);
;;;222    				  lcd_show_line2(FUN_SOUTH_NORTH_STRAIGHT, key);
;;;223    					break;				
;;;224    				case 5:
;;;225    					//oled_show_line2(FUN_EAST_WEST_TURN_LEFT, key);
;;;226    				  lcd_show_line2(FUN_EAST_WEST_TURN_LEFT, key);
;;;227    					break;				
;;;228    				case 6:
;;;229    					//oled_show_line2(FUN_SOUTH_NORTH_TURN_LEFT, key);
;;;230    				  lcd_show_line2(FUN_SOUTH_NORTH_TURN_LEFT, key);
;;;231    					break;
;;;232    				
;;;233    				case 7:
;;;234    					//oled_show_line2(FUN_HANDLE_CONTROL_CANCEL, key);
;;;235    				  lcd_show_line2(FUN_HANDLE_CONTROL_CANCEL, key);
;;;236    					break;
;;;237    				
;;;238    				case 8:
;;;239              lcd_show_line2(FUN_EAST_WEST_TURN_LEFT, key);
;;;240    					break;						
;;;241    				case 9:
;;;242    				case 10:
;;;243    				case 11:
;;;244    				case 12:		
;;;245    				case 13:
;;;246    					oled_clear_line(LINE2);
;;;247    					break;					
;;;248    				default:
;;;249    					break;
;;;250    			}
;;;251    		}else if(KEY_NUM == fun_flag){//用户自定义方案号
;;;252    			//oled_clear_line(LINE2);			
;;;253    			//oled_clear_line(LINE3);			
;;;254    			lcd_clear_line(1);
;;;255    			lcd_clear_line(2);
;;;256    			lcd_clear_line(3);
;;;257    			lcd_clear_line(4);
;;;258    			tmp = 0;
;;;259    			//oled_show_line2(INPUT_NUM, BUTTON_OK);
;;;260    			lcd_show_line2(INPUT_NUM, BUTTON_OK);
;;;261    			while(key != BUTTON_OK){				
;;;262    				if(BUTTON_FUN == key){//切换功能
;;;263    					//oled_clear_line(LINE2);
;;;264    					//oled_show_line1(INPUT_TYPE, "F");
;;;265    					lcd_clear_line(1);
;;;266    					lcd_clear_line(2);
;;;267    			    lcd_clear_line(3);
;;;268    			    lcd_clear_line(4);
;;;269    					lcd_show_line1(INPUT_TYPE,(unsigned char*)"F");
;;;270    					fun_flag = KEY_FUN;
;;;271    					me->key = -1;
;;;272    					tmp = 0;
;;;273    					return;
;;;274    				}
;;;275    				if(key != -1){
;;;276    					if(key < 10){
;;;277    						tmp = tmp*10 + key;
;;;278    					}else if(BUTTON_DEL == key){
;;;279    						tmp /= 10;
;;;280    					}
;;;281    					//oled_show_line2(INPUT_NUM, key);
;;;282    					lcd_show_line2(INPUT_NUM, key);
;;;283    				}
;;;284    				key = get_key();
;;;285    			}
;;;286    			me->key = tmp;
;;;287    		}
;;;288    	}
;;;289    	
;;;290    	return;
;;;291    }
00000a  bd70              POP      {r4-r6,pc}
                  |L4.12|
00000c  7828              LDRB     r0,[r5,#0]            ;160
00000e  2800              CMP      r0,#0                 ;160
000010  d048              BEQ      |L4.164|
000012  2c0c              CMP      r4,#0xc               ;160
000014  d146              BNE      |L4.164|
000016  2001              MOVS     r0,#1                 ;161
000018  f7fffffe          BL       oled_clear_line
00001c  2005              MOVS     r0,#5                 ;162
00001e  f7fffffe          BL       oled_clear_line
000022  4873              LDR      r0,|L4.496|
000024  6800              LDR      r0,[r0,#0]            ;163  ; fun_flag
000026  2801              CMP      r0,#1                 ;163
000028  d11d              BNE      |L4.102|
00002a  f7fffffe          BL       lcd_clear_line
00002e  2002              MOVS     r0,#2                 ;166
000030  f7fffffe          BL       lcd_clear_line
000034  2003              MOVS     r0,#3                 ;167
000036  f7fffffe          BL       lcd_clear_line
00003a  2004              MOVS     r0,#4                 ;168
00003c  f7fffffe          BL       lcd_clear_line
000040  a26c              ADR      r2,|L4.500|
000042  2100              MOVS     r1,#0                 ;174
000044  2005              MOVS     r0,#5                 ;174
000046  f7fffffe          BL       LCD_P8x16Str
00004a  a16b              ADR      r1,|L4.504|
00004c  2000              MOVS     r0,#0                 ;176
00004e  f7fffffe          BL       lcd_show_line1
000052  2000              MOVS     r0,#0                 ;177
000054  4966              LDR      r1,|L4.496|
000056  6008              STR      r0,[r1,#0]            ;177  ; fun_flag
000058  4968              LDR      r1,|L4.508|
00005a  6008              STR      r0,[r1,#0]            ;178  ; tmp
00005c  210a              MOVS     r1,#0xa               ;180
00005e  2006              MOVS     r0,#6                 ;180
000060  f7fffffe          BL       lcd_show_line2
000064  e01a              B        |L4.156|
                  |L4.102|
000066  4862              LDR      r0,|L4.496|
000068  6800              LDR      r0,[r0,#0]            ;182  ; fun_flag
00006a  b9b8              CBNZ     r0,|L4.156|
00006c  2001              MOVS     r0,#1                 ;184
00006e  f7fffffe          BL       lcd_clear_line
000072  2002              MOVS     r0,#2                 ;185
000074  f7fffffe          BL       lcd_clear_line
000078  2003              MOVS     r0,#3                 ;186
00007a  f7fffffe          BL       lcd_clear_line
00007e  2004              MOVS     r0,#4                 ;187
000080  f7fffffe          BL       lcd_clear_line
000084  a25b              ADR      r2,|L4.500|
000086  2100              MOVS     r1,#0                 ;188
000088  2005              MOVS     r0,#5                 ;188
00008a  f7fffffe          BL       LCD_P8x16Str
00008e  a15c              ADR      r1,|L4.512|
000090  2000              MOVS     r0,#0                 ;190
000092  f7fffffe          BL       lcd_show_line1
000096  2001              MOVS     r0,#1                 ;191
000098  4955              LDR      r1,|L4.496|
00009a  6008              STR      r0,[r1,#0]            ;191  ; fun_flag
                  |L4.156|
00009c  f04f30ff          MOV      r0,#0xffffffff        ;193
0000a0  6068              STR      r0,[r5,#4]            ;193
0000a2  e7b2              B        |L4.10|
                  |L4.164|
0000a4  7828              LDRB     r0,[r5,#0]            ;197
0000a6  2801              CMP      r0,#1                 ;197
0000a8  d149              BNE      |L4.318|
0000aa  4851              LDR      r0,|L4.496|
0000ac  6800              LDR      r0,[r0,#0]            ;198  ; fun_flag
0000ae  2801              CMP      r0,#1                 ;198
0000b0  d146              BNE      |L4.320|
0000b2  2c09              CMP      r4,#9                 ;199
0000b4  dd02              BLE      |L4.188|
0000b6  1e80              SUBS     r0,r0,#2              ;200
0000b8  6068              STR      r0,[r5,#4]            ;200
0000ba  e7a6              B        |L4.10|
                  |L4.188|
0000bc  2c0e              CMP      r4,#0xe               ;203
0000be  d23d              BCS      |L4.316|
0000c0  e8dff004          TBB      [pc,r4]               ;203
0000c4  070c1116          DCB      0x07,0x0c,0x11,0x16
0000c8  1b20252a          DCB      0x1b,0x20,0x25,0x2a
0000cc  2f343536          DCB      0x2f,0x34,0x35,0x36
0000d0  3738              DCB      0x37,0x38
0000d2  b2e1              UXTB     r1,r4                 ;206
0000d4  2002              MOVS     r0,#2                 ;206
0000d6  f7fffffe          BL       lcd_show_line2
0000da  e030              B        |L4.318|
0000dc  b2e1              UXTB     r1,r4                 ;210
0000de  2003              MOVS     r0,#3                 ;210
0000e0  f7fffffe          BL       lcd_show_line2
0000e4  e02b              B        |L4.318|
0000e6  b2e1              UXTB     r1,r4                 ;214
0000e8  2004              MOVS     r0,#4                 ;214
0000ea  f7fffffe          BL       lcd_show_line2
0000ee  e026              B        |L4.318|
0000f0  b2e1              UXTB     r1,r4                 ;218
0000f2  2005              MOVS     r0,#5                 ;218
0000f4  f7fffffe          BL       lcd_show_line2
0000f8  e021              B        |L4.318|
0000fa  b2e1              UXTB     r1,r4                 ;222
0000fc  2007              MOVS     r0,#7                 ;222
0000fe  f7fffffe          BL       lcd_show_line2
000102  e01c              B        |L4.318|
000104  b2e1              UXTB     r1,r4                 ;226
000106  2008              MOVS     r0,#8                 ;226
000108  f7fffffe          BL       lcd_show_line2
00010c  e017              B        |L4.318|
00010e  b2e1              UXTB     r1,r4                 ;230
000110  2009              MOVS     r0,#9                 ;230
000112  f7fffffe          BL       lcd_show_line2
000116  e012              B        |L4.318|
000118  b2e1              UXTB     r1,r4                 ;235
00011a  200a              MOVS     r0,#0xa               ;235
00011c  f7fffffe          BL       lcd_show_line2
000120  e00d              B        |L4.318|
000122  b2e1              UXTB     r1,r4                 ;239
000124  2008              MOVS     r0,#8                 ;239
000126  f7fffffe          BL       lcd_show_line2
00012a  e008              B        |L4.318|
00012c  bf00              NOP                            ;242
00012e  bf00              NOP                            ;243
000130  bf00              NOP                            ;244
000132  bf00              NOP                            ;245
000134  2001              MOVS     r0,#1                 ;246
000136  f7fffffe          BL       oled_clear_line
00013a  e000              B        |L4.318|
                  |L4.316|
00013c  bf00              NOP                            ;249
                  |L4.318|
00013e  e054              B        |L4.490|
                  |L4.320|
000140  482b              LDR      r0,|L4.496|
000142  6800              LDR      r0,[r0,#0]            ;251  ; fun_flag
000144  2800              CMP      r0,#0                 ;251
000146  d150              BNE      |L4.490|
000148  2001              MOVS     r0,#1                 ;254
00014a  f7fffffe          BL       lcd_clear_line
00014e  2002              MOVS     r0,#2                 ;255
000150  f7fffffe          BL       lcd_clear_line
000154  2003              MOVS     r0,#3                 ;256
000156  f7fffffe          BL       lcd_clear_line
00015a  2004              MOVS     r0,#4                 ;257
00015c  f7fffffe          BL       lcd_clear_line
000160  2000              MOVS     r0,#0                 ;258
000162  4926              LDR      r1,|L4.508|
000164  6008              STR      r0,[r1,#0]            ;258  ; tmp
000166  210a              MOVS     r1,#0xa               ;260
000168  2006              MOVS     r0,#6                 ;260
00016a  f7fffffe          BL       lcd_show_line2
00016e  e037              B        |L4.480|
                  |L4.368|
000170  2c0c              CMP      r4,#0xc               ;262
000172  d118              BNE      |L4.422|
000174  2001              MOVS     r0,#1                 ;265
000176  f7fffffe          BL       lcd_clear_line
00017a  2002              MOVS     r0,#2                 ;266
00017c  f7fffffe          BL       lcd_clear_line
000180  2003              MOVS     r0,#3                 ;267
000182  f7fffffe          BL       lcd_clear_line
000186  2004              MOVS     r0,#4                 ;268
000188  f7fffffe          BL       lcd_clear_line
00018c  a11c              ADR      r1,|L4.512|
00018e  2000              MOVS     r0,#0                 ;269
000190  f7fffffe          BL       lcd_show_line1
000194  2001              MOVS     r0,#1                 ;270
000196  4916              LDR      r1,|L4.496|
000198  6008              STR      r0,[r1,#0]            ;270  ; fun_flag
00019a  1e80              SUBS     r0,r0,#2              ;271
00019c  6068              STR      r0,[r5,#4]            ;271
00019e  2000              MOVS     r0,#0                 ;272
0001a0  4916              LDR      r1,|L4.508|
0001a2  6008              STR      r0,[r1,#0]            ;272  ; tmp
0001a4  e731              B        |L4.10|
                  |L4.422|
0001a6  1c60              ADDS     r0,r4,#1              ;275
0001a8  b1b8              CBZ      r0,|L4.474|
0001aa  2c0a              CMP      r4,#0xa               ;276
0001ac  da08              BGE      |L4.448|
0001ae  4813              LDR      r0,|L4.508|
0001b0  6800              LDR      r0,[r0,#0]            ;277  ; tmp
0001b2  eb000080          ADD      r0,r0,r0,LSL #2       ;277
0001b6  eb040040          ADD      r0,r4,r0,LSL #1       ;277
0001ba  4910              LDR      r1,|L4.508|
0001bc  6008              STR      r0,[r1,#0]            ;277  ; tmp
0001be  e008              B        |L4.466|
                  |L4.448|
0001c0  2c0b              CMP      r4,#0xb               ;278
0001c2  d106              BNE      |L4.466|
0001c4  480d              LDR      r0,|L4.508|
0001c6  6800              LDR      r0,[r0,#0]            ;279  ; tmp
0001c8  210a              MOVS     r1,#0xa               ;279
0001ca  fbb0f0f1          UDIV     r0,r0,r1              ;279
0001ce  490b              LDR      r1,|L4.508|
0001d0  6008              STR      r0,[r1,#0]            ;279  ; tmp
                  |L4.466|
0001d2  b2e1              UXTB     r1,r4                 ;282
0001d4  2006              MOVS     r0,#6                 ;282
0001d6  f7fffffe          BL       lcd_show_line2
                  |L4.474|
0001da  f7fffffe          BL       get_key
0001de  4604              MOV      r4,r0                 ;284
                  |L4.480|
0001e0  2c0a              CMP      r4,#0xa               ;261
0001e2  d1c5              BNE      |L4.368|
0001e4  4805              LDR      r0,|L4.508|
0001e6  6800              LDR      r0,[r0,#0]            ;286  ; tmp
0001e8  6068              STR      r0,[r5,#4]            ;286
                  |L4.490|
0001ea  bf00              NOP                            ;290
0001ec  e70d              B        |L4.10|
;;;292    
                          ENDP

0001ee  0000              DCW      0x0000
                  |L4.496|
                          DCD      fun_flag
                  |L4.500|
0001f4  2000              DCB      " ",0
0001f6  00                DCB      0
0001f7  00                DCB      0
                  |L4.504|
0001f8  4e00              DCB      "N",0
0001fa  00                DCB      0
0001fb  00                DCB      0
                  |L4.508|
                          DCD      tmp
                  |L4.512|
000200  4600              DCB      "F",0
000202  00                DCB      0
000203  00                DCB      0

                          AREA ||i.fun_xor||, CODE, READONLY, ALIGN=1

                  fun_xor PROC
;;;140    
;;;141    static u8 fun_xor(char *p, int len){
000000  b510              PUSH     {r4,lr}
000002  4602              MOV      r2,r0
;;;142    	u8 ret = 0;
000004  2000              MOVS     r0,#0
;;;143    	
;;;144    	while(len --){
000006  e002              B        |L5.14|
                  |L5.8|
;;;145    		ret = ret ^ *p;
000008  7813              LDRB     r3,[r2,#0]
00000a  4058              EORS     r0,r0,r3
;;;146    		p += 1;
00000c  1c52              ADDS     r2,r2,#1
                  |L5.14|
00000e  000b              MOVS     r3,r1                 ;144
000010  f1a10101          SUB      r1,r1,#1              ;144
000014  d1f8              BNE      |L5.8|
;;;147    	}
;;;148    	
;;;149    	return ret;
;;;150    }
000016  bd10              POP      {r4,pc}
;;;151    
                          ENDP


                          AREA ||i.key_trans||, CODE, READONLY, ALIGN=2

                  key_trans PROC
;;;292    
;;;293    void key_trans(u16 key, u8 *data){
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;294    	int i;
;;;295    	
;;;296    	if(fun_flag == KEY_FUN){
000006  480d              LDR      r0,|L6.60|
000008  6800              LDR      r0,[r0,#0]  ; fun_flag
00000a  2801              CMP      r0,#1
00000c  d102              BNE      |L6.20|
;;;297    		data[0] = 2;
00000e  2002              MOVS     r0,#2
000010  7020              STRB     r0,[r4,#0]
000012  e001              B        |L6.24|
                  |L6.20|
;;;298    	}else{
;;;299    		data[0] = 1;
000014  2001              MOVS     r0,#1
000016  7020              STRB     r0,[r4,#0]
                  |L6.24|
;;;300    	}
;;;301    	data[1] = 2;//数据长度
000018  2002              MOVS     r0,#2
00001a  7060              STRB     r0,[r4,#1]
;;;302    	data[2] = (key>>8)&0xFF;
00001c  0a30              LSRS     r0,r6,#8
00001e  70a0              STRB     r0,[r4,#2]
;;;303    	data[3] = key&0xFF;
000020  70e6              STRB     r6,[r4,#3]
;;;304    	data[4] = fun_xor(data, 4);
000022  2104              MOVS     r1,#4
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       fun_xor
00002a  7120              STRB     r0,[r4,#4]
;;;305    	for(i=5;i<32;i++){
00002c  2505              MOVS     r5,#5
00002e  e002              B        |L6.54|
                  |L6.48|
;;;306    		data[i] = 0;
000030  2000              MOVS     r0,#0
000032  5560              STRB     r0,[r4,r5]
000034  1c6d              ADDS     r5,r5,#1              ;305
                  |L6.54|
000036  2d20              CMP      r5,#0x20              ;305
000038  dbfa              BLT      |L6.48|
;;;307    	}
;;;308    	
;;;309    	return;
;;;310    }
00003a  bd70              POP      {r4-r6,pc}
;;;311    
                          ENDP

                  |L6.60|
                          DCD      fun_flag

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;314    
;;;315    int main(void)
000000  f7fffffe          BL       RCC_Configuration
;;;316    {
;;;317    	int key;
;;;318    	RCC_Configuration();   //初始化系统
;;;319    	NVIC_Configuration();	
000004  f7fffffe          BL       NVIC_Configuration
;;;320    	spi_init();
000008  f7fffffe          BL       spi_init
;;;321    	button_init();
00000c  f7fffffe          BL       button_init
;;;322    	//OLED_Init();
;;;323    	LCD_Init();
000010  f7fffffe          BL       LCD_Init
;;;324    	//OLED_Clear();
;;;325    	ad_init();
000014  f7fffffe          BL       ad_init
;;;326      Init_St7565();	 
000018  f7fffffe          BL       Init_St7565
;;;327       while (1){	
00001c  e00b              B        |L7.54|
                  |L7.30|
;;;328    		 
;;;329    		//disp_ch('_',5,4);
;;;330    		key = get_key();
00001e  f7fffffe          BL       get_key
000022  4604              MOV      r4,r0
;;;331    		me.key = key;
000024  4804              LDR      r0,|L7.56|
000026  6044              STR      r4,[r0,#4]  ; me
;;;332    		display_by_key(key, &me);
000028  4601              MOV      r1,r0
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       display_by_key
;;;333    		FSM_dispatch(me);
000030  4801              LDR      r0,|L7.56|
000032  6881              LDR      r1,[r0,#8]  ; me
000034  4788              BLX      r1
                  |L7.54|
000036  e7f2              B        |L7.30|
;;;334      }
;;;335    }
;;;336    
                          ENDP

                  |L7.56|
                          DCD      ||me||

                          AREA ||.data||, DATA, ALIGN=2

                  nrf24l01
                          DCD      0x00000000
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  fun_flag
                          DCD      0x00000001
                  addr
00000c  34431010          DCB      0x34,0x43,0x10,0x10
000010  01000000          DCB      0x01,0x00,0x00,0x00
                  ||me||
000014  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      FSM_link_start
                  tmp
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
