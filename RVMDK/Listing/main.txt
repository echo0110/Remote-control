; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\main.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\STM32F10x_StdPeriph_Driver\src -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\main.crf ..\User\main.c]
                          THUMB

                          AREA ||i.FSM_link_connected||, CODE, READONLY, ALIGN=2

                  FSM_link_connected PROC
;;;98     
;;;99     void FSM_link_connected(struct FSM *me){
000000  b510              PUSH     {r4,lr}
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
;;;100    
;;;101    	unsigned char buf[32] = {0};
000006  2120              MOVS     r1,#0x20
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       __aeabi_memclr4
;;;102    	
;;;103    	if(me->key!=-1){
00000e  6860              LDR      r0,[r4,#4]
000010  1c40              ADDS     r0,r0,#1
000012  b1f8              CBZ      r0,|L1.84|
;;;104    		oled_show_line3(SENDING, 0);
000014  2100              MOVS     r1,#0
000016  2007              MOVS     r0,#7
000018  f7fffffe          BL       oled_show_line3
;;;105    		Delay_Ms(150);
00001c  2096              MOVS     r0,#0x96
00001e  f7fffffe          BL       Delay_Ms
;;;106    		key_trans(me->key, buf);
000022  88a1              LDRH     r1,[r4,#4]
000024  b288              UXTH     r0,r1
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       key_trans
;;;107    		disable_key();
00002c  f7fffffe          BL       disable_key
;;;108    		if(NRF24L01_Send(buf)==0){
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       NRF24L01_Send
000036  b920              CBNZ     r0,|L1.66|
;;;109    			//提示发送成功
;;;110    			oled_show_line3(SEND_OK, 0);
000038  2100              MOVS     r1,#0
00003a  2004              MOVS     r0,#4
00003c  f7fffffe          BL       oled_show_line3
000040  e006              B        |L1.80|
                  |L1.66|
;;;111    		}else{
;;;112    			//提示发送不成功
;;;113    			oled_show_line3(SEND_FAIL, 0);
000042  2100              MOVS     r1,#0
000044  2003              MOVS     r0,#3
000046  f7fffffe          BL       oled_show_line3
;;;114    			NRF24L01_TX_Mode(addr);
00004a  4803              LDR      r0,|L1.88|
00004c  f7fffffe          BL       NRF24L01_TX_Mode
                  |L1.80|
;;;115    		}
;;;116    		enable_key();
000050  f7fffffe          BL       enable_key
                  |L1.84|
;;;117    	}
;;;118    	return;
;;;119    }
000054  b008              ADD      sp,sp,#0x20
000056  bd10              POP      {r4,pc}
;;;120    
                          ENDP

                  |L1.88|
                          DCD      addr

                          AREA ||i.FSM_link_disconnected||, CODE, READONLY, ALIGN=1

                  FSM_link_disconnected PROC
;;;120    
;;;121    void FSM_link_disconnected(struct FSM *me){
000000  4770              BX       lr
;;;122    
;;;123    	//TODO
;;;124    	return;
;;;125    }
;;;126    
                          ENDP


                          AREA ||i.FSM_link_start||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  FSM_link_start PROC
;;;35     
;;;36     void FSM_link_start(struct FSM *me){
000000  b530              PUSH     {r4,r5,lr}
000002  b08b              SUB      sp,sp,#0x2c
000004  4604              MOV      r4,r0
;;;37     	int key;
;;;38     	unsigned char buf[32] = {0};
000006  2120              MOVS     r1,#0x20
000008  a803              ADD      r0,sp,#0xc
00000a  f7fffffe          BL       __aeabi_memclr4
;;;39     	
;;;40     	oled_show_line1(INPUT_TYPE, "N");
00000e  a14d              ADR      r1,|L3.324|
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       oled_show_line1
;;;41     	oled_show_line1_bmp(BMP_NO_SIGNAL);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       oled_show_line1_bmp
;;;42     	oled_clear_line(LINE2);
00001c  2002              MOVS     r0,#2
00001e  f7fffffe          BL       oled_clear_line
;;;43     	oled_clear_line(LINE3);
000022  2004              MOVS     r0,#4
000024  f7fffffe          BL       oled_clear_line
;;;44     
;;;45     	if(read_addr(addr) != -1){
000028  4847              LDR      r0,|L3.328|
00002a  f7fffffe          BL       read_addr
00002e  1c40              ADDS     r0,r0,#1
000030  2800              CMP      r0,#0
000032  d03d              BEQ      |L3.176|
;;;46     		sprintf(buf, "%d:%d:%d:%d:%d\0", addr[0], addr[1], addr[2], addr[3], addr[4]);
000034  4844              LDR      r0,|L3.328|
000036  7900              LDRB     r0,[r0,#4]  ; addr
000038  4943              LDR      r1,|L3.328|
00003a  78c9              LDRB     r1,[r1,#3]  ; addr
00003c  4a42              LDR      r2,|L3.328|
00003e  7892              LDRB     r2,[r2,#2]  ; addr
000040  e9cd2100          STRD     r2,r1,[sp,#0]
000044  9002              STR      r0,[sp,#8]
000046  4840              LDR      r0,|L3.328|
000048  7843              LDRB     r3,[r0,#1]  ; addr
00004a  7802              LDRB     r2,[r0,#0]  ; addr
00004c  a13f              ADR      r1,|L3.332|
00004e  a803              ADD      r0,sp,#0xc
000050  f7fffffe          BL       __2sprintf
;;;47     		OLED_ShowString(0, 2, buf);
000054  aa03              ADD      r2,sp,#0xc
000056  2102              MOVS     r1,#2
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       OLED_ShowString
;;;48     		OLED_ShowCHinese(0,LINE4,22);
00005e  2216              MOVS     r2,#0x16
000060  2106              MOVS     r1,#6
000062  2000              MOVS     r0,#0
000064  f7fffffe          BL       OLED_ShowCHinese
;;;49     		OLED_ShowCHinese(7*16,LINE4,23);
000068  2217              MOVS     r2,#0x17
00006a  2106              MOVS     r1,#6
00006c  2070              MOVS     r0,#0x70
00006e  f7fffffe          BL       OLED_ShowCHinese
;;;50     		while(1){
000072  e01b              B        |L3.172|
                  |L3.116|
;;;51     			key = get_key();
000074  f7fffffe          BL       get_key
000078  4605              MOV      r5,r0
;;;52     			if(BUTTON_FUN == key){
00007a  2d0c              CMP      r5,#0xc
00007c  d100              BNE      |L3.128|
;;;53     				break;
00007e  e016              B        |L3.174|
                  |L3.128|
;;;54     			}else if(BUTTON_COLON == key){
000080  2d0d              CMP      r5,#0xd
000082  d113              BNE      |L3.172|
;;;55     				oled_clear_line(LINE2);
000084  2002              MOVS     r0,#2
000086  f7fffffe          BL       oled_clear_line
;;;56     				oled_clear_line(LINE3);
00008a  2004              MOVS     r0,#4
00008c  f7fffffe          BL       oled_clear_line
;;;57     				oled_clear_line(LINE4);
000090  2006              MOVS     r0,#6
000092  f7fffffe          BL       oled_clear_line
;;;58     				oled_show_line2(INPUT_ADDR, 0);
000096  2100              MOVS     r1,#0
000098  2001              MOVS     r0,#1
00009a  f7fffffe          BL       oled_show_line2
;;;59     				while(get_addr(addr)!= 0);
00009e  bf00              NOP      
                  |L3.160|
0000a0  4829              LDR      r0,|L3.328|
0000a2  f7fffffe          BL       get_addr
0000a6  2800              CMP      r0,#0
0000a8  d1fa              BNE      |L3.160|
;;;60     				break;
0000aa  e000              B        |L3.174|
                  |L3.172|
0000ac  e7e2              B        |L3.116|
                  |L3.174|
0000ae  e012              B        |L3.214|
                  |L3.176|
;;;61     			}
;;;62     		}
;;;63     	}else{
;;;64     		oled_clear_line(LINE2);
0000b0  2002              MOVS     r0,#2
0000b2  f7fffffe          BL       oled_clear_line
;;;65     		oled_clear_line(LINE3);
0000b6  2004              MOVS     r0,#4
0000b8  f7fffffe          BL       oled_clear_line
;;;66     		oled_clear_line(LINE4);
0000bc  2006              MOVS     r0,#6
0000be  f7fffffe          BL       oled_clear_line
;;;67     		oled_show_line2(INPUT_ADDR, 0);
0000c2  2100              MOVS     r1,#0
0000c4  2001              MOVS     r0,#1
0000c6  f7fffffe          BL       oled_show_line2
;;;68     		while(get_addr(addr)!= 0);
0000ca  bf00              NOP      
                  |L3.204|
0000cc  481e              LDR      r0,|L3.328|
0000ce  f7fffffe          BL       get_addr
0000d2  2800              CMP      r0,#0
0000d4  d1fa              BNE      |L3.204|
                  |L3.214|
;;;69     	}
;;;70     
;;;71     	NRF24L01_TX_Mode(addr);
0000d6  481c              LDR      r0,|L3.328|
0000d8  f7fffffe          BL       NRF24L01_TX_Mode
;;;72     
;;;73     	if(NRF24L01_Send(buf)){
0000dc  a803              ADD      r0,sp,#0xc
0000de  f7fffffe          BL       NRF24L01_Send
0000e2  b1b8              CBZ      r0,|L3.276|
;;;74     		//提示连接不成功
;;;75     		oled_show_line3(CONNECT_STATUS_FAIL, 0);
0000e4  2100              MOVS     r1,#0
0000e6  2001              MOVS     r0,#1
0000e8  f7fffffe          BL       oled_show_line3
;;;76     		oled_show_line1(INPUT_TYPE, "N");
0000ec  a115              ADR      r1,|L3.324|
0000ee  2000              MOVS     r0,#0
0000f0  f7fffffe          BL       oled_show_line1
;;;77     		oled_show_line1_bmp(BMP_NO_SIGNAL);
0000f4  2001              MOVS     r0,#1
0000f6  f7fffffe          BL       oled_show_line1_bmp
;;;78     		oled_clear_line(LINE2);
0000fa  2002              MOVS     r0,#2
0000fc  f7fffffe          BL       oled_clear_line
;;;79     		
;;;80     		me->status = LINK_START;
000100  2000              MOVS     r0,#0
000102  7020              STRB     r0,[r4,#0]
;;;81     		me->action = FSM_link_start;
000104  f2af1007          ADR      r0,FSM_link_start + 1
000108  60a0              STR      r0,[r4,#8]
;;;82     		Delay_Ms(2000);
00010a  f44f60fa          MOV      r0,#0x7d0
00010e  f7fffffe          BL       Delay_Ms
000112  e014              B        |L3.318|
                  |L3.276|
;;;83     	}else{
;;;84     		//提示连接成功
;;;85     		oled_show_line3(CONNECT_STATUS_OK, 0);
000114  2100              MOVS     r1,#0
000116  2002              MOVS     r0,#2
000118  f7fffffe          BL       oled_show_line3
;;;86     		oled_show_line1(INPUT_TYPE, "F");
00011c  a10f              ADR      r1,|L3.348|
00011e  2000              MOVS     r0,#0
000120  f7fffffe          BL       oled_show_line1
;;;87     		oled_show_line1_bmp(BMP_SIGNAL);
000124  2000              MOVS     r0,#0
000126  f7fffffe          BL       oled_show_line1_bmp
;;;88     		oled_clear_line(LINE2);
00012a  2002              MOVS     r0,#2
00012c  f7fffffe          BL       oled_clear_line
;;;89     		
;;;90     		me->status = LINK_CONNECTED;
000130  2001              MOVS     r0,#1
000132  7020              STRB     r0,[r4,#0]
;;;91     		me->action = FSM_link_connected;
000134  480a              LDR      r0,|L3.352|
000136  60a0              STR      r0,[r4,#8]
;;;92     		
;;;93     		save_addr(addr);
000138  4803              LDR      r0,|L3.328|
00013a  f7fffffe          BL       save_addr
                  |L3.318|
;;;94     	}
;;;95     	
;;;96     	return;
;;;97     }
00013e  b00b              ADD      sp,sp,#0x2c
000140  bd30              POP      {r4,r5,pc}
;;;98     
                          ENDP

000142  0000              DCW      0x0000
                  |L3.324|
000144  4e00              DCB      "N",0
000146  00                DCB      0
000147  00                DCB      0
                  |L3.328|
                          DCD      addr
                  |L3.332|
00014c  25643a25          DCB      "%d:%d:%d:%d:%d",0
000150  643a2564
000154  3a25643a
000158  256400  
00015b  00                DCB      0
                  |L3.348|
00015c  4600              DCB      "F",0
00015e  00                DCB      0
00015f  00                DCB      0
                  |L3.352|
                          DCD      FSM_link_connected

                          AREA ||i.display_by_key||, CODE, READONLY, ALIGN=2

                  display_by_key PROC
;;;138    //oled dispaly
;;;139    void display_by_key(int key, struct FSM *me){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;140    	static u32 tmp = 0;
;;;141    	
;;;142    	if(key < 0){
000006  2c00              CMP      r4,#0
000008  da00              BGE      |L4.12|
                  |L4.10|
;;;143    		return;
;;;144    	}
;;;145    	
;;;146    	if((LINK_START != me->status) && (key == BUTTON_FUN)){
;;;147    		oled_clear_line(LINE2);
;;;148    		oled_clear_line(LINE3);
;;;149    		if(fun_flag == KEY_FUN){
;;;150    			oled_show_line1(INPUT_TYPE, "N");
;;;151    			fun_flag = KEY_NUM;
;;;152    			tmp = 0;
;;;153    			oled_show_line2(INPUT_NUM, BUTTON_OK);
;;;154    		}else if(fun_flag == KEY_NUM){
;;;155    			oled_show_line1(INPUT_TYPE, "F");
;;;156    			fun_flag = KEY_FUN;
;;;157    		}
;;;158    		me->key = -1;
;;;159    		return;
;;;160    	}
;;;161    	
;;;162    	if(LINK_CONNECTED == me->status){
;;;163    		if(KEY_FUN == fun_flag){
;;;164    			if(key>9){
;;;165    				me->key = -1;
;;;166    				return;
;;;167    			}
;;;168    			switch(key){
;;;169    				case 0:
;;;170    					oled_show_line2(FUN_LIGHT_OFF, key);
;;;171    					break;	
;;;172    				case 1:
;;;173    					oled_show_line2(FUN_LIGHT_RED, key);
;;;174    					break;				
;;;175    				case 2:
;;;176    					oled_show_line2(FUN_YELLOW_FLASH, key);
;;;177    					break;				
;;;178    				case 3:
;;;179    					oled_show_line2(FUN_EAST_WEST_STRAIGHT, key);
;;;180    					break;				
;;;181    				case 4:
;;;182    					oled_show_line2(FUN_SOUTH_NORTH_STRAIGHT, key);
;;;183    					break;				
;;;184    				case 5:
;;;185    					oled_show_line2(FUN_EAST_WEST_TURN_LEFT, key);
;;;186    					break;				
;;;187    				case 6:
;;;188    					oled_show_line2(FUN_SOUTH_NORTH_TURN_LEFT, key);
;;;189    					break;
;;;190    				
;;;191    				case 7:
;;;192    					oled_show_line2(FUN_HANDLE_CONTROL_CANCEL, key);
;;;193    					break;
;;;194    				
;;;195    				case 8:			
;;;196    				case 9:
;;;197    				case 10:
;;;198    				case 11:
;;;199    				case 12:		
;;;200    				case 13:
;;;201    					oled_clear_line(LINE2);
;;;202    					break;					
;;;203    				default:
;;;204    					break;
;;;205    			}
;;;206    		}else if(KEY_NUM == fun_flag){//用户自定义方案号
;;;207    			oled_clear_line(LINE2);
;;;208    			oled_clear_line(LINE3);
;;;209    			tmp = 0;
;;;210    			oled_show_line2(INPUT_NUM, BUTTON_OK);
;;;211    			while(key != BUTTON_OK){				
;;;212    				if(BUTTON_FUN == key){//切换功能
;;;213    					oled_clear_line(LINE2);
;;;214    					oled_show_line1(INPUT_TYPE, "F");
;;;215    					fun_flag = KEY_FUN;
;;;216    					me->key = -1;
;;;217    					tmp = 0;
;;;218    					return;
;;;219    				}
;;;220    				if(key != -1){
;;;221    					if(key < 10){
;;;222    						tmp = tmp*10 + key;
;;;223    					}else if(BUTTON_DEL == key){
;;;224    						tmp /= 10;
;;;225    					}
;;;226    					oled_show_line2(INPUT_NUM, key);
;;;227    				}
;;;228    				key = get_key();
;;;229    			}
;;;230    			me->key = tmp;
;;;231    		}
;;;232    	}
;;;233    	
;;;234    	return;
;;;235    }
00000a  bd70              POP      {r4-r6,pc}
                  |L4.12|
00000c  7828              LDRB     r0,[r5,#0]            ;146
00000e  b338              CBZ      r0,|L4.96|
000010  2c0c              CMP      r4,#0xc               ;146
000012  d125              BNE      |L4.96|
000014  2002              MOVS     r0,#2                 ;147
000016  f7fffffe          BL       oled_clear_line
00001a  2004              MOVS     r0,#4                 ;148
00001c  f7fffffe          BL       oled_clear_line
000020  4859              LDR      r0,|L4.392|
000022  6800              LDR      r0,[r0,#0]            ;149  ; fun_flag
000024  2801              CMP      r0,#1                 ;149
000026  d10d              BNE      |L4.68|
000028  a158              ADR      r1,|L4.396|
00002a  2000              MOVS     r0,#0                 ;150
00002c  f7fffffe          BL       oled_show_line1
000030  2000              MOVS     r0,#0                 ;151
000032  4955              LDR      r1,|L4.392|
000034  6008              STR      r0,[r1,#0]            ;151  ; fun_flag
000036  4956              LDR      r1,|L4.400|
000038  6008              STR      r0,[r1,#0]            ;152  ; tmp
00003a  210a              MOVS     r1,#0xa               ;153
00003c  2006              MOVS     r0,#6                 ;153
00003e  f7fffffe          BL       oled_show_line2
000042  e009              B        |L4.88|
                  |L4.68|
000044  4850              LDR      r0,|L4.392|
000046  6800              LDR      r0,[r0,#0]            ;154  ; fun_flag
000048  b930              CBNZ     r0,|L4.88|
00004a  a152              ADR      r1,|L4.404|
00004c  2000              MOVS     r0,#0                 ;155
00004e  f7fffffe          BL       oled_show_line1
000052  2001              MOVS     r0,#1                 ;156
000054  494c              LDR      r1,|L4.392|
000056  6008              STR      r0,[r1,#0]            ;156  ; fun_flag
                  |L4.88|
000058  f04f30ff          MOV      r0,#0xffffffff        ;158
00005c  6068              STR      r0,[r5,#4]            ;158
00005e  e7d4              B        |L4.10|
                  |L4.96|
000060  7828              LDRB     r0,[r5,#0]            ;162
000062  2801              CMP      r0,#1                 ;162
000064  d145              BNE      |L4.242|
000066  4848              LDR      r0,|L4.392|
000068  6800              LDR      r0,[r0,#0]            ;163  ; fun_flag
00006a  2801              CMP      r0,#1                 ;163
00006c  d142              BNE      |L4.244|
00006e  2c09              CMP      r4,#9                 ;164
000070  dd02              BLE      |L4.120|
000072  1e80              SUBS     r0,r0,#2              ;165
000074  6068              STR      r0,[r5,#4]            ;165
000076  e7c8              B        |L4.10|
                  |L4.120|
000078  2c0e              CMP      r4,#0xe               ;168
00007a  d239              BCS      |L4.240|
00007c  e8dff004          TBB      [pc,r4]               ;168
000080  070c1116          DCB      0x07,0x0c,0x11,0x16
000084  1b20252a          DCB      0x1b,0x20,0x25,0x2a
000088  2f303132          DCB      0x2f,0x30,0x31,0x32
00008c  3334              DCB      0x33,0x34
00008e  b2e1              UXTB     r1,r4                 ;170
000090  2002              MOVS     r0,#2                 ;170
000092  f7fffffe          BL       oled_show_line2
000096  e02c              B        |L4.242|
000098  b2e1              UXTB     r1,r4                 ;173
00009a  2003              MOVS     r0,#3                 ;173
00009c  f7fffffe          BL       oled_show_line2
0000a0  e027              B        |L4.242|
0000a2  b2e1              UXTB     r1,r4                 ;176
0000a4  2004              MOVS     r0,#4                 ;176
0000a6  f7fffffe          BL       oled_show_line2
0000aa  e022              B        |L4.242|
0000ac  b2e1              UXTB     r1,r4                 ;179
0000ae  2005              MOVS     r0,#5                 ;179
0000b0  f7fffffe          BL       oled_show_line2
0000b4  e01d              B        |L4.242|
0000b6  b2e1              UXTB     r1,r4                 ;182
0000b8  2007              MOVS     r0,#7                 ;182
0000ba  f7fffffe          BL       oled_show_line2
0000be  e018              B        |L4.242|
0000c0  b2e1              UXTB     r1,r4                 ;185
0000c2  2008              MOVS     r0,#8                 ;185
0000c4  f7fffffe          BL       oled_show_line2
0000c8  e013              B        |L4.242|
0000ca  b2e1              UXTB     r1,r4                 ;188
0000cc  2009              MOVS     r0,#9                 ;188
0000ce  f7fffffe          BL       oled_show_line2
0000d2  e00e              B        |L4.242|
0000d4  b2e1              UXTB     r1,r4                 ;192
0000d6  200a              MOVS     r0,#0xa               ;192
0000d8  f7fffffe          BL       oled_show_line2
0000dc  e009              B        |L4.242|
0000de  bf00              NOP                            ;196
0000e0  bf00              NOP                            ;197
0000e2  bf00              NOP                            ;198
0000e4  bf00              NOP                            ;199
0000e6  bf00              NOP                            ;200
0000e8  2002              MOVS     r0,#2                 ;201
0000ea  f7fffffe          BL       oled_clear_line
0000ee  e000              B        |L4.242|
                  |L4.240|
0000f0  bf00              NOP                            ;204
                  |L4.242|
0000f2  e046              B        |L4.386|
                  |L4.244|
0000f4  4824              LDR      r0,|L4.392|
0000f6  6800              LDR      r0,[r0,#0]            ;206  ; fun_flag
0000f8  bbf0              CBNZ     r0,|L4.376|
0000fa  2002              MOVS     r0,#2                 ;207
0000fc  f7fffffe          BL       oled_clear_line
000100  2004              MOVS     r0,#4                 ;208
000102  f7fffffe          BL       oled_clear_line
000106  2000              MOVS     r0,#0                 ;209
000108  4921              LDR      r1,|L4.400|
00010a  6008              STR      r0,[r1,#0]            ;209  ; tmp
00010c  210a              MOVS     r1,#0xa               ;210
00010e  2006              MOVS     r0,#6                 ;210
000110  f7fffffe          BL       oled_show_line2
000114  e02e              B        |L4.372|
                  |L4.278|
000116  2c0c              CMP      r4,#0xc               ;212
000118  d10f              BNE      |L4.314|
00011a  2002              MOVS     r0,#2                 ;213
00011c  f7fffffe          BL       oled_clear_line
000120  a11c              ADR      r1,|L4.404|
000122  2000              MOVS     r0,#0                 ;214
000124  f7fffffe          BL       oled_show_line1
000128  2001              MOVS     r0,#1                 ;215
00012a  4917              LDR      r1,|L4.392|
00012c  6008              STR      r0,[r1,#0]            ;215  ; fun_flag
00012e  1e80              SUBS     r0,r0,#2              ;216
000130  6068              STR      r0,[r5,#4]            ;216
000132  2000              MOVS     r0,#0                 ;217
000134  4916              LDR      r1,|L4.400|
000136  6008              STR      r0,[r1,#0]            ;217  ; tmp
000138  e767              B        |L4.10|
                  |L4.314|
00013a  1c60              ADDS     r0,r4,#1              ;220
00013c  b1b8              CBZ      r0,|L4.366|
00013e  2c0a              CMP      r4,#0xa               ;221
000140  da08              BGE      |L4.340|
000142  4813              LDR      r0,|L4.400|
000144  6800              LDR      r0,[r0,#0]            ;222  ; tmp
000146  eb000080          ADD      r0,r0,r0,LSL #2       ;222
00014a  eb040040          ADD      r0,r4,r0,LSL #1       ;222
00014e  4910              LDR      r1,|L4.400|
000150  6008              STR      r0,[r1,#0]            ;222  ; tmp
000152  e008              B        |L4.358|
                  |L4.340|
000154  2c0b              CMP      r4,#0xb               ;223
000156  d106              BNE      |L4.358|
000158  480d              LDR      r0,|L4.400|
00015a  6800              LDR      r0,[r0,#0]            ;224  ; tmp
00015c  210a              MOVS     r1,#0xa               ;224
00015e  fbb0f0f1          UDIV     r0,r0,r1              ;224
000162  490b              LDR      r1,|L4.400|
000164  6008              STR      r0,[r1,#0]            ;224  ; tmp
                  |L4.358|
000166  b2e1              UXTB     r1,r4                 ;226
000168  2006              MOVS     r0,#6                 ;226
00016a  f7fffffe          BL       oled_show_line2
                  |L4.366|
00016e  f7fffffe          BL       get_key
000172  4604              MOV      r4,r0                 ;228
                  |L4.372|
000174  2c0a              CMP      r4,#0xa               ;211
000176  e000              B        |L4.378|
                  |L4.376|
000178  e003              B        |L4.386|
                  |L4.378|
00017a  d1cc              BNE      |L4.278|
00017c  4804              LDR      r0,|L4.400|
00017e  6800              LDR      r0,[r0,#0]            ;230  ; tmp
000180  6068              STR      r0,[r5,#4]            ;230
                  |L4.386|
000182  bf00              NOP                            ;234
000184  e741              B        |L4.10|
;;;236    
                          ENDP

000186  0000              DCW      0x0000
                  |L4.392|
                          DCD      fun_flag
                  |L4.396|
00018c  4e00              DCB      "N",0
00018e  00                DCB      0
00018f  00                DCB      0
                  |L4.400|
                          DCD      tmp
                  |L4.404|
000194  4600              DCB      "F",0
000196  00                DCB      0
000197  00                DCB      0

                          AREA ||i.fun_xor||, CODE, READONLY, ALIGN=1

                  fun_xor PROC
;;;126    
;;;127    static u8 fun_xor(char *p, int len){
000000  b510              PUSH     {r4,lr}
000002  4602              MOV      r2,r0
;;;128    	u8 ret = 0;
000004  2000              MOVS     r0,#0
;;;129    	
;;;130    	while(len --){
000006  e002              B        |L5.14|
                  |L5.8|
;;;131    		ret = ret ^ *p;
000008  7813              LDRB     r3,[r2,#0]
00000a  4058              EORS     r0,r0,r3
;;;132    		p += 1;
00000c  1c52              ADDS     r2,r2,#1
                  |L5.14|
00000e  000b              MOVS     r3,r1                 ;130
000010  f1a10101          SUB      r1,r1,#1              ;130
000014  d1f8              BNE      |L5.8|
;;;133    	}
;;;134    	
;;;135    	return ret;
;;;136    }
000016  bd10              POP      {r4,pc}
;;;137    
                          ENDP


                          AREA ||i.key_trans||, CODE, READONLY, ALIGN=2

                  key_trans PROC
;;;236    
;;;237    void key_trans(u16 key, u8 *data){
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;238    	int i;
;;;239    	
;;;240    	if(fun_flag == KEY_FUN){
000006  480d              LDR      r0,|L6.60|
000008  6800              LDR      r0,[r0,#0]  ; fun_flag
00000a  2801              CMP      r0,#1
00000c  d102              BNE      |L6.20|
;;;241    		data[0] = 2;
00000e  2002              MOVS     r0,#2
000010  7020              STRB     r0,[r4,#0]
000012  e001              B        |L6.24|
                  |L6.20|
;;;242    	}else{
;;;243    		data[0] = 1;
000014  2001              MOVS     r0,#1
000016  7020              STRB     r0,[r4,#0]
                  |L6.24|
;;;244    	}
;;;245    	data[1] = 2;//数据长度
000018  2002              MOVS     r0,#2
00001a  7060              STRB     r0,[r4,#1]
;;;246    	data[2] = (key>>8)&0xFF;
00001c  0a30              LSRS     r0,r6,#8
00001e  70a0              STRB     r0,[r4,#2]
;;;247    	data[3] = key&0xFF;
000020  70e6              STRB     r6,[r4,#3]
;;;248    	data[4] = fun_xor(data, 4);
000022  2104              MOVS     r1,#4
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       fun_xor
00002a  7120              STRB     r0,[r4,#4]
;;;249    	for(i=5;i<32;i++){
00002c  2505              MOVS     r5,#5
00002e  e002              B        |L6.54|
                  |L6.48|
;;;250    		data[i] = 0;
000030  2000              MOVS     r0,#0
000032  5560              STRB     r0,[r4,r5]
000034  1c6d              ADDS     r5,r5,#1              ;249
                  |L6.54|
000036  2d20              CMP      r5,#0x20              ;249
000038  dbfa              BLT      |L6.48|
;;;251    	}
;;;252    	
;;;253    	return;
;;;254    }
00003a  bd70              POP      {r4-r6,pc}
;;;255    
                          ENDP

                  |L6.60|
                          DCD      fun_flag

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;258    
;;;259    int main(void)
000000  f7fffffe          BL       RCC_Configuration
;;;260    {
;;;261    	int key;
;;;262    	RCC_Configuration();   //初始化系统
;;;263    	NVIC_Configuration();
000004  f7fffffe          BL       NVIC_Configuration
;;;264    	delay_init();	    //延时函数初始化	  
000008  f7fffffe          BL       delay_init
;;;265    	spi_init();
00000c  f7fffffe          BL       spi_init
;;;266    	button_init();
000010  f7fffffe          BL       button_init
;;;267    	OLED_Init();
000014  f7fffffe          BL       OLED_Init
;;;268    	LCD_Init();
000018  f7fffffe          BL       LCD_Init
;;;269    	OLED_Clear();
00001c  f7fffffe          BL       OLED_Clear
;;;270    	ad_init();
000020  f7fffffe          BL       ad_init
;;;271    	
;;;272    	Init_display();//init  12864 LCD
000024  f7fffffe          BL       Init_display
;;;273    
;;;274      while (1){
000028  e00b              B        |L7.66|
                  |L7.42|
;;;275    		key = get_key();
00002a  f7fffffe          BL       get_key
00002e  4604              MOV      r4,r0
;;;276    		me.key = key;
000030  4804              LDR      r0,|L7.68|
000032  6044              STR      r4,[r0,#4]  ; me
;;;277    		display_by_key(key, &me);
000034  4601              MOV      r1,r0
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       display_by_key
;;;278    		FSM_dispatch(me);
00003c  4801              LDR      r0,|L7.68|
00003e  6881              LDR      r1,[r0,#8]  ; me
000040  4788              BLX      r1
                  |L7.66|
000042  e7f2              B        |L7.42|
;;;279    		//OLED_ShowString(8*16, 0, "T");
;;;280    		//OLED_ShowString(32, 0, "T");
;;;281    		//OLED_ShowString(0, 4, "T");
;;;282    		//OLED_ShowString(0, 6, "T");
;;;283      }
;;;284    }
;;;285    
                          ENDP

                  |L7.68|
                          DCD      ||me||

                          AREA ||.data||, DATA, ALIGN=2

                  nrf24l01
                          DCD      0x00000000
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  fun_flag
                          DCD      0x00000001
                  addr
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                  ||me||
000014  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      FSM_link_start
                  tmp
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
