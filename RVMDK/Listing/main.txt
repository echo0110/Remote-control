; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\main.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\STM32F10x_StdPeriph_Driver\src -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -IC:\Users\Administrator\Desktop\ssr-accounts\handheld_device\RVMDK\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=515 -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\main.crf ..\User\main.c]
                          THUMB

                          AREA ||i.FSM_link_connected||, CODE, READONLY, ALIGN=2

                  FSM_link_connected PROC
;;;102    
;;;103    void FSM_link_connected(struct FSM *me){
000000  b510              PUSH     {r4,lr}
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
;;;104    
;;;105    	unsigned char buf[32] = {0};
000006  2120              MOVS     r1,#0x20
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       __aeabi_memclr4
;;;106    	
;;;107    	if(me->key!=-1){
00000e  6860              LDR      r0,[r4,#4]
000010  1c40              ADDS     r0,r0,#1
000012  b1f8              CBZ      r0,|L1.84|
;;;108    		oled_show_line3(SENDING, 0);
000014  2100              MOVS     r1,#0
000016  2007              MOVS     r0,#7
000018  f7fffffe          BL       oled_show_line3
;;;109    		Delay_Ms(150);
00001c  2096              MOVS     r0,#0x96
00001e  f7fffffe          BL       Delay_Ms
;;;110    		key_trans(me->key, buf);
000022  88a1              LDRH     r1,[r4,#4]
000024  b288              UXTH     r0,r1
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       key_trans
;;;111    		disable_key();
00002c  f7fffffe          BL       disable_key
;;;112    		if(NRF24L01_Send(buf)==0){
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       NRF24L01_Send
000036  b920              CBNZ     r0,|L1.66|
;;;113    			//提示发送成功
;;;114    			oled_show_line3(SEND_OK, 0);
000038  2100              MOVS     r1,#0
00003a  2004              MOVS     r0,#4
00003c  f7fffffe          BL       oled_show_line3
000040  e006              B        |L1.80|
                  |L1.66|
;;;115    		}else{
;;;116    			//提示发送不成功
;;;117    			oled_show_line3(SEND_FAIL, 0);
000042  2100              MOVS     r1,#0
000044  2003              MOVS     r0,#3
000046  f7fffffe          BL       oled_show_line3
;;;118    			NRF24L01_TX_Mode(addr);
00004a  4803              LDR      r0,|L1.88|
00004c  f7fffffe          BL       NRF24L01_TX_Mode
                  |L1.80|
;;;119    		}
;;;120    		enable_key();
000050  f7fffffe          BL       enable_key
                  |L1.84|
;;;121    	}
;;;122    	return;
;;;123    }
000054  b008              ADD      sp,sp,#0x20
000056  bd10              POP      {r4,pc}
;;;124    
                          ENDP

                  |L1.88|
                          DCD      addr

                          AREA ||i.FSM_link_disconnected||, CODE, READONLY, ALIGN=1

                  FSM_link_disconnected PROC
;;;124    
;;;125    void FSM_link_disconnected(struct FSM *me){
000000  4770              BX       lr
;;;126    
;;;127    	//TODO
;;;128    	return;
;;;129    }
;;;130    
                          ENDP


                          AREA ||i.FSM_link_start||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  FSM_link_start PROC
;;;39     
;;;40     void FSM_link_start(struct FSM *me){
000000  b530              PUSH     {r4,r5,lr}
000002  b08b              SUB      sp,sp,#0x2c
000004  4604              MOV      r4,r0
;;;41     	int key;
;;;42     	unsigned char buf[32] = {0};
000006  2120              MOVS     r1,#0x20
000008  a803              ADD      r0,sp,#0xc
00000a  f7fffffe          BL       __aeabi_memclr4
;;;43     	
;;;44     	LCD_P8x16Str(5,0,(unsigned char*)"N");//oled_show_line1(INPUT_TYPE, "N");
00000e  a24f              ADR      r2,|L3.332|
000010  2100              MOVS     r1,#0
000012  2005              MOVS     r0,#5
000014  f7fffffe          BL       LCD_P8x16Str
;;;45     	LCD_show_line1_bmp(BMP_NO_SIGNAL);//oled_show_line1_bmp(BMP_NO_SIGNAL);
000018  2001              MOVS     r0,#1
00001a  f7fffffe          BL       LCD_show_line1_bmp
;;;46     	oled_clear_line(LINE2);
00001e  2002              MOVS     r0,#2
000020  f7fffffe          BL       oled_clear_line
;;;47     	oled_clear_line(LINE3);
000024  2004              MOVS     r0,#4
000026  f7fffffe          BL       oled_clear_line
;;;48       save_addr(addr);
00002a  4849              LDR      r0,|L3.336|
00002c  f7fffffe          BL       save_addr
;;;49     	if(read_addr(addr) != -1){
000030  4847              LDR      r0,|L3.336|
000032  f7fffffe          BL       read_addr
000036  1c40              ADDS     r0,r0,#1
000038  2800              CMP      r0,#0
00003a  d03d              BEQ      |L3.184|
;;;50     		sprintf(buf, "%d:%d:%d:%d:%d\0", addr[0], addr[1], addr[2], addr[3], addr[4]);
00003c  4844              LDR      r0,|L3.336|
00003e  7900              LDRB     r0,[r0,#4]  ; addr
000040  4943              LDR      r1,|L3.336|
000042  78c9              LDRB     r1,[r1,#3]  ; addr
000044  4a42              LDR      r2,|L3.336|
000046  7892              LDRB     r2,[r2,#2]  ; addr
000048  e9cd2100          STRD     r2,r1,[sp,#0]
00004c  9002              STR      r0,[sp,#8]
00004e  4840              LDR      r0,|L3.336|
000050  7843              LDRB     r3,[r0,#1]  ; addr
000052  7802              LDRB     r2,[r0,#0]  ; addr
000054  a13f              ADR      r1,|L3.340|
000056  a803              ADD      r0,sp,#0xc
000058  f7fffffe          BL       __2sprintf
;;;51     		LCD_P8x16Str(5,1,buf);//OLED_ShowString(0, 2, buf);
00005c  aa03              ADD      r2,sp,#0xc
00005e  2101              MOVS     r1,#1
000060  2005              MOVS     r0,#5
000062  f7fffffe          BL       LCD_P8x16Str
;;;52     		LCD_ShowCHinese((u8*)"是",LINE4,5);//5--行  line4---列//OLED_ShowCHinese(0,LINE4,22);
000066  2205              MOVS     r2,#5
000068  2106              MOVS     r1,#6
00006a  a03e              ADR      r0,|L3.356|
00006c  f7fffffe          BL       LCD_ShowCHinese
;;;53     		LCD_ShowCHinese((u8*)"否",6*16,5);//OLED_ShowCHinese(7*16,LINE4,23);
000070  2205              MOVS     r2,#5
000072  2160              MOVS     r1,#0x60
000074  a03c              ADR      r0,|L3.360|
000076  f7fffffe          BL       LCD_ShowCHinese
;;;54     		while(1){
00007a  e01b              B        |L3.180|
                  |L3.124|
;;;55     			key = get_key();
00007c  f7fffffe          BL       get_key
000080  4605              MOV      r5,r0
;;;56     			if(BUTTON_FUN == key){
000082  2d0c              CMP      r5,#0xc
000084  d100              BNE      |L3.136|
;;;57     				break;
000086  e016              B        |L3.182|
                  |L3.136|
;;;58     			}else if(BUTTON_COLON == key){
000088  2d0d              CMP      r5,#0xd
00008a  d113              BNE      |L3.180|
;;;59     				oled_clear_line(LINE2);
00008c  2002              MOVS     r0,#2
00008e  f7fffffe          BL       oled_clear_line
;;;60     				oled_clear_line(LINE3);
000092  2004              MOVS     r0,#4
000094  f7fffffe          BL       oled_clear_line
;;;61     				oled_clear_line(LINE4);
000098  2006              MOVS     r0,#6
00009a  f7fffffe          BL       oled_clear_line
;;;62     				oled_show_line2(INPUT_ADDR, 0);
00009e  2100              MOVS     r1,#0
0000a0  2001              MOVS     r0,#1
0000a2  f7fffffe          BL       oled_show_line2
;;;63     				while(get_addr(addr)!= 0);
0000a6  bf00              NOP      
                  |L3.168|
0000a8  4829              LDR      r0,|L3.336|
0000aa  f7fffffe          BL       get_addr
0000ae  2800              CMP      r0,#0
0000b0  d1fa              BNE      |L3.168|
;;;64     				break;
0000b2  e000              B        |L3.182|
                  |L3.180|
0000b4  e7e2              B        |L3.124|
                  |L3.182|
0000b6  e012              B        |L3.222|
                  |L3.184|
;;;65     			}
;;;66     		}
;;;67     	}else{
;;;68     		oled_clear_line(LINE2);
0000b8  2002              MOVS     r0,#2
0000ba  f7fffffe          BL       oled_clear_line
;;;69     		oled_clear_line(LINE3);
0000be  2004              MOVS     r0,#4
0000c0  f7fffffe          BL       oled_clear_line
;;;70     		oled_clear_line(LINE4);
0000c4  2006              MOVS     r0,#6
0000c6  f7fffffe          BL       oled_clear_line
;;;71     		oled_show_line2(INPUT_ADDR, 0);
0000ca  2100              MOVS     r1,#0
0000cc  2001              MOVS     r0,#1
0000ce  f7fffffe          BL       oled_show_line2
;;;72     		while(get_addr(addr)!= 0);
0000d2  bf00              NOP      
                  |L3.212|
0000d4  481e              LDR      r0,|L3.336|
0000d6  f7fffffe          BL       get_addr
0000da  2800              CMP      r0,#0
0000dc  d1fa              BNE      |L3.212|
                  |L3.222|
;;;73     	}
;;;74     
;;;75     	NRF24L01_TX_Mode(addr);
0000de  481c              LDR      r0,|L3.336|
0000e0  f7fffffe          BL       NRF24L01_TX_Mode
;;;76     
;;;77     	if(NRF24L01_Send(buf)){
0000e4  a803              ADD      r0,sp,#0xc
0000e6  f7fffffe          BL       NRF24L01_Send
0000ea  b1b8              CBZ      r0,|L3.284|
;;;78     		//提示连接不成功
;;;79     		oled_show_line3(CONNECT_STATUS_FAIL, 0);
0000ec  2100              MOVS     r1,#0
0000ee  2001              MOVS     r0,#1
0000f0  f7fffffe          BL       oled_show_line3
;;;80     		oled_show_line1(INPUT_TYPE, "N");
0000f4  a115              ADR      r1,|L3.332|
0000f6  2000              MOVS     r0,#0
0000f8  f7fffffe          BL       oled_show_line1
;;;81     		oled_show_line1_bmp(BMP_NO_SIGNAL);
0000fc  2001              MOVS     r0,#1
0000fe  f7fffffe          BL       oled_show_line1_bmp
;;;82     		oled_clear_line(LINE2);
000102  2002              MOVS     r0,#2
000104  f7fffffe          BL       oled_clear_line
;;;83     		
;;;84     		me->status = LINK_START;
000108  2000              MOVS     r0,#0
00010a  7020              STRB     r0,[r4,#0]
;;;85     		me->action = FSM_link_start;
00010c  f2af100f          ADR      r0,FSM_link_start + 1
000110  60a0              STR      r0,[r4,#8]
;;;86     		Delay_Ms(2000);
000112  f44f60fa          MOV      r0,#0x7d0
000116  f7fffffe          BL       Delay_Ms
00011a  e014              B        |L3.326|
                  |L3.284|
;;;87     	}else{
;;;88     		//提示连接成功
;;;89     		oled_show_line3(CONNECT_STATUS_OK, 0);
00011c  2100              MOVS     r1,#0
00011e  2002              MOVS     r0,#2
000120  f7fffffe          BL       oled_show_line3
;;;90     		oled_show_line1(INPUT_TYPE, "F");
000124  a111              ADR      r1,|L3.364|
000126  2000              MOVS     r0,#0
000128  f7fffffe          BL       oled_show_line1
;;;91     		oled_show_line1_bmp(BMP_SIGNAL);
00012c  2000              MOVS     r0,#0
00012e  f7fffffe          BL       oled_show_line1_bmp
;;;92     		oled_clear_line(LINE2);
000132  2002              MOVS     r0,#2
000134  f7fffffe          BL       oled_clear_line
;;;93     		
;;;94     		me->status = LINK_CONNECTED;
000138  2001              MOVS     r0,#1
00013a  7020              STRB     r0,[r4,#0]
;;;95     		me->action = FSM_link_connected;
00013c  480c              LDR      r0,|L3.368|
00013e  60a0              STR      r0,[r4,#8]
;;;96     		
;;;97     		save_addr(addr);
000140  4803              LDR      r0,|L3.336|
000142  f7fffffe          BL       save_addr
                  |L3.326|
;;;98     	}
;;;99     	
;;;100    	return;
;;;101    }
000146  b00b              ADD      sp,sp,#0x2c
000148  bd30              POP      {r4,r5,pc}
;;;102    
                          ENDP

00014a  0000              DCW      0x0000
                  |L3.332|
00014c  4e00              DCB      "N",0
00014e  00                DCB      0
00014f  00                DCB      0
                  |L3.336|
                          DCD      addr
                  |L3.340|
000154  25643a25          DCB      "%d:%d:%d:%d:%d",0
000158  643a2564
00015c  3a25643a
000160  256400  
000163  00                DCB      0
                  |L3.356|
000164  cac700            DCB      202,199,0
000167  00                DCB      0
                  |L3.360|
000168  b7f100            DCB      183,241,0
00016b  00                DCB      0
                  |L3.364|
00016c  4600              DCB      "F",0
00016e  00                DCB      0
00016f  00                DCB      0
                  |L3.368|
                          DCD      FSM_link_connected

                          AREA ||i.display_by_key||, CODE, READONLY, ALIGN=2

                  display_by_key PROC
;;;142    //oled dispaly
;;;143    void display_by_key(int key, struct FSM *me){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;144    	static u32 tmp = 0;
;;;145    	
;;;146    	if(key < 0){
000006  2c00              CMP      r4,#0
000008  da00              BGE      |L4.12|
                  |L4.10|
;;;147    		return;
;;;148    	}
;;;149    	
;;;150    	if((LINK_START != me->status) && (key == BUTTON_FUN)){
;;;151    		oled_clear_line(LINE2);
;;;152    		oled_clear_line(LINE3);
;;;153    		if(fun_flag == KEY_FUN){
;;;154    			//oled_show_line1(INPUT_TYPE, "N");
;;;155    			LCD_P8x16Str(0,INPUT_TYPE,(unsigned char*)"N");
;;;156    			fun_flag = KEY_NUM;
;;;157    			tmp = 0;
;;;158    			//oled_show_line2(INPUT_NUM, BUTTON_OK);
;;;159    			LCD_P8x16Str(0,INPUT_NUM,(unsigned char*)"_");
;;;160    		}else if(fun_flag == KEY_NUM){
;;;161    			//oled_show_line1(INPUT_TYPE, "F");
;;;162    			LCD_P8x16Str(0,INPUT_TYPE,(unsigned char*)"F");
;;;163    			fun_flag = KEY_FUN;
;;;164    		}
;;;165    		me->key = -1;
;;;166    		return;
;;;167    	}
;;;168    	
;;;169    	if(LINK_CONNECTED == me->status){
;;;170    		if(KEY_FUN == fun_flag){
;;;171    			if(key>9){
;;;172    				me->key = -1;
;;;173    				return;
;;;174    			}
;;;175    			switch(key){
;;;176    				case 0:
;;;177    					oled_show_line2(FUN_LIGHT_OFF, key);
;;;178    					break;	
;;;179    				case 1:
;;;180    					oled_show_line2(FUN_LIGHT_RED, key);
;;;181    					break;				
;;;182    				case 2:
;;;183    					oled_show_line2(FUN_YELLOW_FLASH, key);
;;;184    					break;				
;;;185    				case 3:
;;;186    					oled_show_line2(FUN_EAST_WEST_STRAIGHT, key);
;;;187    					break;				
;;;188    				case 4:
;;;189    					oled_show_line2(FUN_SOUTH_NORTH_STRAIGHT, key);
;;;190    					break;				
;;;191    				case 5:
;;;192    					oled_show_line2(FUN_EAST_WEST_TURN_LEFT, key);
;;;193    					break;				
;;;194    				case 6:
;;;195    					oled_show_line2(FUN_SOUTH_NORTH_TURN_LEFT, key);
;;;196    					break;
;;;197    				
;;;198    				case 7:
;;;199    					oled_show_line2(FUN_HANDLE_CONTROL_CANCEL, key);
;;;200    					break;
;;;201    				
;;;202    				case 8:			
;;;203    				case 9:
;;;204    				case 10:
;;;205    				case 11:
;;;206    				case 12:		
;;;207    				case 13:
;;;208    					oled_clear_line(LINE2);
;;;209    					break;					
;;;210    				default:
;;;211    					break;
;;;212    			}
;;;213    		}else if(KEY_NUM == fun_flag){//用户自定义方案号
;;;214    			oled_clear_line(LINE2);
;;;215    			oled_clear_line(LINE3);
;;;216    			tmp = 0;
;;;217    			oled_show_line2(INPUT_NUM, BUTTON_OK);
;;;218    			while(key != BUTTON_OK){				
;;;219    				if(BUTTON_FUN == key){//切换功能
;;;220    					oled_clear_line(LINE2);
;;;221    					oled_show_line1(INPUT_TYPE, "F");
;;;222    					fun_flag = KEY_FUN;
;;;223    					me->key = -1;
;;;224    					tmp = 0;
;;;225    					return;
;;;226    				}
;;;227    				if(key != -1){
;;;228    					if(key < 10){
;;;229    						tmp = tmp*10 + key;
;;;230    					}else if(BUTTON_DEL == key){
;;;231    						tmp /= 10;
;;;232    					}
;;;233    					oled_show_line2(INPUT_NUM, key);
;;;234    				}
;;;235    				key = get_key();
;;;236    			}
;;;237    			me->key = tmp;
;;;238    		}
;;;239    	}
;;;240    	
;;;241    	return;
;;;242    }
00000a  bd70              POP      {r4-r6,pc}
                  |L4.12|
00000c  7828              LDRB     r0,[r5,#0]            ;150
00000e  b348              CBZ      r0,|L4.100|
000010  2c0c              CMP      r4,#0xc               ;150
000012  d127              BNE      |L4.100|
000014  2002              MOVS     r0,#2                 ;151
000016  f7fffffe          BL       oled_clear_line
00001a  2004              MOVS     r0,#4                 ;152
00001c  f7fffffe          BL       oled_clear_line
000020  485a              LDR      r0,|L4.396|
000022  6800              LDR      r0,[r0,#0]            ;153  ; fun_flag
000024  2801              CMP      r0,#1                 ;153
000026  d10e              BNE      |L4.70|
000028  a259              ADR      r2,|L4.400|
00002a  2100              MOVS     r1,#0                 ;155
00002c  4608              MOV      r0,r1                 ;155
00002e  f7fffffe          BL       LCD_P8x16Str
000032  2000              MOVS     r0,#0                 ;156
000034  4955              LDR      r1,|L4.396|
000036  6008              STR      r0,[r1,#0]            ;156  ; fun_flag
000038  4956              LDR      r1,|L4.404|
00003a  6008              STR      r0,[r1,#0]            ;157  ; tmp
00003c  a256              ADR      r2,|L4.408|
00003e  2106              MOVS     r1,#6                 ;159
000040  f7fffffe          BL       LCD_P8x16Str
000044  e00a              B        |L4.92|
                  |L4.70|
000046  4851              LDR      r0,|L4.396|
000048  6800              LDR      r0,[r0,#0]            ;160  ; fun_flag
00004a  b938              CBNZ     r0,|L4.92|
00004c  a253              ADR      r2,|L4.412|
00004e  2100              MOVS     r1,#0                 ;162
000050  4608              MOV      r0,r1                 ;162
000052  f7fffffe          BL       LCD_P8x16Str
000056  2001              MOVS     r0,#1                 ;163
000058  494c              LDR      r1,|L4.396|
00005a  6008              STR      r0,[r1,#0]            ;163  ; fun_flag
                  |L4.92|
00005c  f04f30ff          MOV      r0,#0xffffffff        ;165
000060  6068              STR      r0,[r5,#4]            ;165
000062  e7d2              B        |L4.10|
                  |L4.100|
000064  7828              LDRB     r0,[r5,#0]            ;169
000066  2801              CMP      r0,#1                 ;169
000068  d145              BNE      |L4.246|
00006a  4848              LDR      r0,|L4.396|
00006c  6800              LDR      r0,[r0,#0]            ;170  ; fun_flag
00006e  2801              CMP      r0,#1                 ;170
000070  d142              BNE      |L4.248|
000072  2c09              CMP      r4,#9                 ;171
000074  dd02              BLE      |L4.124|
000076  1e80              SUBS     r0,r0,#2              ;172
000078  6068              STR      r0,[r5,#4]            ;172
00007a  e7c6              B        |L4.10|
                  |L4.124|
00007c  2c0e              CMP      r4,#0xe               ;175
00007e  d239              BCS      |L4.244|
000080  e8dff004          TBB      [pc,r4]               ;175
000084  070c1116          DCB      0x07,0x0c,0x11,0x16
000088  1b20252a          DCB      0x1b,0x20,0x25,0x2a
00008c  2f303132          DCB      0x2f,0x30,0x31,0x32
000090  3334              DCB      0x33,0x34
000092  b2e1              UXTB     r1,r4                 ;177
000094  2002              MOVS     r0,#2                 ;177
000096  f7fffffe          BL       oled_show_line2
00009a  e02c              B        |L4.246|
00009c  b2e1              UXTB     r1,r4                 ;180
00009e  2003              MOVS     r0,#3                 ;180
0000a0  f7fffffe          BL       oled_show_line2
0000a4  e027              B        |L4.246|
0000a6  b2e1              UXTB     r1,r4                 ;183
0000a8  2004              MOVS     r0,#4                 ;183
0000aa  f7fffffe          BL       oled_show_line2
0000ae  e022              B        |L4.246|
0000b0  b2e1              UXTB     r1,r4                 ;186
0000b2  2005              MOVS     r0,#5                 ;186
0000b4  f7fffffe          BL       oled_show_line2
0000b8  e01d              B        |L4.246|
0000ba  b2e1              UXTB     r1,r4                 ;189
0000bc  2007              MOVS     r0,#7                 ;189
0000be  f7fffffe          BL       oled_show_line2
0000c2  e018              B        |L4.246|
0000c4  b2e1              UXTB     r1,r4                 ;192
0000c6  2008              MOVS     r0,#8                 ;192
0000c8  f7fffffe          BL       oled_show_line2
0000cc  e013              B        |L4.246|
0000ce  b2e1              UXTB     r1,r4                 ;195
0000d0  2009              MOVS     r0,#9                 ;195
0000d2  f7fffffe          BL       oled_show_line2
0000d6  e00e              B        |L4.246|
0000d8  b2e1              UXTB     r1,r4                 ;199
0000da  200a              MOVS     r0,#0xa               ;199
0000dc  f7fffffe          BL       oled_show_line2
0000e0  e009              B        |L4.246|
0000e2  bf00              NOP                            ;203
0000e4  bf00              NOP                            ;204
0000e6  bf00              NOP                            ;205
0000e8  bf00              NOP                            ;206
0000ea  bf00              NOP                            ;207
0000ec  2002              MOVS     r0,#2                 ;208
0000ee  f7fffffe          BL       oled_clear_line
0000f2  e000              B        |L4.246|
                  |L4.244|
0000f4  bf00              NOP                            ;211
                  |L4.246|
0000f6  e046              B        |L4.390|
                  |L4.248|
0000f8  4824              LDR      r0,|L4.396|
0000fa  6800              LDR      r0,[r0,#0]            ;213  ; fun_flag
0000fc  bbf0              CBNZ     r0,|L4.380|
0000fe  2002              MOVS     r0,#2                 ;214
000100  f7fffffe          BL       oled_clear_line
000104  2004              MOVS     r0,#4                 ;215
000106  f7fffffe          BL       oled_clear_line
00010a  2000              MOVS     r0,#0                 ;216
00010c  4921              LDR      r1,|L4.404|
00010e  6008              STR      r0,[r1,#0]            ;216  ; tmp
000110  210a              MOVS     r1,#0xa               ;217
000112  2006              MOVS     r0,#6                 ;217
000114  f7fffffe          BL       oled_show_line2
000118  e02e              B        |L4.376|
                  |L4.282|
00011a  2c0c              CMP      r4,#0xc               ;219
00011c  d10f              BNE      |L4.318|
00011e  2002              MOVS     r0,#2                 ;220
000120  f7fffffe          BL       oled_clear_line
000124  a11d              ADR      r1,|L4.412|
000126  2000              MOVS     r0,#0                 ;221
000128  f7fffffe          BL       oled_show_line1
00012c  2001              MOVS     r0,#1                 ;222
00012e  4917              LDR      r1,|L4.396|
000130  6008              STR      r0,[r1,#0]            ;222  ; fun_flag
000132  1e80              SUBS     r0,r0,#2              ;223
000134  6068              STR      r0,[r5,#4]            ;223
000136  2000              MOVS     r0,#0                 ;224
000138  4916              LDR      r1,|L4.404|
00013a  6008              STR      r0,[r1,#0]            ;224  ; tmp
00013c  e765              B        |L4.10|
                  |L4.318|
00013e  1c60              ADDS     r0,r4,#1              ;227
000140  b1b8              CBZ      r0,|L4.370|
000142  2c0a              CMP      r4,#0xa               ;228
000144  da08              BGE      |L4.344|
000146  4813              LDR      r0,|L4.404|
000148  6800              LDR      r0,[r0,#0]            ;229  ; tmp
00014a  eb000080          ADD      r0,r0,r0,LSL #2       ;229
00014e  eb040040          ADD      r0,r4,r0,LSL #1       ;229
000152  4910              LDR      r1,|L4.404|
000154  6008              STR      r0,[r1,#0]            ;229  ; tmp
000156  e008              B        |L4.362|
                  |L4.344|
000158  2c0b              CMP      r4,#0xb               ;230
00015a  d106              BNE      |L4.362|
00015c  480d              LDR      r0,|L4.404|
00015e  6800              LDR      r0,[r0,#0]            ;231  ; tmp
000160  210a              MOVS     r1,#0xa               ;231
000162  fbb0f0f1          UDIV     r0,r0,r1              ;231
000166  490b              LDR      r1,|L4.404|
000168  6008              STR      r0,[r1,#0]            ;231  ; tmp
                  |L4.362|
00016a  b2e1              UXTB     r1,r4                 ;233
00016c  2006              MOVS     r0,#6                 ;233
00016e  f7fffffe          BL       oled_show_line2
                  |L4.370|
000172  f7fffffe          BL       get_key
000176  4604              MOV      r4,r0                 ;235
                  |L4.376|
000178  2c0a              CMP      r4,#0xa               ;218
00017a  e000              B        |L4.382|
                  |L4.380|
00017c  e003              B        |L4.390|
                  |L4.382|
00017e  d1cc              BNE      |L4.282|
000180  4804              LDR      r0,|L4.404|
000182  6800              LDR      r0,[r0,#0]            ;237  ; tmp
000184  6068              STR      r0,[r5,#4]            ;237
                  |L4.390|
000186  bf00              NOP                            ;241
000188  e73f              B        |L4.10|
;;;243    
                          ENDP

00018a  0000              DCW      0x0000
                  |L4.396|
                          DCD      fun_flag
                  |L4.400|
000190  4e00              DCB      "N",0
000192  00                DCB      0
000193  00                DCB      0
                  |L4.404|
                          DCD      tmp
                  |L4.408|
000198  5f00              DCB      "_",0
00019a  00                DCB      0
00019b  00                DCB      0
                  |L4.412|
00019c  4600              DCB      "F",0
00019e  00                DCB      0
00019f  00                DCB      0

                          AREA ||i.fun_xor||, CODE, READONLY, ALIGN=1

                  fun_xor PROC
;;;130    
;;;131    static u8 fun_xor(char *p, int len){
000000  b510              PUSH     {r4,lr}
000002  4602              MOV      r2,r0
;;;132    	u8 ret = 0;
000004  2000              MOVS     r0,#0
;;;133    	
;;;134    	while(len --){
000006  e002              B        |L5.14|
                  |L5.8|
;;;135    		ret = ret ^ *p;
000008  7813              LDRB     r3,[r2,#0]
00000a  4058              EORS     r0,r0,r3
;;;136    		p += 1;
00000c  1c52              ADDS     r2,r2,#1
                  |L5.14|
00000e  000b              MOVS     r3,r1                 ;134
000010  f1a10101          SUB      r1,r1,#1              ;134
000014  d1f8              BNE      |L5.8|
;;;137    	}
;;;138    	
;;;139    	return ret;
;;;140    }
000016  bd10              POP      {r4,pc}
;;;141    
                          ENDP


                          AREA ||i.key_trans||, CODE, READONLY, ALIGN=2

                  key_trans PROC
;;;243    
;;;244    void key_trans(u16 key, u8 *data){
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;245    	int i;
;;;246    	
;;;247    	if(fun_flag == KEY_FUN){
000006  480d              LDR      r0,|L6.60|
000008  6800              LDR      r0,[r0,#0]  ; fun_flag
00000a  2801              CMP      r0,#1
00000c  d102              BNE      |L6.20|
;;;248    		data[0] = 2;
00000e  2002              MOVS     r0,#2
000010  7020              STRB     r0,[r4,#0]
000012  e001              B        |L6.24|
                  |L6.20|
;;;249    	}else{
;;;250    		data[0] = 1;
000014  2001              MOVS     r0,#1
000016  7020              STRB     r0,[r4,#0]
                  |L6.24|
;;;251    	}
;;;252    	data[1] = 2;//数据长度
000018  2002              MOVS     r0,#2
00001a  7060              STRB     r0,[r4,#1]
;;;253    	data[2] = (key>>8)&0xFF;
00001c  0a30              LSRS     r0,r6,#8
00001e  70a0              STRB     r0,[r4,#2]
;;;254    	data[3] = key&0xFF;
000020  70e6              STRB     r6,[r4,#3]
;;;255    	data[4] = fun_xor(data, 4);
000022  2104              MOVS     r1,#4
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       fun_xor
00002a  7120              STRB     r0,[r4,#4]
;;;256    	for(i=5;i<32;i++){
00002c  2505              MOVS     r5,#5
00002e  e002              B        |L6.54|
                  |L6.48|
;;;257    		data[i] = 0;
000030  2000              MOVS     r0,#0
000032  5560              STRB     r0,[r4,r5]
000034  1c6d              ADDS     r5,r5,#1              ;256
                  |L6.54|
000036  2d20              CMP      r5,#0x20              ;256
000038  dbfa              BLT      |L6.48|
;;;258    	}
;;;259    	
;;;260    	return;
;;;261    }
00003a  bd70              POP      {r4-r6,pc}
;;;262    
                          ENDP

                  |L6.60|
                          DCD      fun_flag

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;265    
;;;266    int main(void)
000000  f7fffffe          BL       RCC_Configuration
;;;267    {
;;;268    	int key;
;;;269    	RCC_Configuration();   //初始化系统
;;;270    	NVIC_Configuration();	
000004  f7fffffe          BL       NVIC_Configuration
;;;271    	spi_init();
000008  f7fffffe          BL       spi_init
;;;272    	button_init();
00000c  f7fffffe          BL       button_init
;;;273    	//OLED_Init();
;;;274    	LCD_Init();
000010  f7fffffe          BL       LCD_Init
;;;275    	//OLED_Clear();
;;;276    	ad_init();
000014  f7fffffe          BL       ad_init
;;;277      Init_St7565();	 
000018  f7fffffe          BL       Init_St7565
;;;278       while (1){	
00001c  e00b              B        |L7.54|
                  |L7.30|
;;;279    		key = get_key();
00001e  f7fffffe          BL       get_key
000022  4604              MOV      r4,r0
;;;280    		me.key = key;
000024  4804              LDR      r0,|L7.56|
000026  6044              STR      r4,[r0,#4]  ; me
;;;281    		display_by_key(key, &me);
000028  4601              MOV      r1,r0
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       display_by_key
;;;282    		FSM_dispatch(me);
000030  4801              LDR      r0,|L7.56|
000032  6881              LDR      r1,[r0,#8]  ; me
000034  4788              BLX      r1
                  |L7.54|
000036  e7f2              B        |L7.30|
;;;283      }
;;;284    }
;;;285    
                          ENDP

                  |L7.56|
                          DCD      ||me||

                          AREA ||.data||, DATA, ALIGN=2

                  nrf24l01
                          DCD      0x00000000
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  fun_flag
                          DCD      0x00000001
                  addr
00000c  34431010          DCB      0x34,0x43,0x10,0x10
000010  01000000          DCB      0x01,0x00,0x00,0x00
                  ||me||
000014  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0xffffffff
                          DCD      FSM_link_start
                  tmp
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
