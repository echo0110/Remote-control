; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\output\nrf24l01.o --asm_dir=.\Listing\ --list_dir=.\Listing\ --depend=.\output\nrf24l01.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\bsp_lib -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\STM32F10x_StdPeriph_Driver\src -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -I..\bsp_lib -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\ST\STM32F10x -D__UVISION_VERSION=515 -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\output\nrf24l01.crf ..\bsp_lib\nrf24l01.c]
                          THUMB

                          AREA ||i.NRF24L01_Send||, CODE, READONLY, ALIGN=2

                  NRF24L01_Send PROC
;;;199    //返回0表示发送成功，-1失败
;;;200    int NRF24L01_Send(unsigned char *data){
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4606              MOV      r6,r0
;;;201    	int ret = 0;
000006  2700              MOVS     r7,#0
;;;202    	int cnt = 0;
000008  2400              MOVS     r4,#0
;;;203    	unsigned char sta;	
;;;204    	//CE=0;   
;;;205    	GPIO_ResetBits(CE_GPIO, CE_GPIO_PIN);
00000a  2110              MOVS     r1,#0x10
00000c  4829              LDR      r0,|L1.180|
00000e  f7fffffe          BL       GPIO_ResetBits
;;;206    	spi_tx_byte(FLUSH_TX,0x00);
000012  2100              MOVS     r1,#0
000014  20e1              MOVS     r0,#0xe1
000016  f7fffffe          BL       spi_tx_byte
;;;207    	GPIO_ResetBits(CSN_GPIO, CSN_GPIO_PIN);
00001a  2110              MOVS     r1,#0x10
00001c  4826              LDR      r0,|L1.184|
00001e  f7fffffe          BL       GPIO_ResetBits
;;;208    	SPI_Write_Buf(WR_TX_PLOAD, data, TX_PLOAD_WIDTH);     // 装载数据 
000022  2220              MOVS     r2,#0x20
000024  4631              MOV      r1,r6
000026  20a0              MOVS     r0,#0xa0
000028  f7fffffe          BL       SPI_Write_Buf
;;;209    	GPIO_SetBits(CSN_GPIO, CSN_GPIO_PIN);
00002c  2110              MOVS     r1,#0x10
00002e  4822              LDR      r0,|L1.184|
000030  f7fffffe          BL       GPIO_SetBits
;;;210    	//CE=1;   //置高CE，激发数据发送
;;;211    	GPIO_SetBits(CE_GPIO, CE_GPIO_PIN);
000034  2110              MOVS     r1,#0x10
000036  481f              LDR      r0,|L1.180|
000038  f7fffffe          BL       GPIO_SetBits
;;;212    	while(GPIO_ReadInputDataBit(IRQ_GPIO, IRQ_GPIO_PIN) == Bit_SET){//等待发送完成
00003c  e00d              B        |L1.90|
                  |L1.62|
;;;213    		cnt++;
00003e  1c64              ADDS     r4,r4,#1
;;;214    		Delay_Ms(2);
000040  2002              MOVS     r0,#2
000042  f7fffffe          BL       Delay_Ms
;;;215    		if(cnt>100){
000046  2c64              CMP      r4,#0x64
000048  dd07              BLE      |L1.90|
;;;216    			Delay_Ms(2000);
00004a  f44f60fa          MOV      r0,#0x7d0
00004e  f7fffffe          BL       Delay_Ms
;;;217    			return -1;
000052  f04f30ff          MOV      r0,#0xffffffff
                  |L1.86|
;;;218    		}
;;;219    	}
;;;220    	while(GPIO_ReadInputDataBit(IRQ_GPIO, IRQ_GPIO_PIN) == Bit_RESET){
;;;221    		sta = spi_read_reg(STATUS);
;;;222    		spi_tx_byte(WRITE_REG_N+STATUS, sta);
;;;223    		Delay_Ms(10);
;;;224    		cnt++;
;;;225    		if(cnt>20){
;;;226    			Delay_Ms(2000);
;;;227    			return -1;
;;;228    		}		
;;;229    	}
;;;230    	if(sta&0x20){//发送成功
;;;231    		//GPIO_SetBits(GPIOF, GPIO_Pin_8);
;;;232    		ret = 0;
;;;233    	} 
;;;234    	if(sta&0x10){//发送失败
;;;235    		//GPIO_ResetBits(GPIOF, GPIO_Pin_8);
;;;236    		ret = -1;
;;;237    	}
;;;238    
;;;239    	return ret;
;;;240    }
000056  e8bd81f0          POP      {r4-r8,pc}
                  |L1.90|
00005a  2120              MOVS     r1,#0x20              ;212
00005c  4815              LDR      r0,|L1.180|
00005e  f7fffffe          BL       GPIO_ReadInputDataBit
000062  2801              CMP      r0,#1                 ;212
000064  d0eb              BEQ      |L1.62|
000066  e014              B        |L1.146|
                  |L1.104|
000068  2007              MOVS     r0,#7                 ;221
00006a  f7fffffe          BL       spi_read_reg
00006e  4605              MOV      r5,r0                 ;221
000070  4629              MOV      r1,r5                 ;222
000072  2027              MOVS     r0,#0x27              ;222
000074  f7fffffe          BL       spi_tx_byte
000078  200a              MOVS     r0,#0xa               ;223
00007a  f7fffffe          BL       Delay_Ms
00007e  1c64              ADDS     r4,r4,#1              ;224
000080  2c14              CMP      r4,#0x14              ;225
000082  dd06              BLE      |L1.146|
000084  f44f60fa          MOV      r0,#0x7d0             ;226
000088  f7fffffe          BL       Delay_Ms
00008c  f04f30ff          MOV      r0,#0xffffffff        ;227
000090  e7e1              B        |L1.86|
                  |L1.146|
000092  2120              MOVS     r1,#0x20              ;220
000094  4807              LDR      r0,|L1.180|
000096  f7fffffe          BL       GPIO_ReadInputDataBit
00009a  2800              CMP      r0,#0                 ;220
00009c  d0e4              BEQ      |L1.104|
00009e  f0050020          AND      r0,r5,#0x20           ;230
0000a2  b100              CBZ      r0,|L1.166|
0000a4  2700              MOVS     r7,#0                 ;232
                  |L1.166|
0000a6  f0050010          AND      r0,r5,#0x10           ;234
0000aa  b108              CBZ      r0,|L1.176|
0000ac  f04f37ff          MOV      r7,#0xffffffff        ;236
                  |L1.176|
0000b0  4638              MOV      r0,r7                 ;239
0000b2  e7d0              B        |L1.86|
;;;241    
                          ENDP

                  |L1.180|
                          DCD      0x40011000
                  |L1.184|
                          DCD      0x40010800

                          AREA ||i.NRF24L01_TX_Mode||, CODE, READONLY, ALIGN=2

                  NRF24L01_TX_Mode PROC
;;;174    /*******************************发*****送*****模*****式*****代*****码*************************************/
;;;175    void NRF24L01_TX_Mode(u8 *addr){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;176    	unsigned char sta;
;;;177    	//volatile unsigned int i = 0xFFFF;
;;;178    	//CE=0;
;;;179    	GPIO_ResetBits(CE_GPIO, CE_GPIO_PIN);	
000004  2110              MOVS     r1,#0x10
000006  481e              LDR      r0,|L2.128|
000008  f7fffffe          BL       GPIO_ResetBits
;;;180    	spi_tx_byte(FLUSH_TX,0x00);
00000c  2100              MOVS     r1,#0
00000e  20e1              MOVS     r0,#0xe1
000010  f7fffffe          BL       spi_tx_byte
;;;181    	SPI_Write_Buf(WRITE_REG_N + TX_ADDR, addr, TX_ADR_WIDTH);    // Writes TX_Address to nRF24L01
000014  2205              MOVS     r2,#5
000016  4621              MOV      r1,r4
000018  2030              MOVS     r0,#0x30
00001a  f7fffffe          BL       SPI_Write_Buf
;;;182    	SPI_Write_Buf(WRITE_REG_N + RX_ADDR_P0, addr, TX_ADR_WIDTH); // RX_Addr0 same as TX_Adr for Auto.Ack
00001e  2205              MOVS     r2,#5
000020  4621              MOV      r1,r4
000022  202a              MOVS     r0,#0x2a
000024  f7fffffe          BL       SPI_Write_Buf
;;;183    	spi_tx_byte(WRITE_REG_N + EN_AA, 0x01);      // Enable Auto.Ack:Pipe0
000028  2101              MOVS     r1,#1
00002a  2021              MOVS     r0,#0x21
00002c  f7fffffe          BL       spi_tx_byte
;;;184    	spi_tx_byte(WRITE_REG_N + EN_RXADDR, 0x01);  // Enable Pipe0
000030  2101              MOVS     r1,#1
000032  2022              MOVS     r0,#0x22
000034  f7fffffe          BL       spi_tx_byte
;;;185    	spi_tx_byte(WRITE_REG_N + SETUP_RETR, 0xFF); // 500us + 86us, 10 retrans...1a
000038  21ff              MOVS     r1,#0xff
00003a  2024              MOVS     r0,#0x24
00003c  f7fffffe          BL       spi_tx_byte
;;;186    	spi_tx_byte(WRITE_REG_N + RF_CH, 40);        // Select RF channel 40 
000040  2128              MOVS     r1,#0x28
000042  2025              MOVS     r0,#0x25
000044  f7fffffe          BL       spi_tx_byte
;;;187    	spi_tx_byte(WRITE_REG_N + RF_SETUP, 0x07);   // TX_PWR:0dBm, Datarate:1Mbps, LNA:HCURR
000048  2107              MOVS     r1,#7
00004a  2026              MOVS     r0,#0x26
00004c  f7fffffe          BL       spi_tx_byte
;;;188    	spi_tx_byte(WRITE_REG_N + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度
000050  2120              MOVS     r1,#0x20
000052  2031              MOVS     r0,#0x31
000054  f7fffffe          BL       spi_tx_byte
;;;189    	spi_tx_byte(WRITE_REG_N + CONFIG, 0x0e);
000058  210e              MOVS     r1,#0xe
00005a  2020              MOVS     r0,#0x20
00005c  f7fffffe          BL       spi_tx_byte
;;;190    	//CE=1;
;;;191    	GPIO_SetBits(CE_GPIO, CE_GPIO_PIN);
000060  2110              MOVS     r1,#0x10
000062  4807              LDR      r0,|L2.128|
000064  f7fffffe          BL       GPIO_SetBits
;;;192    
;;;193    	sta = spi_read_reg(STATUS);
000068  2007              MOVS     r0,#7
00006a  f7fffffe          BL       spi_read_reg
00006e  4605              MOV      r5,r0
;;;194    	spi_tx_byte(WRITE_REG_N+STATUS, sta);	
000070  4629              MOV      r1,r5
000072  2027              MOVS     r0,#0x27
000074  f7fffffe          BL       spi_tx_byte
;;;195    	Delay_Ms(10);
000078  200a              MOVS     r0,#0xa
00007a  f7fffffe          BL       Delay_Ms
;;;196    	return;
;;;197    }
00007e  bd70              POP      {r4-r6,pc}
;;;198    
                          ENDP

                  |L2.128|
                          DCD      0x40011000

                          AREA ||i.SPI_Write_Buf||, CODE, READONLY, ALIGN=2

                  SPI_Write_Buf PROC
;;;158    
;;;159    static void SPI_Write_Buf(unsigned char reg, unsigned char *pBuf, unsigned char bytes){
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;160    
;;;161    	//CSN = 0;
;;;162    	GPIO_ResetBits(CSN_GPIO, CSN_GPIO_PIN);
000008  2110              MOVS     r1,#0x10
00000a  480d              LDR      r0,|L3.64|
00000c  f7fffffe          BL       GPIO_ResetBits
;;;163    	SPI_I2S_SendData(NRF24L01_SPI, reg);
000010  4629              MOV      r1,r5
000012  480c              LDR      r0,|L3.68|
000014  f7fffffe          BL       SPI_I2S_SendData
;;;164    	wait();
000018  f7fffffe          BL       wait
;;;165    	while(bytes--){
00001c  e006              B        |L3.44|
                  |L3.30|
;;;166    		SPI_I2S_SendData(NRF24L01_SPI, *pBuf++);
00001e  f8141b01          LDRB     r1,[r4],#1
000022  4808              LDR      r0,|L3.68|
000024  f7fffffe          BL       SPI_I2S_SendData
;;;167    		wait();
000028  f7fffffe          BL       wait
                  |L3.44|
00002c  0030              MOVS     r0,r6                 ;165
00002e  f1a60101          SUB      r1,r6,#1              ;165
000032  b2ce              UXTB     r6,r1                 ;165
000034  d1f3              BNE      |L3.30|
;;;168    	}
;;;169    	//CSN = 1;
;;;170    	GPIO_SetBits(CSN_GPIO, CSN_GPIO_PIN);
000036  2110              MOVS     r1,#0x10
000038  4801              LDR      r0,|L3.64|
00003a  f7fffffe          BL       GPIO_SetBits
;;;171    	return;
;;;172    }
00003e  bd70              POP      {r4-r6,pc}
;;;173    
                          ENDP

                  |L3.64|
                          DCD      0x40010800
                  |L3.68|
                          DCD      0x40013000

                          AREA ||i.spi_init||, CODE, READONLY, ALIGN=2

                  spi_init PROC
;;;69     //spi init
;;;70     void spi_init(void){
000000  b500              PUSH     {lr}
000002  b087              SUB      sp,sp,#0x1c
;;;71     	GPIO_InitTypeDef GPIO_InitStructure;
;;;72     	SPI_InitTypeDef SPI_InitStructure;
;;;73     	SendBuff[SENDBUFF_SIZE-1] = 66;
000004  2042              MOVS     r0,#0x42
000006  492e              LDR      r1,|L4.192|
000008  77c8              STRB     r0,[r1,#0x1f]
;;;74     	//GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable,ENABLE);
;;;75     	//GPIO_PinRemapConfig(GPIO_Remap_SPI3,ENABLE);
;;;76     	
;;;77     	//CLK,MISO,MOSI
;;;78     	GPIO_InitStructure.GPIO_Pin   = SPI_CLK_PIN | SPI_MISO_PIN | SPI_MOSI_PIN;
00000a  20e0              MOVS     r0,#0xe0
00000c  f8ad0018          STRH     r0,[sp,#0x18]
;;;79     	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF_PP;
000010  2018              MOVS     r0,#0x18
000012  f88d001b          STRB     r0,[sp,#0x1b]
;;;80     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000016  2003              MOVS     r0,#3
000018  f88d001a          STRB     r0,[sp,#0x1a]
;;;81     	GPIO_Init(SPI_GPIO, &GPIO_InitStructure);
00001c  a906              ADD      r1,sp,#0x18
00001e  4829              LDR      r0,|L4.196|
000020  f7fffffe          BL       GPIO_Init
;;;82     	//CE
;;;83     	GPIO_InitStructure.GPIO_Pin   = CE_GPIO_PIN;
000024  2010              MOVS     r0,#0x10
000026  f8ad0018          STRH     r0,[sp,#0x18]
;;;84     	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
00002a  f88d001b          STRB     r0,[sp,#0x1b]
;;;85     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00002e  2003              MOVS     r0,#3
000030  f88d001a          STRB     r0,[sp,#0x1a]
;;;86     	GPIO_Init(CE_GPIO, &GPIO_InitStructure);
000034  a906              ADD      r1,sp,#0x18
000036  4824              LDR      r0,|L4.200|
000038  f7fffffe          BL       GPIO_Init
;;;87     	//CSN 
;;;88     	GPIO_InitStructure.GPIO_Pin   = CSN_GPIO_PIN;
00003c  2010              MOVS     r0,#0x10
00003e  f8ad0018          STRH     r0,[sp,#0x18]
;;;89     	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
000042  f88d001b          STRB     r0,[sp,#0x1b]
;;;90     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000046  2003              MOVS     r0,#3
000048  f88d001a          STRB     r0,[sp,#0x1a]
;;;91     	GPIO_Init(CSN_GPIO, &GPIO_InitStructure);
00004c  a906              ADD      r1,sp,#0x18
00004e  481d              LDR      r0,|L4.196|
000050  f7fffffe          BL       GPIO_Init
;;;92     	GPIO_SetBits(CSN_GPIO, CSN_GPIO_PIN);
000054  2110              MOVS     r1,#0x10
000056  481b              LDR      r0,|L4.196|
000058  f7fffffe          BL       GPIO_SetBits
;;;93     	//IRQ
;;;94     	GPIO_InitStructure.GPIO_Pin   = IRQ_GPIO_PIN;
00005c  2020              MOVS     r0,#0x20
00005e  f8ad0018          STRH     r0,[sp,#0x18]
;;;95     	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IPU;
000062  2048              MOVS     r0,#0x48
000064  f88d001b          STRB     r0,[sp,#0x1b]
;;;96     //	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;97     	GPIO_Init(IRQ_GPIO, &GPIO_InitStructure);
000068  a906              ADD      r1,sp,#0x18
00006a  4817              LDR      r0,|L4.200|
00006c  f7fffffe          BL       GPIO_Init
;;;98     
;;;99     #if 0
;;;100    //LED
;;;101    	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8;
;;;102    	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_Out_PP;
;;;103    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;104    	GPIO_Init(GPIOF, &GPIO_InitStructure);
;;;105    	GPIO_SetBits(GPIOF, GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8);
;;;106    #endif
;;;107    
;;;108    	//--------------------- SPI configuration ------------------
;;;109    	SPI_InitStructure.SPI_Direction         = SPI_Direction_2Lines_FullDuplex;
000070  2000              MOVS     r0,#0
000072  f8ad0004          STRH     r0,[sp,#4]
;;;110    	SPI_InitStructure.SPI_Mode              = SPI_Mode_Master;
000076  f44f7082          MOV      r0,#0x104
00007a  f8ad0006          STRH     r0,[sp,#6]
;;;111    	SPI_InitStructure.SPI_DataSize          = SPI_DataSize_8b;
00007e  2000              MOVS     r0,#0
000080  f8ad0008          STRH     r0,[sp,#8]
;;;112    	SPI_InitStructure.SPI_CPOL              = SPI_CPOL_Low;
000084  f8ad000a          STRH     r0,[sp,#0xa]
;;;113    	SPI_InitStructure.SPI_CPHA              = SPI_CPHA_1Edge;
000088  f8ad000c          STRH     r0,[sp,#0xc]
;;;114    	SPI_InitStructure.SPI_NSS               = SPI_NSS_Soft;
00008c  f44f7000          MOV      r0,#0x200
000090  f8ad000e          STRH     r0,[sp,#0xe]
;;;115    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
000094  2038              MOVS     r0,#0x38
000096  f8ad0010          STRH     r0,[sp,#0x10]
;;;116    	SPI_InitStructure.SPI_FirstBit          = SPI_FirstBit_MSB;
00009a  2000              MOVS     r0,#0
00009c  f8ad0012          STRH     r0,[sp,#0x12]
;;;117    	SPI_InitStructure.SPI_CRCPolynomial     = 7;
0000a0  2007              MOVS     r0,#7
0000a2  f8ad0014          STRH     r0,[sp,#0x14]
;;;118    	SPI_I2S_DeInit(NRF24L01_SPI);
0000a6  4809              LDR      r0,|L4.204|
0000a8  f7fffffe          BL       SPI_I2S_DeInit
;;;119    	SPI_Init(NRF24L01_SPI, &SPI_InitStructure);
0000ac  a901              ADD      r1,sp,#4
0000ae  4807              LDR      r0,|L4.204|
0000b0  f7fffffe          BL       SPI_Init
;;;120    	//--------- Enable SPI3 TXE interrupt ------------
;;;121    	//SPI_I2S_ITConfig(SPI3, SPI_I2S_IT_TXE, ENABLE);
;;;122    	SPI_Cmd(NRF24L01_SPI, ENABLE);
0000b4  2101              MOVS     r1,#1
0000b6  4805              LDR      r0,|L4.204|
0000b8  f7fffffe          BL       SPI_Cmd
;;;123    	
;;;124    	return;
;;;125    }
0000bc  b007              ADD      sp,sp,#0x1c
0000be  bd00              POP      {pc}
;;;126    
                          ENDP

                  |L4.192|
                          DCD      SendBuff
                  |L4.196|
                          DCD      0x40010800
                  |L4.200|
                          DCD      0x40011000
                  |L4.204|
                          DCD      0x40013000

                          AREA ||i.spi_read_reg||, CODE, READONLY, ALIGN=2

                  spi_read_reg PROC
;;;134    
;;;135    static unsigned char spi_read_reg(unsigned char reg){
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;136    	//CSN = 0;
;;;137    	GPIO_ResetBits(CSN_GPIO, CSN_GPIO_PIN);
000004  2110              MOVS     r1,#0x10
000006  480e              LDR      r0,|L5.64|
000008  f7fffffe          BL       GPIO_ResetBits
;;;138    	SPI_I2S_SendData(NRF24L01_SPI, reg);
00000c  4621              MOV      r1,r4
00000e  480d              LDR      r0,|L5.68|
000010  f7fffffe          BL       SPI_I2S_SendData
;;;139    	wait();
000014  f7fffffe          BL       wait
;;;140    	SPI_I2S_SendData(NRF24L01_SPI, 0x00);
000018  2100              MOVS     r1,#0
00001a  480a              LDR      r0,|L5.68|
00001c  f7fffffe          BL       SPI_I2S_SendData
;;;141    	while(SPI_I2S_GetFlagStatus(NRF24L01_SPI, SPI_I2S_FLAG_RXNE) == RESET);
000020  bf00              NOP      
                  |L5.34|
000022  2101              MOVS     r1,#1
000024  4807              LDR      r0,|L5.68|
000026  f7fffffe          BL       SPI_I2S_GetFlagStatus
00002a  2800              CMP      r0,#0
00002c  d0f9              BEQ      |L5.34|
;;;142    	//CSN = 1;
;;;143    	GPIO_SetBits(CSN_GPIO, CSN_GPIO_PIN);
00002e  2110              MOVS     r1,#0x10
000030  4803              LDR      r0,|L5.64|
000032  f7fffffe          BL       GPIO_SetBits
;;;144    	return SPI_I2S_ReceiveData(NRF24L01_SPI);
000036  4803              LDR      r0,|L5.68|
000038  f7fffffe          BL       SPI_I2S_ReceiveData
00003c  b2c0              UXTB     r0,r0
;;;145    }
00003e  bd10              POP      {r4,pc}
;;;146    
                          ENDP

                  |L5.64|
                          DCD      0x40010800
                  |L5.68|
                          DCD      0x40013000

                          AREA ||i.spi_tx_byte||, CODE, READONLY, ALIGN=2

                  spi_tx_byte PROC
;;;146    
;;;147    static void spi_tx_byte(unsigned char reg, unsigned char value){
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;148    	//CSN = 0;
;;;149    	GPIO_ResetBits(CSN_GPIO, CSN_GPIO_PIN);
000006  2110              MOVS     r1,#0x10
000008  4809              LDR      r0,|L6.48|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;150    	SPI_I2S_SendData(NRF24L01_SPI, reg);
00000e  4621              MOV      r1,r4
000010  4808              LDR      r0,|L6.52|
000012  f7fffffe          BL       SPI_I2S_SendData
;;;151    	wait();
000016  f7fffffe          BL       wait
;;;152    	SPI_I2S_SendData(NRF24L01_SPI, value);
00001a  4629              MOV      r1,r5
00001c  4805              LDR      r0,|L6.52|
00001e  f7fffffe          BL       SPI_I2S_SendData
;;;153    	wait();
000022  f7fffffe          BL       wait
;;;154    	//CSN = 1;
;;;155    	GPIO_SetBits(CSN_GPIO, CSN_GPIO_PIN);
000026  2110              MOVS     r1,#0x10
000028  4801              LDR      r0,|L6.48|
00002a  f7fffffe          BL       GPIO_SetBits
;;;156    	return;
;;;157    }
00002e  bd70              POP      {r4-r6,pc}
;;;158    
                          ENDP

                  |L6.48|
                          DCD      0x40010800
                  |L6.52|
                          DCD      0x40013000

                          AREA ||i.wait||, CODE, READONLY, ALIGN=2

                  wait PROC
;;;127    
;;;128    static void wait(void){
000000  b510              PUSH     {r4,lr}
;;;129    	while(SPI_I2S_GetFlagStatus(NRF24L01_SPI, SPI_I2S_FLAG_TXE) == RESET);
000002  bf00              NOP      
                  |L7.4|
000004  2102              MOVS     r1,#2
000006  4804              LDR      r0,|L7.24|
000008  f7fffffe          BL       SPI_I2S_GetFlagStatus
00000c  2800              CMP      r0,#0
00000e  d0f9              BEQ      |L7.4|
;;;130    	//must delay
;;;131    	Delay_Ms(3);
000010  2003              MOVS     r0,#3
000012  f7fffffe          BL       Delay_Ms
;;;132    	return;
;;;133    }
000016  bd10              POP      {r4,pc}
;;;134    
                          ENDP

                  |L7.24|
                          DCD      0x40013000

                          AREA ||.data||, DATA, ALIGN=0

                  TX_ADDRESS
000000  34431010          DCB      0x34,0x43,0x10,0x10
000004  01                DCB      0x01
                  RX_ADDRESS
000005  344310            DCB      0x34,0x43,0x10
000008  1001              DCB      0x10,0x01
                  SendBuff
00000a  3700              DCB      0x37,0x00
                          %        28
000028  0000              DCB      0x00,0x00
